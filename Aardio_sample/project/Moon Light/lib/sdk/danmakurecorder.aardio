import debug;
import debug.log;
import gdi;
import win.ui;
import fsys.file;
import thread.command;

namespace sdk;
class danmakurecorder {
	ctor(roomid="452628", width=1280,height=720){
		this.roomid = roomid;
		var assDanmakuTemplate;
		var stime = ..time();
		var danmakuSeq = {};
		var listener = ..thread.command();
		var assname = tostring(roomid) ++ "_" ++ tostring(stime, "%Y%m%d") ++ ".ass"; 
		listener.assRecorder = function(speaker, text){
			this.danmaku2ASS(speaker, text);
		}

	}
	initDRecorder = function(){
		var assHeaderTemplate = ..string.load("res\ass_template");
		assHeaderTemplate ?= ..string.replace(assHeaderTemplate,
										"\<qlp_width\>", width);
		assHeaderTemplate ?= ..string.replace(assHeaderTemplate,
										"\<qlp_height\>", height);
		assHeaderTemplate ?= ..string.replace(assHeaderTemplate,
								"(<@[Script Info]@>[^;]*)", "\1; start: " ++
								tostring(stime, "%Y/%m/%d %H:%M:%S") ++ '\n');
		assDanmakuTemplate = "Dialogue: 0,<qlp_startTime>,<qlp_endTime>,Default,<qlp_speaker>,0,0,0,,{\\move(<qlp_x1>,<qlp_y1>,<qlp_x2>,<qlp_y2>)}<qlp_text>";

		var tempstr = ..string.match(assHeaderTemplate, "![\w]Style\:\s*([^\r\n]+)");
		tempstr = ..string.split(tempstr, "<,>");
		//font = ::LOGFONT(name=tempstr[2];point=tonumber(tempstr[3]));
		var pt = 1/72;
		var px = tonumber(tempstr[3]) * pt * ..gdi.getDpi();
		var channel = ..math.floor(height/px);
		for(i=1;channel;1){
			..table.push(danmakuSeq,
				{
					TimeNode = 0;
					Width = 0;
					Speed = 0;});
		}
		if(!..io.exist(assname)){
			if(!..string.save(assname, assHeaderTemplate)){
				return null, "file not created";
			}	
		} else {
			var fh = ..fsys.file(assname);
			var line, t;
			var linei = 0;
			while(fh){
				line = fh.read();
				t = ..string.match(line, ";\s*start\:\s*(\d{4}/\d{2}/\d{2}\s+\d{2}\:\d{2}\:\d{2})");
				if(t){
					stime = ..time(t);
					fh.close();
					break;	
				} else {
					linei ++;
					if(linei > 8){
						break;
					}
				}
				
			}
		}

	}
	getAvailDanmakuChannel = function(currentSpeed){
		var currentTime = ..time().getMilliTime() - stime.getMilliTime();
		for(i=1;#danmakuSeq;1){
			if(danmakuSeq[i].TimeNode == 0){
				return i;
			}
			var con = (currentTime - danmakuSeq[i].TimeNode) *
							currentSpeed - danmakuSeq[i].Width;
			if(con > 0){
				con = ((currentTime - danmakuSeq[i].TimeNode) * danmakuSeq[i].Speed -
							danmakuSeq[i].Width) / (currentSpeed - danmakuSeq[i].Speed);
				if(con > width / currentSpeed){
					return i;
				}
				elseif(currentSpeed - danmakuSeq[i].Speed <= 0){
					return i;
				}
			}

		}
		return -4;
	}
	danmaku2ASS = function(speaker, text){
		var d = {
					byte speaker[];
    				byte text[];
    				double posX1;
    				double posY1;
    				double posX2;
    				double posY2;
    				double length;
    				double step;
				};
		d.speaker = speaker;
		d.text = text;
		d.posX1 = ..math.ceil(width);
		d.length = ..gdi.getTextExtent(::GetDC(listener.hwnd), d.text);
		var pt = 1/72;
		var px = pt * ..gdi.getDpi(); 
		d.length = d.length * px;
		d.length = ..math.ceil(d.length);
		d.step = ..math.sqrt((width + d.length)/width) * (width / 8000);
		var availDChannel = this.getAvailDanmakuChannel(d.step);
		if(availDChannel < 0){
			var t = ..time().getMilliTime() - stime.getMilliTime();
			availDChannel = ..math.random(1, #danmakuSeq);
			if(danmakuSeq[availDChannel].Speed != 0){
				var dt = ..math.ceil(danmakuSeq[availDChannel].Width /
							danmakuSeq[availDChannel].Speed);
				danmakuSeq[availDChannel].TimeNode = ..math.max(t,
												danmakuSeq[availDChannel].TimeNode + dt);
				
			} else {
				danmakuSeq[availDChannel].TimeNode = t;
			}
			
			danmakuSeq[availDChannel].Width = d.length;
			danmakuSeq[availDChannel].Speed = d.step;
		} else {
			var t = ..time().getMilliTime() - stime.getMilliTime();
			danmakuSeq[availDChannel].TimeNode = t;
			danmakuSeq[availDChannel].Width = d.length;
			danmakuSeq[availDChannel].Speed = d.step;
		}
		
		d.posY1 = (availDChannel - 1) * (height / #danmakuSeq);
		d.posY1 = ..math.floor(d.posY1);
		d.posX2 = -d.length;
		d.posY2 = d.posY1;
		this.addASS(d, availDChannel);
	}
	addASS = function(danmustru, channel){

		var get_timemark = function(ms){
			var timemark;
			if(..time.istime(ms)){
				timemark = ms.getMilliTime() - stime.getMilliTime();
			} else {
				timemark = ms;
			}
			
			var temp = ..time().utc().setMilliTime(timemark);
			var timestr = tostring(temp, "%H:%M:%S");
			timestr = timestr ++ "." ++ ..string.left(
						..string.format("%03i", temp.milliseconds), 2);
			return timestr; 
		}

		var asstime = ..time();
		var timems = asstime.getMilliTime() - stime.getMilliTime();
		timems = ..math.max(timems, danmakuSeq[channel].TimeNode);
		var timestr = get_timemark(timems)
		tempstr = ..string.replace(assDanmakuTemplate, 
										"\<qlp_startTime\>", timestr);
		var duration = (width + danmustru.length) / danmustru.step;
		timestr = get_timemark(timems + duration);
		tempstr = ..string.replace(tempstr,
										"\<qlp_endTime\>", timestr);
		tempstr = ..string.replace(tempstr,
										"\<qlp_speaker\>", danmustru.speaker);
		tempstr = ..string.replace(tempstr,
										"\<qlp_x1\>", danmustru.posX1);
		tempstr = ..string.replace(tempstr,
										"\<qlp_y1\>", danmustru.posY1);
		tempstr = ..string.replace(tempstr,
										"\<qlp_x2\>", danmustru.posX2);
		tempstr = ..string.replace(tempstr,
										"\<qlp_y2\>", danmustru.posY2);
		tempstr = ..string.replace(tempstr,
										"\<qlp_text\>", danmustru.text);
		if(..io.exist(assname)){
			..string.save(assname, '\n' ++ tempstr, true);	
		}

	}

}

/*
if(_STUDIO_INVOKED){
	..io.open();	
}
var test = danmakurecorder();
test.initDRecorder();
test.addASS();
test.danmaku2ASS();
execute("pause");
*/