import win.ui;
/*DSG{{*/
mainForm = win.form(text="GoogleTranslator";right=579;bottom=319)
mainForm.add(
button={cls="button";text="翻译";left=490;top=290;right=570;bottom=315;ah=1;aw=1;z=3};
richedit={cls="richedit";left=5;top=5;right=575;bottom=145;ah=1;aw=1;edge=1;hscroll=1;multiline=1;vscroll=1;wrap=1;z=2};
richedit2={cls="richedit";left=5;top=146;right=575;bottom=286;ah=1;aw=1;edge=1;hscroll=1;multiline=1;vscroll=1;wrap=1;z=1}
)
/*}}*/

import win.ui.menu;//必须导入菜单支持库
mainForm.richedit.wndproc = function(hwnd,message,wParam,lParam){
	if( message == 0x205/*_WM_RBUTTONUP*/  ){ 
	   mainForm.richedit.popMenu();
	}
};
mainForm.richedit2.wndproc = function(hwnd,message,wParam,lParam){
	if( message == 0x205/*_WM_RBUTTONUP*/  ){ 
	   mainForm.richedit2.popMenu();
	}
};
import nodeJs;
nodeJs.require('@vitalets/google-translate-api');
nodeJs.require('jayson');

//可以指定node.js中可以使用的启动参数,这里省略,默认会添加port属性
var google_par = {
			from = "auto";
            to = "zh-CN";
            tld = "cn";
		}; 
nodeJs.startEnviron({
		data = "test";
		option = google_par;
})

var testjs = /*
	const translate = require('@vitalets/google-translate-api');
	const jayson = require('jayson');
	const fs = require('fs');
	const startEnviron = require('startEnviron');
	//创建服务端
	const server = jayson.server({

  		googletranslator: function (args, callback) {
  			translate(args.data, args.option).then(res => {
   			callback(null, res.text);
  			}).catch(err => {
            callback(err);
        });
		},
		serverclose: function (args, callback) {
			listener.close();
			callback(null, "close");
		}
	});

	//启动服务端
	var listener = server.http().listen(startEnviron.port);
*/

//运行JS代码创建服务端
var node = nodeJs.exec(testjs);

//使用aardio调用node.js函数
import web.rpc.jsonClient;
import thread.command;
var listener = thread.command();
listener.rpcgoogletranslator = function(text, option){
    var jsonRpc = web.rpc.jsonClient("http://localhost:" + nodeJs.port);
	jsonRpc.rpc.varargs = false;
	var jsonData = jsonRpc.rpc.xcall("googletranslator", {data = text; option = option});
	jsonRpc.rpc.close()
	if( jsonData.result ){
		mainForm.richedit2.appendText(jsonData.result ++ '\r\n');
		return (jsonData.result ++ '\r\n');
	}
	else {
		mainForm.richedit2.appendText(jsonData.error.message ++ '\r\n');
		return (jsonData.error.message ++ '\r\n');
	}
};
listener.rpcserverclose = function(){
	var jsonRpc = web.rpc.jsonClient("http://localhost:" + nodeJs.port);
	jsonRpc.serverclose();
	jsonRpc.rpc.close();
}

/*
mainForm.richedit2.text = thread.invoke(

    function(hwnd, text, option){ 
    
        //必须在线程函数内部导入需要的库
        import thread.command;

        //调用界面线程的命令
        return thread.command.sendInvoke(hwnd, "rpcgoogletranslator", text, option);
        
        //也可以用post方法异步调用线程命令,不会等待调用完成
        //thread.command.post(hwnd, "rpcgoogletranslator", text, option);
        
    }, listener.hwnd, mainForm.richedit.text, google_par
);
*/

mainForm.button.oncommand = function(id,event){

    thread.invoke(
    function(hwnd, text, option){ 
    
        //必须在线程函数内部导入需要的库
        import thread.command;

        //调用界面线程的命令
        //thread.command.send(hwnd, "rpcgoogletranslator", text, option);
        
        //也可以用post方法异步调用线程命令,不会等待调用完成
        thread.command.post(hwnd, "rpcgoogletranslator", text, option);
        
    }, listener.hwnd, mainForm.richedit.text, google_par
	);

}

import win.clip.viewer;
viewer = win.clip.viewer(mainForm);
viewer.onDrawClipboard = function(){
	var str = win.clip.read();	
	mainForm.richedit.text = str;
};

mainForm.onClose = function(hwnd,message,wParam,lParam){
    mainForm.text = "正在等待关闭";
	var jsonRpc = web.rpc.jsonClient("http://localhost:" + nodeJs.port);
	jsonRpc.serverclose();
	jsonRpc.rpc.close();

}

mainForm.onExitSizeMove = function(){
    for(hwnd,ctrl in mainForm.eachControlEx("richedit") ){
    	mainForm.getCtrl(hwnd).wrap = false;
    	mainForm.getCtrl(hwnd).wrap = true;
    }
}

mainForm.show();
return win.loopMessage();