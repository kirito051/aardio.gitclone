/*
 *  puzzle.aau
 *  @author : hook
 *  @date   : 2015/9/30
 */
namespace web.layout.behavior.main.puzzle {

	var config = {	
		col = 4;
		row = 4;
		height = 0;
		width  = 0;
		opacity = 0.8;
		imgPath = null;
		maxWidth = 450;
		maxHeight = 360
	};
	var dx = 0;
	var dy = 0;	
	var xposList       = {};
	var yposList       = {};
	var puzzleList     = {};
	var randPuzzleList = {};
	var animateList    = {};
    var selectedItem   = null;      
    var targetItem     = null;  
    var selectedIndex  = 0;
    var selectedItemZIndex = 0;
    var targetIndexNew = 0;
    var targetIndexOld = 0;
    var isTargetIndexChanged = false;   
    var stepCount      = 0;     
    var timeCount      = 0;
    var puzzleTimer    = null;
    
	init = function(filePath) {
		
		dx             = 0;
		dy             = 0;
		xposList       = {};
		yposList       = {};
		puzzleList     = {};
		randPuzzleList = {};
		animateList    = {};
		selectedItem   = null;
		targetItem     = null;
		selectedIndex  = 0;
    	selectedItemZIndex = 0;
        targetIndexNew = 0;
        targetIndexOld = 0;
        isTargetIndexChanged = false;  
		stepCount      = 0;
		updateStepCount();
		
		if(puzzleTimer !== null) {
			..mainForm.killtimer(puzzleTimer);
			timeCount = 0;
		}
		updateTimeCount();
				
		import gdip;	
		import fsys;
		var img    = gdip.image(filePath);			
		var width  = img.width > config.maxWidth ? config.maxWidth : img.width;
		var height = img.height > config.maxHeight ? config.maxHeight : img.height;
			
		var bitmagNew = gdip.bitmap(width,height);
		var graphics  = bitmagNew.getGraphics();
		graphics.drawImageStretch(img,::RECT(0,0,width,height));				
		var path = fsys.getTempDir()+"~puzzle"+tonumber(..time.now())+".jpg";		
		bitmagNew.save(path);
		..wbLayout.getEle("thumbImg").src = path;	
					
		while(width % config.col != 0){
            width--;
        }
		while(height % config.row != 0){
            height--;
        }            
		config.width   = width;
		config.height  = height;
		config.imgPath = path;		
		var itemWidth  = config.width / config.col;
		var itemHeight = config.height / config.row;
		var itemCount  = config.col * config.row;
		
		for(i=1;itemCount;1) {
			..table.push(puzzleList,i);
		}	
		..math.randomize(..time.tick());
		var randList = ..table.clone(puzzleList);		
		for(i=#randList;2;-1) {		
			var index       = ..math.random(1,9999) % (i - 1) + 1;
			var t           = randList[i];
			randList[i]     = randList[index];
			randList[index] = t;	
		}
		
		var html = "";
		for(i=0;#randList-1;1) {
			var index  = i + 1;
			var pIndex = randList[index];
			var top  = ..math.floor(i / config.col) * itemHeight;
            var left = i % config.col * itemWidth;	
			var backgroundX = -((pIndex - 1) % config.col) * itemWidth;
            var backgroundY = -(..math.floor((pIndex -1) / config.col)) * itemHeight;
            var background  = "url(" + config.imgPath + ") " + backgroundX + "px " + backgroundY + "px " + "no-repeat";
			
			..table.push(xposList,left);
			..table.push(yposList,top);
			html += '<div puzzleIndex="'+pIndex+'" posIndex="'+index+'" style="width:'+itemWidth+'px;height:'+itemHeight+'px;background:'+background+';left:'+left+'px;top:'+top+'px;z-index:'+index+';"></div>'
		}
		..wbLayout.getEle("puzzleWrap").style.margin = (500-height)/2+"px auto";
		..wbLayout.getEle("puzzle").style.width = width;
		..wbLayout.getEle("puzzle").innerHTML = html;
		..wbLayout.commitUpdates();			
		puzzleTimer = ..mainForm.addtimer(1000,function(hwnd,msg,id,tick){
			timeCount++;
			..web.layout.behavior.main.puzzle.updateTimeCount();		
		});
		initAnimate();		
	}
	
	initAnimate = function() {
	
		var tick   = 10;//ms
		animateList = ..wbLayout.queryEles('#puzzle > div');
		..mainForm.setTimeout(doInitAnimate,tick);	
	}	
	
	doInitAnimate = function() {	
	
		if(#animateList <= 0) {			
			return;
		}
		var item = ..table.shift(animateList);
		item.style.opacity  = config.opacity;
		item.style.behavior = "~url(main.puzzle)";
		item.style.cursor   = "move";
		..mainForm.setTimeout(..web.layout.behavior.main.puzzle.doInitAnimate,10);			
	}
	
	finishAnimate = function() {
	
		var tick   = 10;//ms
		animateList = ..wbLayout.queryEles('#puzzle > div');
		..mainForm.setTimeout(doFinishAnimate,tick);	
	}
	
	doFinishAnimate = function() {	
	
		if(#animateList <= 0) {
			var finish = ..mainForm.loadForm("/form/finish.aau");
			finish.doModal(..mainForm.hwnd);
			return;
		}
		var item = ..table.shift(animateList);
		item.style.opacity  = 1;
		item.style.behavior = null;
		item.style.cursor   = "default";
		..mainForm.setTimeout(..web.layout.behavior.main.puzzle.doFinishAnimate,10);			
	}
	
	updateStepCount = function() {
	
		var txt = stepCount > 1000 ? "1000+" : stepCount;
		..wbLayout.getEle("stepCnt").innerHTML = txt;	
	}
	
	updateTimeCount = function() {
		
		var txt = "";
		if(timeCount < 60) {
			txt = timeCount+"秒";
		} elseif(timeCount < 3600) {		
			txt = ..math.floor(timeCount/60) + "分" + (timeCount%60==0?"鐘":timeCount%60+"秒");
		} else {
			txt = ..math.floor(timeCount/3600)+"小時+";
		}
		..wbLayout.getEle("timeCnt").innerHTML = txt;	
	}
	
	checkFinish = function() {
	
		var t = ..wbLayout.queryEles("#puzzle > div");
		for(i=1;#t;1) {
			if(t[i].puzzleIndex != t[i].posIndex) {
				return false;
			}
		}	
		finishAnimate();
		..mainForm.killtimer(puzzleTimer);	
		import fsys;
		fsys.delete(fsys.getTempDir()+"~puzzle*.jpg");	
		return true;
	}
	
	puzzleItemMove = function(moveItem,moveToIndex,func) {

		var moveToX = xposList[tonumber(moveToIndex)];
        var moveToY = yposList[tonumber(moveToIndex)]; 
        var xs,ys   = ..wbLayout.getEle("puzzleWrap").getPos();
        var tx,ty   = xs+moveToX,ys+moveToY;
        moveItem.setPos(tx,ty);
        moveItem.style["z-index"] = moveItem.posIndex;
        if(type(func) == type.function) {
            func();
        }          					
	}
	
	puzzleItemSwitch = function() {
		
		var sindex = selectedItem.posIndex;
		var tindex = targetItem.posIndex;		
		selectedItem.posIndex = tindex;
		targetItem.posIndex   = sindex;
		selectedItem.style["z-index"] = sindex;
		targetItem.style["z-index"]   = tindex;
		selectedItem = null; 
        targetItem   = null;
		stepCount++;
		updateStepCount();
		checkFinish();
	}
	
	getTargetItem = function(posIndex) {
	
		var t = ..wbLayout.querySelectorAll("#puzzle > div");
		for(i=1;#t) {
			if(t[i].posIndex == posIndex) {
				return t[i];
			}
		}			
		return null;
	}
	
	onMouseEnter = function( ltTarget,ltOwner,x,y,ltMouseParams ) {
		
		ltOwner.style.opacity = 1;
	}
	
	onMouseLeave = function( ltTarget,ltOwner,x,y,ltMouseParams ) {
		
		ltOwner.style.opacity = config.opacity;
	}
	
	onMouseDown = function( ltTarget,ltOwner,x,y,ltMouseParams ) {
		
		if (!selectedItem && ltMouseParams.button_state == 1/*_HL_MAIN_MOUSE_BUTTON*/){
            dx = x;
            dy = y;            
            ltOwner.capture  = true;            
            ltOwner.dragging = "true";       	     	 
        	selectedItemZIndex = ltOwner.style["z-index"];
        	ltOwner.style["z-index"] = 1000;
        	ltOwner.update(true);   
        	selectedItem  = ltOwner; 
        	selectedIndex = tonumber(ltOwner.posIndex);
        	targetIndexNew = selectedIndex;
        	targetIndexOld = selectedIndex;
       	}
	}
	
	onMouseUp = function( ltTarget,ltOwner,x,y,ltMouseParams ) {
		
		if (ltMouseParams.button_state === 1/*_HL_MAIN_MOUSE_BUTTON*/ && ltOwner.dragging ) {           	
           	if(selectedItem) {      
           		selectedItem.style["z-index"] = selectedItemZIndex;
           		if(targetIndexNew != selectedIndex){
           			puzzleItemMove(selectedItem,targetIndexNew,puzzleItemSwitch);
           		} else {
           			puzzleItemMove(selectedItem,selectedIndex);
           			selectedItem = null;
           			targetItem   = null;
           		}
           		ltOwner.capture  = false; 
            	ltOwner.dragging = null;
            	ltOwner.update(true);  
            	selectedItem = null; 
            	targetItem   = null;
           	}           	
       	}
	}
	
	onMouseMove = function(ltTarget, ltOwner, x, y, ltMouseParams) { 
        	
        if (ltMouseParams.button_state === 1/*_HL_MAIN_MOUSE_BUTTON*/ && ltOwner.dragging){        		
        	var x,y   = ltMouseParams.pos_document.x-dx,ltMouseParams.pos_document.y-dy;
            var xs,ys = ..wbLayout.getEle("puzzleWrap").getPos();
            var xe,ye = xs+(config.col-1)*(config.width/config.col),ys+(config.row-1)*(config.height/config.row);
            x = x < xs ? xs : (x > xe ? xe) : x;
            y = y < ys ? ys : (y > ye ? ye) : y;
            selectedItem.setPos(x,y);
            var xIndex     = ..math.round((x-xs)/(config.width/config.col))+1;
            var yIndex     = ..math.round((y-ys)/(config.height/config.row))+1;
            targetIndexNew = (yIndex-1)*config.col+xIndex;    
			if(targetIndexNew != targetIndexOld) {
				isTargetIndexChanged = true;
			}	
			if(isTargetIndexChanged) {
				if(targetIndexOld != selectedIndex) {						
					puzzleItemMove(targetItem,targetItem.posIndex);
				}					
				targetItem = getTargetItem(targetIndexNew);				
				if(targetIndexNew != selectedIndex) {							
					puzzleItemMove(targetItem, selectedIndex);					
				} 
				isTargetIndexChanged = false;
				targetIndexOld       = targetIndexNew;
			}              
        }
    }

}