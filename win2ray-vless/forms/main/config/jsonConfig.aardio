import fonts.fontAwesome;
import win.ui;
/*DSG{{*/
var winform = win.form(text="aardio form";right=912;bottom=793;bgcolor=16777215)
winform.add(
advancedConfig={cls="\forms\main\config\advancedConfig.aardio";left=9;top=29;right=902;bottom=739;bgcolor=16777215;db=1;dl=1;dr=1;dt=1;edge=1;z=10};
btnUpdate={cls="plus";text="更新服务器配置";left=687;top=753;right=856;bottom=784;align="left";bgcolor=11580047;db=1;dr=1;font=LOGFONT(h=-13);iconStyle={align="left";font=LOGFONT(h=-13;name='FontAwesome');padding={left=22}};iconText='\uF0C7';notify=1;textPadding={left=40};z=5};
editCoreConfig={cls="edit";left=9;top=29;right=902;bottom=739;db=1;dl=1;dr=1;dt=1;edge=1;hide=1;hscroll=1;multiline=1;vscroll=1;z=8};
editOutbounds={cls="edit";left=9;top=29;right=902;bottom=739;db=1;dl=1;dr=1;dt=1;edge=1;hscroll=1;multiline=1;vscroll=1;z=7};
lbTip={cls="static";text="可在下面输入JSON数组、或每行一个服务器链接、或每行以空格分开的服务器配置文本：";left=11;top=9;right=899;bottom=29;color=3947580;dl=1;dr=1;dt=1;font=LOGFONT(h=-13);transparent=1;z=6};
navAdvancedConfig={cls="plus";text="其他配置";left=315;top=750;right=389;bottom=782;border={top=1;color=-16744448};db=1;dl=1;z=9};
navCoreConfig={cls="plus";text="V2Ray配置 ( JSON )";left=184;top=750;right=315;bottom=782;border={top=1;color=-16744448};db=1;dl=1;z=2};
navOutbounds={cls="plus";text="服务器配置( JSON )";left=53;top=750;right=184;bottom=782;border={top=1;color=-16744448};db=1;dl=1;z=1};
navRight={cls="plus";left=390;top=750;right=680;bottom=751;bgcolor=16777215;border={color=-16744448};db=1;dl=1;dr=1;forecolor=32768;linearGradient=180;z=3};
plus={cls="plus";left=9;top=750;right=53;bottom=751;border={color=-16744448};db=1;dl=1;forecolor=32768;z=4}
)
/*}}*/

import config;
import web.json;
import win.ui.tabs;
var tbs = win.ui.tabs(winform.navOutbounds,winform.navCoreConfig,winform.navAdvancedConfig);
tbs.margin = 0;

tbs.skin({
	foreground={
		active=0xFFFFFFFF;
		default=0x00FFFFFF;
		hover=0xFFCCCCCC;
	};
	checked={
		foreground={ 
			default=0x00FFFFFF; 
		};
		border = { 
			default = {left=1;right=1;bottom=1;color=0xFF008000} 
		}; 
	}
});

tbs.onSelchange = function(idx,strip,form){
	if(idx==1){
		winform.editOutbounds.hide = false;
		winform.advancedConfig.hide = true;
		winform.editCoreConfig.hide = true;
		winform.lbTip.text = `可在下面输入JSON数组、或每行一个服务器链接、或每行以空格分开的服务器配置文本：`
		winform.btnUpdate.text = "更新服务器配置"
		winform.btnUpdate.hide = false;
	}
	elseif(idx==2) {
		winform.editOutbounds.hide = true;
		winform.advancedConfig.hide = true;
		winform.editCoreConfig.hide = false;
		winform.lbTip.text = `outbounds[1]会被自动替换为服务器数组，请勿修改： `
		winform.btnUpdate.text = "更新V2Ray配置 "
		winform.btnUpdate.hide = false;
	}	
	else {
		winform.editOutbounds.hide = true;
		winform.advancedConfig.hide = false;
		winform.editCoreConfig.hide = true;
		winform.lbTip.text = ``
		winform.btnUpdate.hide = true;
	}	
}
tbs.selIndex = 1;

import style;
winform.btnUpdate.skin(style.primaryButton);
winform.btnUpdate.oncommand = function(id,event){
	winform.btnUpdate.disabledText = {'\uF254';'\uF251';'\uF252';'\uF253';'\uF250'};

	if(tbs.selIndex==1){
		if(..string.match(winform.editOutbounds.text,"%\[\]")){
			var cfg,err = web.json.tryParse(winform.editOutbounds.text);
			if(!cfg){
				winform.editOutbounds.showErrorTip(,string.concat("JSON语法错误 ",err));
				winform.btnUpdate.disabledText = null;
				return;
			}
			
			if(cfg){
				cfg = ..table.map(cfg,function(outbound,k,result){
					if(outbound.aid){
						outbound.alterId = outbound.aid;
						outbound.aid = null;
						table.define(outbound);
					}
					
					if(outbound.add){
						outbound.address = outbound.add;
						outbound.add = null;
						table.define(outbound);
					}
			 
			 
			 		if(outbound.net){
						outbound.network = outbound.net;
						outbound.net = null;
						table.define(outbound);
					}
					
					if(outbound.peer && #outbound.peer){
						outbound.tlsServerName = outbound.peer;
						outbound.peer = null;
						table.define(outbound);
					}
					
					if(!outbound.security){
						if(outbound.method && outbound.method!="none"){
							outbound.security = outbound.method;
							outbound.method = null;
							table.define(outbound);
						}
					}
					
					return outbound; 
				})	
			}
			config.proxy.outbounds = cfg : ..table.array();
		}
		else {
			var outbounds = v2ray.config.importFromString(winform.editOutbounds.text);
			config.proxy.outbounds = outbounds : ..table.array(); 
			winform.editOutbounds.text = web.json.stringify(outbounds,true);
		}
		
		config.proxy.save();
		winform.editOutbounds.modified = false;
		publish("v2ray.core.reload",cfg)    	
	}
	elseif(tbs.selIndex==2) {
		var cfg,err = web.json.tryParse(winform.editCoreConfig.text);
		if(type(cfg)!==type.table){
			winform.editCoreConfig.showErrorTip(,string.concat("JSON语法错误 ",err));
			winform.btnUpdate.disabledText = null;
			return;
		}

		if(type(cfg.inbounds[[1]][["listen"]])!="string"){
			winform.msgErr(`inbounds[1].listen必须指定为监听IP或0.0.0.0`);
			winform.btnUpdate.disabledText = null;
			return; 
		}

		if(type(cfg.inbounds[[1]][["port"]])!="number"){
			winform.msgErr(`inbounds[1].port必须指定为监听端口或0`);
			winform.btnUpdate.disabledText = null;
			return; 
		}
		
		if(cfg.outbounds[[1]][["tag"]]!="proxy"){
			winform.msgErr(`outbounds[1]必须指定为{"tag":"proxy"}`);
			winform.btnUpdate.disabledText = null;
			return; 
		}
		
		config.core.default = cfg;
		config.core.save();
		publish("v2ray.core.reload",cfg)   
		publish("config.proxy.core.config.json.changed");
	} 

	win.delay(500);
	winform.btnUpdate.disabledText = null;
	winform.msgOk("配置已更新",1200);
}


import v2ray.config;
winform.editOutbounds.enablePopMenu(function(){
	if(tbs.selIndex==1){
		var strEditBounds = string.trim(winform.editOutbounds.text);
		var menu = {
			{ /*---分隔线---*/ };
			{ "自剪贴板批量导入 vmess、vless、trojan、trojan-go、ss 链接、或订阅源";
				function(id){ 
					
					var outbounds = v2ray.config.importFromClip();
					if(#outbounds){ 
						var json = strEditBounds;
						if( (!#json) || ..string.match(json,"%\[\]")){
							var cfg,err = ..table.array();
							if(#json){
								cfg,err= web.json.tryParse(strEditBounds);
								if(!cfg){
									winform.editOutbounds.showErrorTip(,string.concat("当前配置存在JSON语法错误 ",err));
									return;
								}	
							} 
							
							..table.append(cfg,outbounds);
							winform.editOutbounds.text = ..web.json.stringify(cfg,true);
						}
						else {
							var str = v2ray.config.exportToString(outbounds);
							if(#strEditBounds){
								winform.editOutbounds.text = strEditBounds+ '\r\n' + str;
							}
							else {
								winform.editOutbounds.text = str;
							} 
						}
						
						winform.msgOk("已成功导入" + #outbounds + "个服务器,请点击「更新设置」启用新配置。",1200);
						winform.editOutbounds.modified = true;
						winform.editOutbounds.setFocus();
						return; 
					}
		
					winform.msgFrown('未导入服务器！ \r\n请先复制以下格式服务器分享链接：\r\n\r\nvmess:// 链接\r\nvless:// 链接\r\nss:// 链接\r\ntrojan:// 链接\r\ntrojan-go:// 链接\r\nhttp:// 或 https:// 订阅源！')
				} 
			};  
		}
		
		if( (!#strEditBounds) || ..string.match(strEditBounds,"%\[\]")){
			menu[3] = { "更新订阅源";
				function(id){ 
					var cfg,err = ..table.array();
					
					var json = strEditBounds;
					if(#json){
						cfg,err = web.json.tryParse(strEditBounds);
						if(!cfg){
							winform.editOutbounds.showErrorTip(,string.concat("JSON语法错误 ",err));
							return;
						}
					}
					 
					var subscribeUrls = {}
					for(i=#cfg;1;-1){
						var outbound = cfg[i] 
						if(outbound.subscribeUrl){
							subscribeUrls[outbound.subscribeUrl] = true;	
						}
					}
					
					if(!table.count(subscribeUrls)){
						import win.clip;
						var clibStr = win.clip.read();
						if( ..string.startWith(clibStr,"http://") || ..string.startWith(clibStr,"https://")  ){
							subscribeUrls[clibStr] = true;
						}
						else {
							winform.msgWarn('当前配置不包含来自订阅源的服务器,\n请先复制订阅源网址到剪贴板!');
							return;
						} 
					}
					 
					var count = 0;
					for(url,v in subscribeUrls){ 
						var outbounds = v2ray.config.importFromString(url);
						if(#outbounds){
							for(i=#cfg;1;-1){
								var outbound = cfg[i] 
								if(outbound.subscribeUrl==url){
									..table.remove(	cfg,i );
								}
							}
							
							count = count + #outbounds;
							..table.append(cfg,outbounds);
						}
					}
					
					winform.editOutbounds.text = ..web.json.stringify(cfg,true);
						
					winform.msgOk("已成功刷新" + count + "个服务器,请点击「更新设置」启用新配置。",1200);
					winform.editOutbounds.modified = true;
					winform.editOutbounds.setFocus();
					return;   
				} 
			};
		}
		
		if(..string.match(strEditBounds,"%\[\]")){	
			menu[4] = {}	
			menu[5] = { "转换为 vmess、vless、trojan、trojan-go、ss 分享链接";
				function(id){ 
					var cfg,err = web.json.tryParse(strEditBounds);
					if(!cfg){
						winform.editOutbounds.showErrorTip(,string.concat("JSON语法错误 ",err));
						return;
					}
		
					var str = v2ray.config.exportToString(cfg);
					if(str){ 
						winform.editOutbounds.text = str;
						winform.editOutbounds.modified = true;
					} 
				} 
			}; 
			menu[6] = { "转换为 Base64 订阅源";
				function(id){ 
					var cfg,err = web.json.tryParse(strEditBounds);
					if(!cfg){
						winform.editOutbounds.showErrorTip(,string.concat("JSON语法错误 ",err));
						return;
					}
		
					var str = v2ray.config.exportToString(cfg);
					if(str){ 
						import crypt;
						winform.editOutbounds.text = ..crypt.encodeBin(str);
						winform.editOutbounds.modified = true;
					} 
				} 
			}; 
			menu[7] = { "转换为文本格式";
				function(id){ 
					var cfg,err = web.json.tryParse(strEditBounds);
					if(!cfg){
						winform.editOutbounds.showErrorTip(,string.concat("JSON语法错误 ",err));
						return;
					}
		
					var outstr = {};
					for i,outbound in table.eachIndex(cfg){
						if(outbound.protocol != "shadowsocks"){
							var path = outbound.path;
							if( outbound.host){
								path = ( (#outbound.type && outbound.type!="none") ? outbound.type : outbound.network : "")  
									+ "://" + outbound.host ++ path;
							}
							
							table.push(outstr, string.concat( outbound.address,'\t'
								,outbound.port,'\t'
								,outbound.id,,'\t'
								,outbound.network,'\t'
								,path,'\t'
								,outbound.tls ) );
						}
						else {
							table.push(outstr, string.concat( outbound.address,'\t'
								,outbound.port,'\t'
								,outbound.id,,'\t'
								,'shadowsocks\t'
								,outbound.security) ); 
						}
					}
					
					winform.editOutbounds.text = string.join(outstr,'\r\n');
					winform.editOutbounds.modified = true;
				} 
			}; 
		}
		elseif( #strEditBounds ) {
			menu[3] = {}
			
			menu[4] = { "转换为 JSON";
				function(id){
					import web.json;
					var outbounds = v2ray.config.importFromString(strEditBounds);
					if(outbounds){ 
						winform.editOutbounds.text = web.json.stringify(outbounds,true);
						winform.editOutbounds.modified = true;
					} 
				} 
			}; 
		} 
		
		table.push(menu,{ /*---分隔线---*/ });
		table.push(menu,{ "另存为 json 文件";
			function(id){
				import fsys.dlg;
				var path = fsys.dlg.save("*.json|*.json||","另存为 json 文件",,winform)
				if(path){
					var str = web.json.stringify( 
						config.proxy.outbounds,true
					)
					
					string.save(path,str )
				}
			} 
		}); 
		
		table.push(menu,{ "打开 json 文件";
			function(id){
				import fsys.dlg;
				var path = fsys.dlg.open("*.json|*.json||","打开 json 文件",,winform)
				if(path){
					winform.editOutbounds.text = string.load(path);
					winform.editOutbounds.modified = true;
				}
			} 
		}); 
				
		table.push(menu,{ /*---分隔线---*/ });
		if(winform.editOutbounds.modified){
			table.push(menu,{ "恢复为当前服务器配置(JSON)";
				function(id){
					winform.editOutbounds.text = web.json.stringify( 
						config.proxy.outbounds,true
					)
					winform.editOutbounds.modified = false;
				} 
			}); 
		}
		
		table.push(menu,{ "恢复为默认服务器配置(JSON)";
			function(id){
				..config.__loadDefaultOutbounds();
				publish("v2ray.core.reload",cfg);
			} 
		}); 
		
		return menu;
	}
})

subscribe("outbounds.updateConfigJson",function(){
	if(winform.editOutbounds.modified){
		return;
	}
	
	winform.editOutbounds.text = web.json.stringify( 
		config.proxy.outbounds,true
	)
	
	winform.editOutbounds.modified = false;
} )

winform.editOutbounds.text = #config.proxy.outbounds ? web.json.stringify( 
		config.proxy.outbounds ,true
) : "[]"
winform.editOutbounds.modified = false;

subscribe("v2rayCore.updateConfigJson",function(){
	if(winform.editCoreConfig.modified){
		return;
	}
	
	winform.editCoreConfig.text = web.json.stringify( 
		config.core.default,true
	)
	
	winform.editCoreConfig.modified = false;
} )
winform.editCoreConfig.text = web.json.stringify( 
	config.core.default,true
)

var editOutboundsTip = {
	address = {"代理服务器地址";"值可以是域名或者IP地址"};
	alterId = {"额外ID";"仅用于VMESS协议，与服务器一致即可"};
	aid = {"额外ID(alterId)";"数值,仅用于VMESS协议，与服务器一致即可"};
	network = {"传输协议(network)";"可选值为tcp,ws等"};
	net = {"传输协议(network)";"可选值为tcp,ws等"};
	type = {"伪装类型";"可选值为none,http等"}; 
	ps = {"备注";"备注"}; 
	tls = {"是否启用TLS";"可选值为tls,xtls或空值,vless协议省略时默认值为tls"}; 
	path = {"请求路径";"用于ws,http等协议指定请求路径"}; 
	id = {"密码";"服务器密码"}; 
	host = {"主机名";"用于指定http,ws等协议请求头中的主机名"}; 
	protocol = {"协议";"可选值为 vmess,vless,shadowsocks,trojan,trojan-go 之一"}; 
	port = {"端口";"服务器端口,数值"}; 
	security = {"加密方式";"可省略,vmess协议默认为auto,vless协议默认为none"};
	tlsServerName = {"TLS服务器名";"TLS客户端请求中的服务器名字段"}; 
}

winform.editOutbounds.wndproc = function(hwnd,message,wParam,lParam){
	if(message == 0x202/*_WM_LBUTTONUP*/){
		var lineIndex = winform.editOutbounds.lineFromChar();
		if(lineIndex == winform.editOutbounds.preLineIndex){
			return; 
		}
		winform.editOutbounds.preLineIndex = lineIndex;
		
		var line = winform.editOutbounds.lineText();
		var n,v = string.match(line,`^\s*\"(\w+)\"\s*\:\s*(%"")[\,\s]*$`); 
		if( !n ) n,v = string.match(line,`^\s*\"(\w+)\"\s*\:\s*(\d+)[\,\s]*$`);
		
		if(editOutboundsTip[n]){
			winform.editOutbounds.showInfoTip(editOutboundsTip[n][1],editOutboundsTip[n][2])
		}
	} 
}


winform.enableDpiScaling();
winform.show();
win.loopMessage();
return winform;