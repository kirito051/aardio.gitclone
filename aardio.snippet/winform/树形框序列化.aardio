// @Author  : popy32
// @Contact : 74o5o27o8#qq.com
// @File    : treeview2text.aardio
// @Comment : 树形框的序列化和反序列化

import win.ui;
/*DSG{{*/
var winform = win.form(text="树形框的序列化";right=759;bottom=469)
winform.add(
button={cls="button";text="添加项目";left=336;top=8;right=464;bottom=48;z=2};
button2={cls="button";text="序列化";left=336;top=56;right=464;bottom=96;z=3};
button3={cls="button";text="反序列化";left=480;top=56;right=608;bottom=96;z=4};
button4={cls="button";text="清空树形框";left=480;top=8;right=608;bottom=48;z=6};
edit={cls="edit";left=336;top=104;right=752;bottom=464;autohscroll=false;edge=1;multiline=1;z=5};
static={cls="static";text="使用说明";left=624;top=24;right=744;bottom=64;center=1;font=LOGFONT(h=-16);notify=1;transparent=1;z=7};
treeview={cls="treeview";left=8;top=8;right=320;bottom=464;asel=false;bgcolor=15793151;edge=1;z=1}
)
/*}}*/

import win.ui.tooltip; 
tooltipCtrl = win.ui.tooltip( winform );
tooltipCtrl.addTool(winform.static, "树形框添加项目后，序列化结果输出到文本框，清空树形框，反序列化还原树形框内容");

winform.treeview.onnotify = function(id,code,ptr){
    if(code = 0xFFFFFFFB/*_NM_RCLICK*/){ //鼠标右键单击
        var hItem,tvht = winform.treeview.hitTest();
        winform.treeview.setSelected(hItem);
        var menu = win.ui.popmenu(winform)
        menu.add("删除",
            function(){ 
                winform.treeview.delItem(hItem)
            }
        )
        menu.popup(x,y,true);
    }
}

winform.button.oncommand = function(id,event){
    // 添加数据 开始
    {
        var hitem1 = winform.treeview.insertItem( text="1" );
        var hitem2 = winform.treeview.insertItem( text="2" );
        var hitem3 = winform.treeview.insertItem( { text="1.1" }, hitem1/*父节点*/);
        
        var hitem4 = winform.treeview.insertItem( { 
                text = "1.1.1"; 
                children = { 
                    { text = "1.1.1.1"  };
                    { text = "1.1.1.2" };
                }
        }, hitem3 ) 
        
        hitem5 = winform.treeview.insertItem( { 
                text = "2.1"; 
                children = { 
                    { text = "2.1.1"  };
                    { text = "2.1.2" };
                }
        } , hitem2 ) 
        
        hitem6 = winform.treeview.insertItem( { 
                text = "1.2"; 
                children = { 
                    { text = "1.2.1"  };
                    { text = "1.2.2" };
                }
        } , hitem1) 
        
        hitem7 = winform.treeview.insertItem( { 
                text = "2.2"; 
                children = { 
                    { text = "2.2.1"  };
                    { text = "2.2.2" };
                }
        } , hitem2 )
    }
// 添加数据 结束
}

winform.button4.oncommand = function(id,event){
    // 清空重绘
    winform.treeview.clear();
    // 重绘
    winform.treeview.redraw();
}

TreeviewSerialization = function(){
    var q = table.array();
    var level = table.array();
    var all = table.array();
    var last;
    var nlast;
    var pRoot = winform.treeview.getRoot();
    if(pRoot) {
        last = pRoot;
        ..table.push(q, pRoot);
    } else {
        return;
    }
    var front;
    if(#q > 0) {
        do {
            front = ..table.shift(q);
            if (front == null) {
                break;
            }
            var pNodeNow = front;
            if not(pNodeNow) {
                break;
            }
            var NodeData = winform.treeview.getItemData(pNodeNow);
            var NodeText = NodeData[["text"]] : "";
            var NodeParent = winform.treeview.getParentItem(pNodeNow);
            var t1 = {}
            ..table.push(t1, NodeData[["text"]] : "");
            ..table.push(t1, (pNodeNow != null) ? tonumber(pNodeNow) : 0 );
            ..table.push(t1, (NodeParent != null) ? tonumber(NodeParent) : 0  );
            
            ..table.push(level, t1);
            var pChildFirst = winform.treeview.getChildItem(front);
            var pChildNodeNow = pChildFirst;
            while(pChildNodeNow != null){
                ..table.push(q, pChildNodeNow);
                nlast = pChildNodeNow;
                pChildNodeNow = winform.treeview.getNextSibling(pChildNodeNow);
            }
            if(front == last) {
                ..table.push(all, level);
                level = {};
                last = nlast;
            }
        }
        while(front != null);
    }
    if(#all) {
        winform.edit.text = ..table.tostring(all);
    }
}

TreeviewDeSerialization = function(){
    var jt = winform.edit.text;
    var t;
    if(#jt) {
        try{
            t = eval(jt);
        }
        if(not t) {
            win.msgboxErr("table解析错误");
            return;
        }
    }
    var lastLine = {};
    var nowLine = {};
    for(i=1;#t;1){
        //跳过根节点
        if(i == 1) {
            continue;
        }
        var eachLine = t[i];
        for(j=1;#eachLine;1){
            // {文本内容; 节点地址; 父元素节点地址}
            var eachItem = eachLine[j];
            var text = eachItem[[1]];
            var current = tostring(eachItem[[2]]);
            var parent = tostring(eachItem[[3]]);
            var hitem = winform.treeview.insertItem( text, lastLine[[parent]] );
            nowLine[[current]] = hitem;
        }
        lastLine = nowLine;
        nowLine = {};
    }
}

//序列化
winform.button2.oncommand = function(id,event){
    winform.edit.text = "";
    TreeviewSerialization();
}

//反序列化
winform.button3.oncommand = function(id,event){
    winform.treeview.clear();
    TreeviewDeSerialization();
    winform.treeview.redraw();
}

winform.button.oncommand();

winform.show();
win.loopMessage();