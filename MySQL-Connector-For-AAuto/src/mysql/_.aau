/*
MariaDB Client Library for C:
https://kb.askmonty.org/en/mariadb-client-library-for-c/
*/
mysql = class {
	ctor (host, username, passwd, dbname, port, socket, flags) {
		var h = mysql_init();
		if (!h) return;
		
		if (host !== null || username !== null || passwd !== null || dbname !== null || port !== null || socket !== null || flags !== null) {
			host := "localhost";
			username := "root";
			port := 3306;
			flags := 0;
			this.handle = mysql_real_connect(h, host, username, passwd, dbname, port, socket, flags);
			if (!this.handle) return null, mysql_error(h);
		}
		
		..table.add_gc(this, "close");
	} 
	
	autocommit = function (b) {
		if (this[["handle"]]) {
			return mysql_autocommit(this.handle, !!b);
		}
	}
	
	change_user = function (user = "", password = "", database = "") {
		if (this[["handle"]]) {
			return mysql_change_user(this.handle, user, password, database);
		}
	}
	
	character_set_name = function () {
		if (this[["handle"]]) {
			return mysql_character_set_name(this.handle);
		} else {
			return "";
		}
	}
	
	close = function () {
		if (this[["handle"]]) {
			mysql_close(this.handle);
			this.handle = null;
		}
	}
	
	commit = function () {
		if (this[["handle"]]) {
			return !!mysql_commit(this.handle);
		} else {
			return false;
		}
	}
	
	debug = function (message = "") {
		mysql_debug(tostring(message));
	}
	
	dump_debug_info = function () {
		if (this[["handle"]]) {
			return mysql_dump_debug_info(this.handle);
		} else {
			return 0;
		}
	}
	
	get_charset = function () {
		if (this[["handle"]]) {
			return mysql_character_set_name(this.handle);
		} else {
			return "";
		}
	}
	
	get_client_info = function () {
		return mysql_get_client_info();
	}
	
	get_client_version = function () {
		return mysql_get_client_version();
	}
	
	get_errno = function () {
		if (h) {
			return mysql_errno(h);
		} else {
			return 0;
		}
	}
	
	get_error = function () {
		if (h) {
			return mysql_error(h);
		} else {
			return "";
		}
	}
	
	get_host_info = function () {
		if (this[["handle"]]) {
			return mysql_get_host_info(this.handle);
		} else {
			return "";
		}
	}
	
	get_proto_info = function () {
		if (this[["handle"]]) {
			return mysql_get_proto_info(this.handle);
		} else {
			return 0;
		}
	}
	
	get_server_info = function () {
		if (this[["handle"]]) {
			return mysql_get_server_info(this.handle);
		} else {
			return "";
		}
	}
	
	get_server_version = function () {
		if (this[["handle"]]) {
			return mysql_get_server_version();
		} else {
			return 0;
		}
	}
	
	get_info = function () {
		if (this[["handle"]]) {
			return mysql_info(this.handle);
		} else {
			return "";
		}
	}
	
	get_insert_id = function () {
		if (this[["handle"]]) {
			return mysql_insert_id(this.handle);
		} else {
			return 0;
		}
	}
	
	kill = function (processid = 0) {
		if (this[["handle"]]) {
			return !!mysql_kill(this.handle, tonumber(processid));
		} else {
			return false;
		}
	}
	
	more_results = function () {
		if (this[["handle"]]) {
			return !!mysql_more_results(this.handle);
		} else {
			return false;
		}
	}
	
	next_result = function () {
		if (this[["handle"]]) {
			return mysql_next_result(this.handle);
		} else {
			return 0;
		}
	}
	
	options = function (name, value) {
		return mysql_options(h, name, value);
	}
	
	options_char = function (name, value) {
		return mysql_options_char(h, name, value);
	}
	
	options_int = function (name, value) {
		return mysql_options_int(h, name, value);
	}
	
	ping = function () {
		if (this[["handle"]]) {
			return !!mysql_ping(this.handle);
		} else {
			return false;
		}
	}
	
	query = function (query = "") {
		if (this[["handle"]]) {
			if (mysql_query(this.handle, tostring(query)) == 0) {
				if (..string.startWith(query, "SELECT", true) || ..string.startWith(query, "SHOW", true)) {
					return result(mysql_store_result(this.handle));
				} else {
					return true;
				}
			} else {
				return false;
			}
		} else {
			return false;
		}
	}
	
	real_connect = function (host = "localhost", username = "root", passwd, dbname, port = 3306, socket, flags = 0) {
		this.close();
		if (handle) {
			h = mysql_init();
			if (!h) return false, this.get_error();
			this.handle = mysql_real_connect(h, host, username, passwd, dbname, port, socket, flags);
			if (this.handle)
				return true;
		}
		return false;
	}
	
	escape_string = function (escapestr = "") {
		if (h) {
			var re, str = mysql_real_escape_string(h, 1024, escapestr, #escapestr);
			return ..string.str(str);
		}
	}
	
	/*ºÊ»›mysqli{{*/
	real_escape_string = this.escape_string;
	/*}}*/
	
	real_query = function (query = "") {
		if (this[["handle"]]) {
			query = tostring(query);
			return result(mysql_real_query(this.handle, query, #query));
		}
	}
	
	rollback = function () {
		if (this[["handle"]]) {
			return !!mysql_rollback(this.handle);
		} else {
			return false;
		}
	}
	
	select_db = function (dbname = "") {
		if (this[["handle"]]) {
			return mysql_select_db(this.handle, tostring(dbname)) == 0;
		} else {
			return false;
		}
	}
	
	set_charset = function (charset = "") {
		if (this[["handle"]]) {
			return !!mysql_set_character_set(this.handle, tostring(charset));
		} else {
			return false;
		}
	}
	
	get_sqlstate = function () {
		if (this[["handle"]]) {
			return mysql_sqlstate(this.handle);
		} else {
			return "";
		}
	}
	
	ssl_set = function (key = "" , cert = "", ca = "", capath = "", cipher = "") {
		if (this[["handle"]]) {
			return !!mysql_ssl_set(this.handle, tostring(key), tostring(cert), tostring(ca), tostring(capath), tostring(cipher));
		} else {
			return false;
		}
	}
	
	stat = function () {
		if (this[["handle"]]) {
			return mysql_stat(this.handle);
		} else {
			return "";
		}
	}
	
	store_result = function () {
		if (this[["handle"]]) {
			return result(mysql_store_result(this.handle));
		}
	}
	
	get_thread_id = function () {
		if (this[["handle"]]) {
			return mysql_thread_id(this.handle);
		} else {
			return 0;
		}
	}
	
	thread_safe = function () {
		return !!mysql_thread_safe();
	}
	
	use_result = function () {
		if (this[["handle"]]) {
			return result(mysql_use_result(this.handle));
		}
	}
	
	get_warning_count = function () {
		if (this[["handle"]]) {
			return mysql_warning_count(this.handle);
		} else {
			return 0;
		}
	}
	
	list_dbs = function () {
		if (this[["handle"]]) {
			return result(mysql_list_dbs(this.handle));
		}
	}
	
	list_tables = function () {
		if (this[["handle"]]) {
			return result(mysql_list_tables(this.handle));
		}
	}
	
	@ {
		_get = function (k) {
			select (k) {
				case "affected_rows" {
					if (owner[["handle"]]) {
						return mysql_affected_rows(owner.handle);
					} else {
						return 0;
					}
				}
				case "client_info" {
					return owner.get_client_info();
				}
				case "client_version" {
					return owner.get_client_version();
				}
				case "errno" {
					return owner.get_errno();
				}
				case "error" {
					return owner.get_error();
				}
				case "host_info" {
					return owner.get_host_info();
				}
				case "proto_info" {
					return owner.get_proto_info();
				}
				case "server_info" {
					return owner.get_server_info();
				}
				case "server_version" {
					return owner.get_server_version();
				}
				case "info" {
					return owner.get_info();
				}
				case "insert_id" {
					return owner.get_insert_id();
				}
				case "sqlstate" {
					return owner.get_sqlstate();
				}
				case "thread_id" {
					return owner.get_thread_id();
				}
				case "warning_count" {
					return owner.get_warning_count();
				}
			}
		}
	}
}

namespace mysql {
	Libmysql = ..raw.loadDll($"~/lib/mysql/.res/libmariadb.dll");
	mysql_thread_init = Libmysql.api("mysql_thread_init", "int()");
	mysql_thread_end = Libmysql.api("mysql_thread_end", "void()");
	
	mysql_num_rows = Libmysql.api("mysql_num_rows", "INT(pointer res)");
	mysql_num_fields = Libmysql.api("mysql_num_fields", "INT(pointer res)");
	mysql_eof = Libmysql.api("mysql_eof", "int(pointer res)");
	mysql_fetch_field_direct = Libmysql.api("mysql_fetch_field_direct", "pointer(pointer res, INT fieldnr)");
	mysql_fetch_fields = Libmysql.api("mysql_fetch_fields", "pointer(pointer res)");
	mysql_row_tell = Libmysql.api("mysql_row_tell", "INT(pointer res)");
	mysql_field_tell = Libmysql.api("mysql_field_tell", "INT(pointer res)");
	
	mysql_field_count = Libmysql.api("mysql_field_count", "INT(pointer mysql)");
	mysql_affected_rows = Libmysql.api("mysql_affected_rows", "INT(pointer mysql)");
	mysql_insert_id = Libmysql.api("mysql_insert_id", "INT(pointer mysql)");
	mysql_errno = Libmysql.api("mysql_errno", "INT(pointer mysql)");
	mysql_error = Libmysql.api("mysql_error", "string(pointer mysql)");
	mysql_sqlstate = Libmysql.api("mysql_sqlstate", "string(pointer mysql)");
	mysql_warning_count = Libmysql.api("mysql_warning_count", "INT(pointer mysql)");
	mysql_info = Libmysql.api("mysql_info", "string(pointer mysql)");
	mysql_thread_id = Libmysql.api("mysql_thread_id", "INT(pointer mysql)");
	mysql_character_set_name = Libmysql.api("mysql_character_set_name", "string(pointer mysql)");
	mysql_set_character_set = Libmysql.api("mysql_set_character_set", "int(pointer mysql, string csname)");
	
	mysql_init = Libmysql.api("mysql_init", "pointer(pointer mysql)");
	mysql_ssl_set = Libmysql.api("mysql_ssl_set", "int(pointer mysql, string key, string cert, string ca, string capath, string cipher)");
	mysql_get_ssl_cipher = Libmysql.api("mysql_get_ssl_cipher", "string(pointer mysql)");
	mysql_change_user = Libmysql.api("mysql_change_user", "int(pointer mysql, string user, string passwd, string db)");
	mysql_real_connect = Libmysql.api("mysql_real_connect", "pointer(pointer mysql, string host, string user, string passwd, string db, INT port, string unix_socket, INT clientflag)");
	mysql_select_db = Libmysql.api("mysql_select_db", "int(pointer mysql, string db)");
	mysql_query = Libmysql.api("mysql_query", "int(pointer mysql, string q)");
	mysql_send_query = Libmysql.api("mysql_send_query", "int(pointer mysql, string q, INT length)");
	mysql_real_query = Libmysql.api("mysql_real_query", "int(pointer mysql, string q, INT length)");
	mysql_store_result = Libmysql.api("mysql_store_result", "pointer(pointer mysql)");
	mysql_use_result = Libmysql.api("mysql_use_result", "pointer(pointer mysql)");
	
	mysql_shutdown = Libmysql.api("mysql_shutdown", "int(pointer mysql, int shutdown_level)");
	mysql_dump_debug_info = Libmysql.api("mysql_dump_debug_info", "int(pointer mysql)");
	mysql_refresh = Libmysql.api("mysql_refresh", "int(pointer mysql, INT refresh_options)");
	mysql_kill = Libmysql.api("mysql_kill", "int(pointer mysql, INT pid)");
	mysql_ping = Libmysql.api("mysql_ping", "int(pointer mysql)");
	mysql_stat = Libmysql.api("mysql_stat", "string(pointer mysql)");
	mysql_get_server_info = Libmysql.api("mysql_get_server_info", "string(pointer mysql)");
	mysql_get_client_info = Libmysql.api("mysql_get_client_info", "string()");
	mysql_get_client_version = Libmysql.api("mysql_get_client_version", "INT()");
	mysql_get_host_info = Libmysql.api("mysql_get_host_info", "string(pointer mysql)");
	mysql_get_server_version = Libmysql.api("mysql_get_server_version", "INT(pointer mysql)");
	mysql_get_proto_info = Libmysql.api("mysql_get_proto_info", "INT(pointer mysql)");
	mysql_list_dbs = Libmysql.api("mysql_list_dbs", "pointer(pointer mysql, string wild)");
	mysql_list_tables = Libmysql.api("mysql_list_tables", "pointer(pointer mysql, string wild)");
	mysql_list_processes = Libmysql.api("mysql_list_processes", "pointer(pointer mysql)");
	mysql_options = Libmysql.api("mysql_options", "int(pointer mysql, int option, pointer arg)");
	mysql_options_char = Libmysql.api("mysql_options", "int(pointer mysql, int option, byte& arg)");
	mysql_options_int = Libmysql.api("mysql_options", "int(pointer mysql, int option, int& arg)");
	mysql_free_result = Libmysql.api("mysql_free_result", "void(pointer result)");
	mysql_data_seek = Libmysql.api("mysql_data_seek", "void(pointer result, INT offset)");
	mysql_row_seek = Libmysql.api("mysql_row_seek", "INT(pointer result, INT offset)");
	mysql_field_seek = Libmysql.api("mysql_field_seek", "INT(pointer result, INT offset)");
	mysql_fetch_row = Libmysql.api("mysql_fetch_row", "pointer(pointer result)");
	mysql_fetch_lengths = Libmysql.api("mysql_fetch_lengths", "INT(pointer result)");
	mysql_fetch_field = Libmysql.api("mysql_fetch_field", "pointer(pointer result)");
	mysql_list_fields = Libmysql.api("mysql_list_fields", "pointer(pointer mysql, string table, string wild)");
	mysql_escape_string = Libmysql.api("mysql_escape_string", "INT(string& to, string from, INT from_length)");
	mysql_hex_string = Libmysql.api("mysql_hex_string", "INT(string& to, string from, INT from_length)");
	mysql_real_escape_string = Libmysql.api("mysql_real_escape_string", "INT(pointer mysql, string& to, string from, INT length)");
	mysql_debug = Libmysql.api("mysql_debug", "void(string debug)");
	myodbc_remove_escape = Libmysql.api("myodbc_remove_escape", "void(pointer mysql, string name)");
	mysql_thread_safe = Libmysql.api("mysql_thread_safe", "INT()");
	// mysql_embedded = Libmysql.api("mysql_embedded", "int()");
	mysql_read_query_result = Libmysql.api("mysql_read_query_result", "int(pointer mysql)");
	
	mysql_commit = Libmysql.api("mysql_commit", "int(pointer mysql)");
	mysql_rollback = Libmysql.api("mysql_rollback", "int(pointer mysql)");
	mysql_autocommit = Libmysql.api("mysql_autocommit", "int(pointer mysql, bool auto_mode)");
	mysql_more_results = Libmysql.api("mysql_more_results", "int(pointer mysql)");
	mysql_next_result = Libmysql.api("mysql_next_result", "int(pointer mysql)");
	mysql_close = Libmysql.api("mysql_close", "void(pointer sock)");
	
	mysql_server_end = Libmysql.api("mysql_server_end", "void()");
	
	mysql_stmt_init = Libmysql.api("mysql_stmt_init", "void()");
	
	st_mysql_field = class {
		string name;		/* Name of column */
		string org_name;	/* Original column name, if an alias */
		string table;		/* Table of column if column was a field */
		string org_table;	/* Org table name if table was an alias */
		string db;			/* Database for table */
		string catalog;		/* Catalog for table */
		string default;		/* Default value (set by mysql_list_fields) */
		INT length;			/* Width of column */
		INT max_length;		/* Max width of selected set */
		INT name_length;
		INT org_name_length;
		INT table_length;
		INT org_table_length;
		INT db_length;
		INT catalog_length;
		INT def_length;
		INT flag;			/* Div flags */
		INT decimals;		/* Number of decimals in field */
		INT charsetnr;		/* Character set */
		int field_type;		/* Type of field. Se mysql_com.h for types */
		pointer extension;
	}
}

namespace mysql {
	handle = mysql_init();
	if ( ! handle) error("º”‘ÿ mysql ø‚ ß∞‹!");
	
	_gc = ..gcdata(
		_gc = function () {
			mysql_close(handle);
			mysql_server_end();
		}
	);
	
	escape_string = function (escapestr = "") {
		var re, str = mysql_real_escape_string(handle, 1024, escapestr, #escapestr);
		return ..string.str(str);
	}
}

namespace mysql {
	result = class {
		ctor (handle) {
			this.handle = handle;
			if (!this[["handle"]]) {
				return false;
			}
			..table.add_gc(this,"free"); 
		}
		
		get_current_field = function () {
			if (this[["handle"]]) {
				return ..mysql.mysql_field_tell(this.handle);
			} else {
				return 0;
			}
		}
		
		data_seek = function (offset = 0) {
			if (this[["handle"]]) {
				..mysql.mysql_data_seek(this.handle, tonumber(offset));
			}
		}
		
		fetch_array = function () {
			if (this[["handle"]]) {
				var fields = this.fetch_fields();
				var ret = this.fetch_row();
				if (!ret) return;
				for (i = 1; #fields) {
					var field = fields[i];
					ret[field.name] = ret[i];
				}
				return ret;
			}
		}
		
		fetch_field_direct = function (fieldnr = 0) {
			if (this[["handle"]]) {
				var p = ..mysql.mysql_fetch_field_direct(this.handle, tonumber(fieldnr));
				if (p) {
					var ret = ..mysql.st_mysql_field();
					..raw.convert(p, ret);
					return ret;
				}
			}
		}
		
		fetch_field = function () {
			if (this[["handle"]]) {
				var p = ..mysql.mysql_fetch_field(this.handle);
				if (p) {
					var ret = ..mysql.st_mysql_field();
					..raw.convert(p, ret);
					return ret;
				}
			}
		}
		
		fetch_fields = function () {
			if (this[["handle"]]) {
				var p = ..mysql.mysql_fetch_fields(this.handle);
				if (p) {
					var field_count = this.field_count;
					var ret = {};
					for (i = 1; field_count) {
						var field = ..mysql.st_mysql_field();
						..raw.convert(p, field);
						ret[i] = field;
						p = topointer(tonumber(p) + ..raw.sizeof(field));
					}
					return ret;
				}
			}
		}
		
		fetch_object = function () {
			if (this[["handle"]]) {
				var fields = this.fetch_fields();
				var row = this.fetch_row();
				if ( ! row) return;
				var ret = {};
				for (i = 1; #fields) {
					var field = fields[i];
					ret[field.name] = row[i];
				}
				return ret;
			}
		}
		
		fetch_row = function () {
			if (this[["handle"]]) {
				var p = ..mysql.mysql_fetch_row(this.handle);
				if (p) {
					var field_count = this.field_count;
					var ret = {
						_struct = "string a[" + field_count + "]";
					};
					..raw.convert(p, ret);
					return ret.a;
				}
			}
		}
		
		get_field_count = function () {
			if (this[["handle"]]) {
				return ..mysql.mysql_num_fields(this.handle);
			} else {
				return 0;
			}
		}
		
		get_num_rows = function () {
            if (this[["handle"]]) {
                return ..mysql.mysql_num_rows(this.handle);
            } else {
                return 0;
            }
        }
		
		field_seek = function (fieldnr = 0) {
			if (this[["handle"]]) {
				return ..mysql.mysql_field_seek(this.handle, tonumber(fieldnr));
			} else {
				return 0;
			}
		}
		
		free = function () {
			if (this[["handle"]]) {
				..mysql.mysql_free_result(this.handle);
				this.handle = null;
			}
		}
		
		@ {
			_get = function (k) {
				select (k) {
					case "field_count" {
						return owner.get_field_count();
					}
					case "current_field" {
						return owner.get_current_field();
					}
				}
			}
		}
	}
}

/*intellisense()
mysql = MySQL
mysql() = MySQL¿‡
!mysql_l.autocommit(.( «∑Ò◊‘∂ØÃ·Ωª) =  «∑Ò‘⁄÷¥––ÕÍ“ª∏ˆ∏¸–¬∫Û¡¢º¥¥¢¥ÊµΩ¥≈≈Ã…œ
!mysql_l.change_user(.(”√ªß√˚,√‹¬Î, ˝æ›ø‚) = ÷ÿ–¬µ«¬º MySQL
!mysql_l.character_set_name() = ªÒ»°µ±«∞◊÷∑˚ºØ
!mysql_l.close() = πÿ±’ ˝æ›ø‚¡¨Ω”
!mysql_l.commit() = Ã·Ωª ¬ŒÒ
!mysql_l.debug(.(œ˚œ¢) = µ˜ ‘œ˚œ¢
!mysql_l.dump_debug_info()
!mysql_l.get_charset() = µ»Õ¨”⁄ character_set_name()
!mysql_l.get_client_info() = ªÒ»°øÕªß∂À–≈œ¢
!mysql_l.get_client_version() = ªÒ»°øÕªß∂À∞Ê±æ∫≈
!mysql_l.get_errno() = ªÒ»°¥ÌŒÛ∫≈£¨0±Ì æŒﬁ¥ÌŒÛ
!mysql_l.get_error() = ªÒ»°¥ÌŒÛ–≈œ¢£¨"" ±Ì æŒﬁ¥ÌŒÛ
!mysql_l.get_host_info() = ªÒ»°÷˜ª˙–≈œ¢
!mysql_l.get_proto_info()
!mysql_l.get_server_info() = ªÒ»°∑˛ŒÒ∆˜–≈œ¢
!mysql_l.get_server_version() = ªÒ»°∑˛ŒÒ∆˜∞Ê±æ∫≈
!mysql_l.get_info()
!mysql_l.get_insert_id() = ∑µªÿ◊ÓΩ¸µƒ“ª¥Œ≤È—Ø÷– π”√µƒ◊‘∂Ø…˙≥…µƒid
!mysql_l.kill(.(Ω¯≥ÃID) = Ω· ¯ MySQL Ω¯≥Ã
!mysql_l.more_results() = ºÏ≤È «∑Òªπ”–≤È—ØΩ·π˚£®“ª∞„”√‘⁄ multi_query …œ£©
!mysql_l.next_result() = Œ™œ¬“ª¥Œ multi_query ◊ˆ◊º±∏
!mysql_l.options(.(—°œÓ,÷µ) = ∏ƒ±‰ MySQL µƒ—°œÓ
!mysql_l.options_char(.(—°œÓ,÷µ) = ∏ƒ±‰ MySQL µƒ—°œÓ
!mysql_l.options_int(.(—°œÓ,÷µ) = ∏ƒ±‰ MySQL µƒ—°œÓ
!mysql_l.ping() = ping “ªœ¬”Î∑˛ŒÒ∆˜µƒ¡¨Ω”£¨ªÚ’ﬂµ±¡¨Ω” ß–ßµƒ ±∫Ú÷ÿ–¬¡¨Ω”
!mysql_l.query(__) = ÷¥–– SQL ”Ôæ‰£¨»Áπ˚ «≤È—Ø”Ôæ‰£¨‘Ú∑µªÿΩ·π˚ºØ
!mysql_l.real_connect(.(÷˜ª˙,”√ªß√˚,√‹¬Î, ˝æ›ø‚√˚≥∆,∂Àø⁄) = ¡¨Ω”µΩ MySQL ∑˛ŒÒ∆˜
!mysql_l.escape_string(__) = ◊™“Â◊÷∑˚¥Æ£®Ωˆƒ‹‘⁄¡¨Ω”µΩ MySQL ∑˛ŒÒ∆˜∫Û π”√, «Î π”√ mysql.escape_string() ¥˙ÃÊ£©
!mysql_l.real_query(__) = ¡¢º¥÷¥–– SQL ”Ôæ‰
!mysql_l.rollback() = ªÿπˆ ¬ŒÒ
!mysql_l.select_db(__) = —°‘Ò ˝æ›ø‚£¨“≤ø…“‘ π”√ query("USE database")
!mysql_l.set_charset(__) = …Ë÷√◊÷∑˚ºØ£¨“≤ø…“‘ π”√ query("SET NAMES 'charset'")
!mysql_l.get_sqlstate() = ªÒ»° SQL ◊¥Ã¨
!mysql_l.ssl_set(.(key,cert,ca,capath,cipher) = …Ë÷√ SSL
!mysql_l.stat()
!mysql_l.store_result() = ªÒ»°Ω·π˚ºØ£®“ª∞„Œﬁ–Ëµ˜”√£©
!mysql_l.get_thread_id() = ªÒ»°œﬂ≥ÃID
!mysql_l.thread_safe() = œﬂ≥Ã∞≤»´
!mysql_l.use_result()
!mysql_l.list_dbs() = ¡–≥ˆÀ˘”– ˝æ›ø‚
!mysql_l.list_tables() = ¡–≥ˆÀ˘”– ˝æ›±Ì
!mysql_l.get_warning_count() = ªÒ»°æØ∏Ê◊‹ ˝
!mysql_l.affected_rows =  ‹”∞œÏµƒ–– ˝
!mysql_l.client_info = œ‡µ±”⁄ get_client_info()
!mysql_l.client_version = œ‡µ±”⁄ get_client_version()
!mysql_l.errno = œ‡µ±”⁄ get_errno()
!mysql_l.error = œ‡µ±”⁄ get_error()
!mysql_l.host_info = œ‡µ±”⁄ get_host_info()
!mysql_l.proto_info = œ‡µ±”⁄ get_proto_info()
!mysql_l.server_info = œ‡µ±”⁄ get_server_info()
!mysql_l.server_version = œ‡µ±”⁄ get_server_version()
!mysql_l.info = œ‡µ±”⁄ get_info()
!mysql_l.insert_id = œ‡µ±”⁄ get_insert_id()
!mysql_l.sqlstate = œ‡µ±”⁄ get_sqlstate()
!mysql_l.thread_id = œ‡µ±”⁄ thread_id()
!mysql_l.warning_count = œ‡µ±”⁄ get_warning_count()
?mysql = !mysql_l.
!mysql_r.get_num_rows() = ∑µªÿΩ·π˚ºØ÷–––µƒ ˝ƒø°£¥À√¸¡ÓΩˆ∂‘ SELECT ”Ôæ‰”––ß°£“™»°µ√±ª INSERT£¨UPDATE ªÚ’ﬂ DELETE ≤È—ØÀ˘”∞œÏµΩµƒ––µƒ ˝ƒø£¨”√ !mysql_l.affected_rows
!mysql_r.get_current_field() = »°µ√µ±«∞¡–∆´“∆
!mysql_r.data_seek(__) = ∆´“∆ ˝æ›Œª÷√
!mysql_r.fetch_array() = Ã·»°œ¬“ª––£¨≥…π¶∑µªÿ row  ˝◊È£¨≤¢«“ø…“‘Õ®π˝ row[–Ú∫≈] ªÚ row[¡–√˚] ¿¥∑√Œ ∆‰÷–µƒ ˝æ›£¨row[1] ±Ì æµ⁄“ª¡–£¨ ß∞‹∑µªÿ null
!mysql_r.fetch_field_direct(.(–Ú∫≈) = Ã·»°÷∏∂®¡–µƒ–≈œ¢£¨¥À¥¶–Ú∫≈¥” 0 ø™ º£¨≥…π¶∑µªÿ st_mysql_field Ω·ππÃÂ£¨ ß∞‹∑µªÿ null
!mysql_r.fetch_field() = Ã·»°œ¬“ª¡–£¨ªÒ»°’‚“ª¡–µƒ–≈œ¢£¨≥…π¶∑µªÿ st_mysql_field Ω·ππÃÂ£¨ ß∞‹∑µªÿ null
!mysql_r.fetch_fields() = Ã·»°À˘”–¡–£¨≥…π¶∑µªÿ st_mysql_field  ˝◊È£¨ ß∞‹∑µªÿ null
!mysql_r.fetch_object() = Ã·»°œ¬“ª––£¨≥…π¶∑µªÿ row  ˝◊È£¨≤¢«“ø…“‘Õ®π˝ row[¡–√˚] ¿¥∑√Œ ∆‰÷–µƒ ˝æ›£¨ ß∞‹∑µªÿ null
!mysql_r.fetch_row() = Ã·»°œ¬“ª––£¨≥…π¶∑µªÿ row  ˝◊È£¨≤¢«“ø…“‘Õ®π˝ row[–Ú∫≈] ¿¥∑√Œ ∆‰÷–µƒ ˝æ›£¨row[1] ±Ì æµ⁄“ª¡–£¨ ß∞‹∑µªÿ null
!mysql_r.get_field_count() = ªÒ»°◊‹¡– ˝
!mysql_r.field_seek(__) = ∆´“∆¡–Œª÷√
!mysql_r.free() =  Õ∑≈º«¬ººØ
!mysql_r.field_count = œ‡µ±”⁄ get_field_count()
!mysql_r.current_field = œ‡µ±”⁄ get_current_field()
?mysql.result = !mysql_r. 
end intellisense*/

/**intellisense(mysql)
escape_string(__) = ◊™“Â◊÷∑˚¥Æ
end intellisense**/

/**intellisense()
_MYSQL_OPT_CONNECT_TIMEOUT=@0/*_MYSQL_OPT_CONNECT_TIMEOUT*/
_MYSQL_OPT_COMPRESS=@1/*_MYSQL_OPT_COMPRESS*/
_MYSQL_OPT_NAMED_PIPE=@2/*_MYSQL_OPT_NAMED_PIPE*/
_MYSQL_INIT_COMMAND=@3/*_MYSQL_INIT_COMMAND*/
_MYSQL_READ_DEFAULT_FILE=@4/*_MYSQL_READ_DEFAULT_FILE*/
_MYSQL_READ_DEFAULT_GROUP=@5/*_MYSQL_READ_DEFAULT_GROUP*/
_MYSQL_SET_CHARSET_DIR=@6/*_MYSQL_SET_CHARSET_DIR*/
_MYSQL_SET_CHARSET_NAME=@7/*_MYSQL_SET_CHARSET_NAME*/
_MYSQL_OPT_LOCAL_INFILE=@8/*_MYSQL_OPT_LOCAL_INFILE*/
_MYSQL_OPT_PROTOCOL=@9/*_MYSQL_OPT_PROTOCOL*/
_MYSQL_SHARED_MEMORY_BASE_NAME=@0xA/*_MYSQL_SHARED_MEMORY_BASE_NAME*/
_MYSQL_OPT_READ_TIMEOUT=@0xB/*_MYSQL_OPT_READ_TIMEOUT*/
_MYSQL_OPT_WRITE_TIMEOUT=@0xC/*_MYSQL_OPT_WRITE_TIMEOUT*/
_MYSQL_OPT_USE_RESULT=@0xD/*_MYSQL_OPT_USE_RESULT*/
_MYSQL_OPT_USE_REMOTE_CONNECTION=@0xE/*_MYSQL_OPT_USE_REMOTE_CONNECTION*/
_MYSQL_OPT_USE_EMBEDDED_CONNECTION=@0xF/*_MYSQL_OPT_USE_EMBEDDED_CONNECTION*/
_MYSQL_OPT_GUESS_CONNECTION=@0x10/*_MYSQL_OPT_GUESS_CONNECTION*/
_MYSQL_SET_CLIENT_IP=@0x11/*_MYSQL_SET_CLIENT_IP*/
_MYSQL_SECURE_AUTH=@0x12/*_MYSQL_SECURE_AUTH*/
_MYSQL_REPORT_DATA_TRUNCATION=@0x13/*_MYSQL_REPORT_DATA_TRUNCATION*/
_MYSQL_OPT_RECONNECT=@0x14/*_MYSQL_OPT_RECONNECT*/
_MYSQL_STATUS_READY=@0/*_MYSQL_STATUS_READY*/
_MYSQL_STATUS_GET_RESULT=@1/*_MYSQL_STATUS_GET_RESULT*/
_MYSQL_STATUS_USE_RESULT=@2/*_MYSQL_STATUS_USE_RESULT*/
_MYSQL_PROTOCOL_DEFAULT=@0/*_MYSQL_PROTOCOL_DEFAULT*/
_MYSQL_PROTOCOL_TCP=@1/*_MYSQL_PROTOCOL_TCP*/
_MYSQL_PROTOCOL_SOCKET=@2/*_MYSQL_PROTOCOL_SOCKET*/
_MYSQL_PROTOCOL_PIPE=@3/*_MYSQL_PROTOCOL_PIPE*/
_MYSQL_PROTOCOL_MEMORY=@4/*_MYSQL_PROTOCOL_MEMORY*/
_MYSQL_TIMESTAMP_NONE=@-2/*_MYSQL_TIMESTAMP_NONE*/
_MYSQL_TIMESTAMP_ERROR=@-1/*_MYSQL_TIMESTAMP_ERROR*/
_MYSQL_TIMESTAMP_DATE=@0/*_MYSQL_TIMESTAMP_DATE*/
_MYSQL_TIMESTAMP_DATETIME=@1/*_MYSQL_TIMESTAMP_DATETIME*/
_MYSQL_TIMESTAMP_TIME=@2/*_MYSQL_TIMESTAMP_TIME*/
_MYSQL_RPL_MASTER=@0/*_MYSQL_RPL_MASTER*/
_MYSQL_RPL_SLAVE=@1/*_MYSQL_RPL_SLAVE*/
_MYSQL_RPL_ADMIN=@2/*_MYSQL_RPL_ADMIN*/
_MYSQL_STMT_INIT_DONE=@1/*_MYSQL_STMT_INIT_DONE*/
_MYSQL_STMT_PREPARE_DONE=@2/*_MYSQL_STMT_PREPARE_DONE*/
_MYSQL_STMT_EXECUTE_DONE=@3/*_MYSQL_STMT_EXECUTE_DONE*/
_MYSQL_STMT_FETCH_DONE=@4/*_MYSQL_STMT_FETCH_DONE*/
_STMT_ATTR_UPDATE_MAX_LENGTH=@0/*_STMT_ATTR_UPDATE_MAX_LENGTH*/
_STMT_ATTR_CURSOR_TYPE=@1/*_STMT_ATTR_CURSOR_TYPE*/
_STMT_ATTR_PREFETCH_ROWS=@2/*_STMT_ATTR_PREFETCH_ROWS*/
_CURSOR_TYPE_NO_CURSOR=@0/*_CURSOR_TYPE_NO_CURSOR*/
_CURSOR_TYPE_READ_ONLY=@1/*_CURSOR_TYPE_READ_ONLY*/
_CURSOR_TYPE_FOR_UPDATE=@2/*_CURSOR_TYPE_FOR_UPDATE*/
_CURSOR_TYPE_SCROLLABLE=@4/*_CURSOR_TYPE_SCROLLABLE*/
end intellisense**/