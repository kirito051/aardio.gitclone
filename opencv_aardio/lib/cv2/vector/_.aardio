//vector 动态数组库
import util.metaProperty
namespace cv2.vector
import console
var dll = ..raw.loadDll("~/lib/cv2/.res/OpenCvSharpExtern.dll","opencv2","cdecl")
class mat
{
	ctor( arg ){
		if type(arg)== type.number {
			this.handle = dll.vector_Mat_new2P(arg)
		}elseif(type(arg)== type.table){
			this.handle = dll.vector_Mat_new3P({pointer p[]=arg},#arg)
		}
		elseif(!arg){
			this.handle = dll.vector_Mat_new1P()
		}
		//this["$cache"] = { @{_weak="kv"}}
		this["$cache"] = { }
		..table.gc( this,"release" )
	};
	
	toArray = function(){
		var dst = {}
		var size = this.size;
		//var dstPtr = {}
		for(i=1;size;1){
			var m = ..cv2.Mat()
			..table.push( dst, m );
			//..table.push( dstPtr,m.cvPtr )
		}
		if(size){
			var re = dll.vector_Mat_assignToArray(this.handle,{ptr p[] = dst;})
		}
		return dst;
	}
	
	release = function(){
		if(this[["handle"]]){
			dll.vector_Mat_delete(this.handle)
		}
		this[["handle"]] = null
	}
	
	@_meta;	
}

namespace mat{
    _meta = ..util.metaProperty(
    	_type = "vectorOfMat";
    	_topointer = function(){
    		return owner.handle; 
    	}
    	__get = function(k){
    		if(!#owner[["$cache"]]){
    			owner[["$cache"]] = owner.toArray()
    		}
    		return owner[["$cache"]][[k]]; 
    	}
    	_len = function(t) {
			return owner.size; 
		}
    	size = {
    		_get = function(){ 
    			return dll.vector_Mat_getSize(owner.handle);
    		}	
    	};
    	elemPtr = {
    		_get = function(){
    			return dll.vector_Mat_getPointerP(owner.handle); 
    		}
    	}
    )	
}

class string{
	ctor( size ){
		if(!size){
			this.ptr = dll.vector_string_new1P()
		}else {
			assert(size>=0,"size应当大于等于0")
			this.ptr = dll.vector_string_new2P(size)
		}
		..table.gc(this,"release")
	};
	
	toArray = function(){
		var size = this.size;
		var strArray = {}
		if(size){
			var v,ret,ret2 = dll.vector_string_getElements(this.ptr,{pointer cPtrs[]={length=size}},{int lens[]={length=size}})
			for(i=1;size;1){
				var s = ..raw.tostring(ret.cPtrs[i],1,ret2.lens[i])
				..table.push( strArray,s )
			}			
		}
		return strArray; 
	}
	
	release = function(){
		if(this[["ptr"]]){
			dll.vector_string_delete(this.ptr)
		}
		this[["ptr"]] = null
	}
	@_meta
}

namespace string{
	_meta = ..util.metaProperty(
		_type = "vectorOfString";
		_topointer = function(){
			return owner.ptr; 
		}
		
		size = {
			_get = function(){ 
				return dll.vector_string_getSize(owner.ptr); 
			}
		};
	)
}

class byte{
	ctor( arg ){
		var tArg = type(arg)
		if(!arg){
			this.ptr = dll.vector_uchar_new1P()
		}
		elseif(tArg==type.number and arg>=0){
			this.ptr = dll.vector_uchar_new2P(arg)
		}elseif(tArg==type.table){
			this.ptr = dll.vector_uchar_new3P({byte arr[]=arg},#arg)
		}
		..table.gc(this,"release")
	};
	
	toArray = function(){
		var size = this.size;
		if(size){
			var buf = ..raw.buffer(size,0);
			var ret = ..raw.convert( this.elemPtr,{byte v[]=buf});
			return buf		
		}
	}
	
	release = function(){
		if(this[["ptr"]]){
			dll.vector_uchar_delete(this.ptr)
		}
		this[["ptr"]] = null
	}
	@_meta
}

namespace byte{
	_meta = ..util.metaProperty(
		_type = "vectorOfByte";
		_topointer = function(){
			return owner.ptr; 
		}
		size = {
			_get = function(){ 
				return dll.vector_uchar_getSize(owner.ptr); 
			}
		};
		elemPtr = {
			_get = function(){
				return dll.vector_uchar_getPointerP(owner.ptr)
			}
		}
	)
}


class int32{
	ctor( size ){
		var tArg = type(size);
		if(tArg==type.null){
			this.ptr = dll.vector_int32_new1P()	
		}elseif(tArg==type.number and size>=0){
			this.ptr = dll.vector_int32_new2P(size)
		}elseif(tArg==type.table){
			this.ptr = dll.vector_int32_new3P(size,#size);
		}
		..table.gc(this,"release")
	};
	
	toArray = function(){
		var size = this.size;
		if(size){
			var ret = ..raw.convert( this.elemPtr,{int v[]={length=size}});
			return ret.v; 			
		}
	}
	
	release = function(){
		if(this[["ptr"]]){
			dll.vector_int32_delete(this.ptr)
		}
		this[["ptr"]] = null
	}
	@_meta
}

namespace int32{
	_meta = ..util.metaProperty(
		_type = "vectorOfInt32";
		_topointer = function(){
			return owner.ptr; 
		}
		size = {
			_get = function(){ 
				return dll.vector_int32_getSize(owner.ptr); 
			}
		};
		elemPtr = {
			_get = function(){
				return dll.vector_int32_getPointerP(owner.ptr)
			}
		}
	)
}

class float{
	ctor( arg,dataLength ){
		if(!arg){
			this.ptr = dll.vector_float_new1P(arg)
		}
		elseif(type(arg)==type.number){
			this.ptr = dll.vector_float_new2P(arg)
		}
		elseif(type(arg)==type.table){
			this.ptr = dll.vector_float_new3P({float arr[]=arg},#arg)
		}
		
	};
	
	toArray = function(){
		var size = this.size;
		if(size){
			var ret = ..raw.convert( this.elemPtr,{float v[]={length=size}});
			return ret.v; 			
		}
	}
	
	release = function(){
		if(this[["ptr"]]){
			dll.vector_float_delete(this.ptr)
		}
		this[["ptr"]] = null
	}
	@_meta
}

namespace float{
    _meta = ..util.metaProperty( 
		_type = "vectorOfFloat";
		_topointer = function(){
			return owner.ptr; 
		}
    	size = {
    		_get = function(){ 
    			return dll.vector_float_getSize(owner.ptr); 
    		}
    	};
		elemPtr = {
			_get = function(){
				return dll.vector_float_getPointerP(owner.ptr)
			}
		}
    )
}

class double{
	ctor( arg,dataLength ){
		if(!arg){
			this.ptr = dll.vector_double_new1P(arg)
		}elseif(type(arg)==type.number){
			this.ptr = dll.vector_double_new2P(arg)
		}
	};
	
	toArray = function(){
		var size = this.size;
		if(size){
			var ret = ..raw.convert( this.elemPtr,{double v[]={length=size}});
			return ret.v; 			
		}
	}
	
	release = function(){
		if(this[["ptr"]]){
			dll.vector_double_delete(this.ptr)
		}
		this[["ptr"]] = null
	}
	@_meta
}

namespace double{
    _meta = ..util.metaProperty( 
		_type = "vectorOfDouble";
		_topointer = function(){
			return owner.ptr; 
		}
    	size = {
    		_get = function(){ 
    			return dll.vector_double_getSize(owner.ptr); 
    		}
    	};
		elemPtr = {
			_get = function(){
				return dll.vector_double_getPointerP(owner.ptr)
			}
		}
    )
}

class rect{
	ctor( arg,size ){
		tArg = type(arg);
		if(tArg==type.null){
			this.ptr = dll.vector_Rect_new1P()
		}
		elseif(tArg==type.number){
			this.ptr = dll.vector_Rect_new2P(arg)
		}
		elseif(tArg==type.table){
			this.ptr = dll.vector_Rect_new3P({struct rects[]=arg},#arg)
		}
		..table.gc(this,"release")
		
	};
	
	toArray = function(){
		var size = this.size;
		if(size){
			var ret = ..raw.convert( this.elemPtr,{struct v[]={
				length=size;
				::RECT();
				}
			});
		return ret.v; 			
		}
	}
	
	release = function(){
		if(this[["ptr"]]){
			dll.vector_Rect_delete(this.ptr)
		}
		this[["ptr"]] = null
	}
	@_meta
}

namespace rect{
	_meta = ..util.metaProperty( 
		_type = "vectorOfRect";
		_topointer = function(){
			return owner.ptr; 
		}
    	size = {
    		_get = function(){ 
    			return dll.vector_Rect_getSize(owner.ptr); 
    		}
    	};
		elemPtr = {
			_get = function(){
				return dll.vector_Rect_getPointerP(owner.ptr)
			}
		}
    )
}

class rect2d{
	ctor( arg,size ){
		tArg = type(arg);
		if(tArg==type.null){
			this.ptr = dll.vector_Rect2d_new1P()
		}
		elseif(tArg==type.number){
			this.ptr = dll.vector_Rect2d_new2P(arg)
		}
		elseif(tArg==type.table){
			this.ptr = dll.vector_Rect2d_new3P({struct rects[]=arg},#arg)
		}
		..table.gc(this,"release")
		
	};
	
	toArray = function(){
		var size = this.size;
		if(size){
			var ret = ..raw.convert( this.elemPtr,{struct v[]={
				length=size;
				::RECT();
				}
			});
		return ret.v; 			
		}
	}
	
	release = function(){
		if(this[["ptr"]]){
			dll.vector_Rect2d_delete(this.ptr)
		}
		this[["ptr"]] = null
	}
	@_meta
}

namespace rect2d{
	_meta = ..util.metaProperty( 
		_type = "vectorOfRect2d";
		_topointer = function(){
			return owner.ptr; 
		}
    	size = {
    		_get = function(){ 
    			return dll.vector_Rect2d_getSize(owner.ptr); 
    		}
    	};
		elemPtr = {
			_get = function(){
				return dll.vector_Rect2d_getPointerP(owner.ptr)
			}
		}
    )
}

class vec2f{
	ctor(){
		this.ptr = dll.vector_Vec2f_new1P();
		
	};
	
	toArray = function(){
		var size = this.size;
		if(size){
			var ret = ..raw.convert( this.elemPtr,{struct v[]={
					length=size;
					{
						float f[2];
					}
				}
			});
			var res = {}
			for(i=1;#ret.v;1){
				..table.push( res,ret.v[i].f )
			}
			return res; 			
		}
	}
	release = function(){
		if(this[["ptr"]]){
			dll.vector_Vec2f_delete(this.ptr)
		}
		this[["ptr"]] = null
	}
	@_meta
}

namespace vec2f{
    _meta = ..util.metaProperty(
    	_type = "vectorOfVec2f";
		_topointer = function(){
			return owner.ptr; 
		}
		size = {
    		_get = function(){ 
    			return dll.vector_Vec2f_getSize(owner.ptr); 
    		}
    	};
    	
		elemPtr = {
			_get = function(){
				return dll.vector_Vec2f_getPointerP(owner.ptr)
			}
		}
    )
}

class vec3f{
	ctor(){
		this.ptr = dll.vector_Vec3f_new1P();
		
	};
	
	toArray = function(){
		var size = this.size;
		if(size){
			var ret = ..raw.convert( this.elemPtr,{struct v[]={
					length=size;
					{
						float f[3];
					}
				}
			});
			var res = {}
			for(i=1;#ret.v;1){
				..table.push( res,ret.v[i].f )
			}
			return res; 			
		}
	}
	release = function(){
		if(this[["ptr"]]){
			dll.vector_Vec3f_delete(this.ptr)
		}
		this[["ptr"]] = null
	}
	@_meta
}

namespace vec3f{
    _meta = ..util.metaProperty(
    	_type = "vectorOfVec3f";
		_topointer = function(){
			return owner.ptr; 
		}
		size = {
    		_get = function(){ 
    			return dll.vector_Vec3f_getSize(owner.ptr); 
    		}
    	};
    	
		elemPtr = {
			_get = function(){
				return dll.vector_Vec3f_getPointerP(owner.ptr)
			}
		}
    )
}

class vec4f{
	ctor(){
		this.ptr = dll.vector_Vec4f_new1P();
		
	};
	
	toArray = function(){
		var size = this.size;
		if(size){
			var ret = ..raw.convert( this.elemPtr,{struct v[]={
					length=size;
					{
						float f[4];
					}
				}
			});
			var res = {}
			for(i=1;#ret.v;1){
				..table.push( res,ret.v[i].f )
			}
			return res; 			
		}
	}
	release = function(){
		if(this[["ptr"]]){
			dll.vector_Vec4f_delete(this.ptr)
		}
		this[["ptr"]] = null
	}
	@_meta
}

namespace vec4f{
    _meta = ..util.metaProperty(
    	_type = "vectorOfVec4f";
		_topointer = function(){
			return owner.ptr; 
		}
		size = {
    		_get = function(){ 
    			return dll.vector_Vec4f_getSize(owner.ptr); 
    		}
    	};
    	
		elemPtr = {
			_get = function(){
				return dll.vector_Vec4f_getPointerP(owner.ptr)
			}
		}
    )
}

class vec4i{
	ctor(data){
		if(!data){
			this.ptr = dll.vector_Vec4i_new1P();
		}else {
			//todo	
		}
	};
	
	toArray = function(){
		var size = this.size;
		if(size){
			var ret = ..raw.convert( this.elemPtr,{struct v[]={
					length=size;
					{int n[4];}
					
					//..cv2.vector.int32(4)
				}
			});
			var res = {}
			for(i=1;#ret.v;1){
				..table.push( res,ret.v[i].n )
			}
			return res; 			
		}
	}
	release = function(){
		if(this[["ptr"]]){
			dll.vector_Vec4i_delete(this.ptr)
		}
		this[["ptr"]] = null
	}
	@_meta
}

namespace vec4i{
    _meta = ..util.metaProperty(
    	_type = "vectorOfVec4i";
		_topointer = function(){
			return owner.ptr; 
		}
		size = {
    		_get = function(){ 
    			return dll.vector_Vec4i_getSize(owner.ptr); 
    		}
    	};
    	
		elemPtr = {
			_get = function(){
				return dll.vector_Vec4i_getPointerP(owner.ptr)
			}
		}
    )
}

class point{
	ctor( size,params ){
		var tArg = type(size)
		if(tArg==type.null){
			this.ptr = dll.vector_Point2i_new1P()
		}elseif(tArg==type.number){
			this.prt = dll.vector_Point2i_new2P(size)
		}elseif(tArg==type.table){
			//todo
		}
		..table.gc(this,"release")
		
		
	};
	
	toArray = function(){
		var size = this.size;
		if(size){
			var ret = ..raw.convert( this.elemPtr,{struct v[]={
				length = size;
				::POINT()
			}}	
			)
			return ret.v; 
		}
	}
	

	release = function(){
		if(this[["ptr"]]){
			dll.vector_Point2i_delete(this.ptr)
		}
		this[["ptr"]] = null		
	}
	@_meta
}
	
namespace point{
    _meta = ..util.metaProperty(
    	_type = "vectorOfPoint";
		_topointer = function(){
			return owner.ptr; 
		}
		size = {
    		_get = function(){ 
    			return dll.vector_Point2i_getSize(owner.ptr); 
    		}
    	};
    	
		elemPtr = {
			_get = function(){
				return dll.vector_Point2i_getPointerP(owner.ptr)
			}
		}
    )
}

class vecPoint{
	ctor(size){
		if(!size){
			this.ptr = dll.vector_vector_Point_new1P();
		}else {
			this.ptr = dll.vector_vector_Point_new2P(size)
		}
	};
	
	getSize1 = function(){
		return dll.vector_vector_Point_getSize1(this.ptr)
	}
	
	getSize2 = function(){
		var size = this.size
		var err,ret = dll.vector_vector_Point_getSize2(this.ptr,{int n[]={length=size}})
		return ret.n; 
	}
	//copyFromVectorToArray
	toArray = function(){
		var size = this.size;
		var size2 = this.getSize2()
		var ret = {}
		var ppoints = {ptr array[]={length=size}}
		for(i=1;size;1){
			ppoints.array[i] = ..raw.buffer({struct array[] ={::POINT(),length=size2[i]} } )
		}
		if(size){
			var res = dll.vector_vector_Point_copy(this.ptr,ppoints )
			for(i=1;#(ppoints.array);1){
				ret[i] = ..raw.convertArray(ppoints.array[i],size2[i],::POINT())	
			}
		}
		return ppoints; 
	}

	/*
	// copyFromVectorToArray2
	toArray = function(){
		var size = this.size;
		var size2 = this.getSize2()
		var ret = {}
		var points = class {
			ctor( x,y ){
				this = { struct array[] = {length = x;} }
				for(i=1;x;1){
					this.array[i] = { struct array[] = {length = y[i];::POINT()} }
				}
			};
		}
		ppoints = points(size,size2)
		if(size){
			var res = dll.vector_vector_Point_copy(this.ptr,ppoints )
		}
		return ppoints; 
	}
	*/
	release = function(){
		if(this[["ptr"]]){
			dll.vector_vector_Point_delete(this.ptr)
		}
		this[["ptr"]] = null
	}
	@_meta
}

namespace vecPoint{
    _meta = ..util.metaProperty(
    	_type = "vectorOfVecPoint";
		_topointer = function(){
			return owner.ptr; 
		}
		size = {
    		_get = function(){ 
    			return dll.vector_vector_Point_getSize1(owner.ptr); 
    		}
    	};
    )
}



/**intellisense(cv2.vector)
cv2.vector = opencv api动态数组库
end intellisense**/

/**intellisense()
cv2.vector.mat() = 创建空白mat容器,一般作为API参数使用\n!vectorMat.
cv2.vector.mat(.(容器大小) = 创建指定大小的空白mat容器
cv2.vector.mat(.(mat数组) = 用mat数组创建mat容器
!vectorMat.toArray() = 转成mat数组
!vectorMat.release() = 释放资源
!vectorMat.size = mat容器大小
end intellisense**/

/**intellisense()
cv2.vector.string() = 创建空白字符串容器,一般作为API参数使用\n!vectorString.
cv2.vector.string(.(容器大小) = 创建指定大小的空白string容器
!vectorString.toArray() = 转成string数组
!vectorString.release() = 释放资源
!vectorString.size = string容器大小
end intellisense**/

/**intellisense()
cv2.vector.byte() = 创建空白byte容器,一般作为API参数使用\n!vectorByte.
cv2.vector.byte(.(容器大小) = 创建指定大小的空白byte容器
cv2.vector.byte(.(byte数组) = 从普通byte数组中创建byte容器
!vectorByte.toArray() = 转成raw.buffer字符串
!vectorByte.release() = 释放资源
!vectorByte.size = byte容器大小
end intellisense**/

/**intellisense()
cv2.vector.int32() = 创建空白int32容器,一般作为API参数使用\n!vectorInt32.
cv2.vector.int32(.(容器大小) = 创建指定大小的空白int32容器
cv2.vector.int32(.(普通整数数组) = 由aardio的普通整数数组创建int32容器
!vectorInt32.toArray() = 转成int32数组
!vectorInt32.release() = 释放资源
!vectorInt32.size = int32容器大小
end intellisense**/

/**intellisense()
cv2.vector.float() = 创建空白float容器,一般作为API参数使用\n!vectorFloat.
cv2.vector.float(.(容器大小) = 创建指定大小的空白float容器
cv2.vector.float(.(aardio数值数组) = 从aardio数值数组创建float容器
!vectorFloat.toArray() = 转成float数组
!vectorFloat.release() = 释放资源
!vectorFloat.size = float容器大小
end intellisense**/

/**intellisense()
cv2.vector.double() = 创建空白double容器,一般作为API参数使用\n!vectorDouble.
cv2.vector.double(.(容器大小) = 创建指定大小的空白double容器
!vectorDouble.toArray() = 转成double数组
!vectorDouble.release() = 释放资源
!vectorDouble.size = double容器大小
end intellisense**/

/**intellisense()
cv2.vector.rect() = 创建空白rect容器,一般作为API参数使用\n!vectorRect.
cv2.vector.rect(.(容器大小) = 创建指定大小的空白rect容器
cv2.vector.rect(.(rect对象数组) = 从rect对象数组创建rect容器
!vectorRect.toArray() = 转成rect对象数组
!vectorRect.release() = 释放资源,可自动释放
!vectorRect.size = rect容器大小
end intellisense**/

/**intellisense()
cv2.vector.rect2d() = 创建空白rect2d容器,一般作为API参数使用\n!vectorRect2d.
cv2.vector.rect2d(.(容器大小) = 创建指定大小的空白rect2d容器
cv2.vector.rect2d(.(rect2d对象数组) = 从rect对象数组创建rect2d容器
!vectorRect2d.toArray() = 转成rect2d对象数组
!vectorRect2d.release() = 释放资源,可自动释放
!vectorRect2d.size = rect2d容器大小
end intellisense**/

/**intellisense()
cv2.vector.vec2f() =  创建空白vec2f容器,即由2个float数值作为基本元素的动态数组一般作为API参数使用\n!vectorOfVec2f.
!vectorOfVec2f.toArray() = 转成{float;float}数组
!vectorOfVec2f.release() = 释放资源,可自动释放
!vectorOfVec2f.size = vec2f容器大小
end intellisense**/

/**intellisense()
cv2.vector.vec3f() =  创建空白vec3f容器,即由3个float数值作为基本元素的动态数组一般作为API参数使用\n!vectorOfVec3f.
!vectorOfVec3f.toArray() = 转成{float;float;float}数组
!vectorOfVec3f.release() = 释放资源,可自动释放
!vectorOfVec3f.size = vec3f容器大小
end intellisense**/

/**intellisense()
cv2.vector.vec4f() =  创建空白vec4f容器,即由4个float数值作为基本元素的动态数组一般作为API参数使用\n!vectorOfVec4f.
!vectorOfVec4f.toArray() = 转成{float;float;float;float}数组
!vectorOfVec4f.release() = 释放资源,可自动释放
!vectorOfVec4f.size = vec4f容器大小
end intellisense**/

/**intellisense()
cv2.vector.vec4i() = 创建空白vec4i容器,即由4个int数值作为基本元素的动态数组一般作为API参数使用\n!vectorOfVec4i.
!vectorOfVec4i.toArray() = 转成{int;int;int;int}数组
!vectorOfVec4i.release() = 释放资源,可自动释放
!vectorOfVec4i.size = vec4i容器大小
end intellisense**/

/**intellisense()
cv2.vector.point() = 创建空白point容器,即由多个::POINT对象作为基本元素的动态数组一般作为API参数使用\n!vectorOfPoint.
cv2.vector.point(.(容器大小) = 创建指定大小的空白point容器
!vectorOfPoint.toArray() = 转成::POINT对象数组
!vectorOfPoint.release() = 释放资源,可自动释放
!vectorOfPoint.size = point容器大小
end intellisense**/