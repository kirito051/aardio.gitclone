//log4a 调试日志
import fsys;
import process; 
import debug;
namespace log4a;

var file;

_lv_trace = 32
_lv_debug = 16
_lv_info  = 8
_lv_warn  = 4
_lv_err   = 2
_lv_fatal = 1
_lv_off   = 0

var cur_level = _lv_debug
var cur_tag   = 'main'
var line_no   = 0

init = function(tag, ... ) {
        cur_tag = tag
        
    var lv = _lv_debug;
    var log_time = ..time.now();
        log_time.format="%Y%m%d%H%M%S";
    var path = "log_" + tostring(log_time) + ".log"
        
        var arg = {...}
        for(i=1;#arg;1) {
            select(type(arg[i])) {
                    case type.number {
                            lv = arg[i]
                    }
                    case type.string {
                            path = arg[i] + "_" + tostring(log_time) + ".log"
                    }
                    case type.function {
                            path = arg[i]()
                    }
                    case type.table {
                            if (arg.path!=null) {
                                    if (type(arg.path) == type.string) {
                                            path = arg[i] + "_" + tostring(log_time) + ".log"
                                    } elseif(type(arg.path) == type.function){
                                            path = arg[i]()                
                                    }
                            }
                            if (arg.level!=null) {
                                    if (type(arg.level) == type.number) {
                                            lv = arg[i]
                                    }
                            }
            }
                    else {
                            // not supported, ignore it
                    }
                }
        }
        
        cur_level = lv
    path = ..io.fullpath(path)
    
    if (!file) {
                file = ..io.open(path,"a+t")
                file.setvbuf("line",512)                
        }
}

log = function(level,  ... ){  
        if(!file)
                return;
    if(level > cur_level)
            return;

        if (line_no == 0) {
            var info = ..debug.queryinfo(2,"select source,name,currentline")
            line_no = info.currentline
    }
    
        var log_time = ..time.now();
        log_time.format="%Y%m%d-%H:%M:%S";
        
        //file.write(..string.format("[%s] %s:%03d", tostring(log_time), cur_tag, line_no));
        file.write(..string.concat("[",tostring(log_time),"] ",cur_tag,":",line_no));
        line_no = 0
        
        file.write(" - ");

        var arg = {...}        
        for(i=1;#arg ){
                file.write( tostring(arg[i]):""," ") 
        } 

        file.write('\n');
        
}

trace = function(...){
        if (line_no == 0) {
            var info = ..debug.queryinfo(2,"select source,name,currentline")
            line_no = info.currentline
    }

        log(_lv_trace, ...)
}
debug = function(...){
        if (line_no == 0) {
            var info = ..debug.queryinfo(2,"select source,name,currentline")
            line_no = info.currentline
    }

        log(_lv_debug, ...)
}
info = function(...){
        if (line_no == 0) {
            var info = ..debug.queryinfo(2,"select source,name,currentline")
            line_no = info.currentline
    }

        log(_lv_info, ...)
}
warn = function(...){
        if (line_no == 0) {
            var info = ..debug.queryinfo(2,"select source,name,currentline")
            line_no = info.currentline
    }

        log(_lv_warn, ...)
}
err = function(...){
        if (line_no == 0) {
            var info = ..debug.queryinfo(2,"select source,name,currentline")
            line_no = info.currentline
    }

        log(_lv_err, ...)
}
fatal = function(...){
        if (line_no == 0) {
            var info = ..debug.queryinfo(2,"select source,name,currentline")
            line_no = info.currentline
    }

        log(_lv_fatal, ...)
}


close = function(){
        if(!file)
                return;
          
        file.close();
        file=null;
        ..io.print = io_print;
}

set_tag = function(tag) {
        cur_tag = tag
}
set_level = function(level) {
        cur_level = level
}


/**intellisense(debug.log4a)
_lv_trace = [打印级别]：跟踪级, 打印级别最低, 跟踪运行信息设置这个级别
_lv_debug = [打印级别]：调试级, 打印级别次低, 普通调试信息设置这个级别
_lv_info  = [打印级别]：信息级, 打印级别中等，重要提示信息设置这个级别
_lv_warn  = [打印级别]：警告级, 打印级别中高，警告信息设置这个级别
_lv_err   = [打印级别]：错误级, 打印级别较高，出错信息设置这个级别
_lv_fatal = [打印级别]：致命级, 打印级别最高，致命信息设置这个级别
init(__/*设置输出行的tag标记, 日志文件前缀*/) = 设置输出行的tag标记, 日志文件前缀
log(__/*打印级别, 打印信息。*/) = 分级打印，参数1为打印级别_lv_常量，默认为_lv_debug\n其余为要打印的信息
trace(__/*打印信息。*/) = 要打印的信息
debug(__/* 打印信息。*/) = 要打印的信息
info(__/*打印信息。*/) = 要打印的信息
warn(__/* 打印信息。*/) = 要打印的信息
err(__/* 打印信息。*/) = 要打印的信息
fatal(__/* 打印信息。*/) = 要打印的信息
set_tag(__/*打印标志。*/) = 设置当前的打印标志
set_level(__/*_lv_常量。*/) = 设置当前的打印级别
close() = 关闭; 
end intellisense**/