//sprite 精灵
namespace hge;
 
var engine = ..hge.createEngine();

sprite = class {
	ctor (texture, texx, texy, w, h) { 
	
		var texx1, texy1, texx2, texy2;
		 
		
		this.tx = texx;
		this.ty = texy;
		this.width = w;
		this.height = h;
		
		if (texture) {
			this.texWidth = texture.width();
			this.texHeight = texture.height();
		}
		else {
			this.texWidth = 1;
			this.texHeight = 1;
		}
		
		this.hotX = 0;
		this.hotY = 0;
		this.bXFlip = false;
		this.bYFlip = false;
		this.bHSFlip = false;
		
		this.quad = ..hge.quad();
		this.quad.tex = texture;
		
		texx1 = texx / this.texWidth;
		texy1 = texy / this.texHeight;
		texx2 = (texx + w) / this.texWidth;
		texy2 = (texy + h) / this.texHeight;
		
		this.quad.v[1].tx = texx1; this.quad.v[1].ty = texy1;
		this.quad.v[2].tx = texx2; this.quad.v[2].ty = texy1;
		this.quad.v[3].tx = texx2; this.quad.v[3].ty = texy2;
		this.quad.v[4].tx = texx1; this.quad.v[4].ty = texy2;
		
		this.quad.v[1].z = 0.5;
		this.quad.v[2].z = 0.5;
		this.quad.v[3].z = 0.5;
		this.quad.v[4].z = 0.5;
		
		this.quad.v[1].col = 0xffffffff;
		this.quad.v[2].col = 0xffffffff;
		this.quad.v[3].col = 0xffffffff;
		this.quad.v[4].col = 0xffffffff;
		
		this.quad.blend = 2/*_BLEND_DEFAULT*/;
	}
	
	render = function (x, y) {
		var tempx1, tempy1, tempx2, tempy2;
		
		tempx1 = x - this.hotX;
		tempy1 = y - this.hotY;
		tempx2 = x + this.width - this.hotX;
		tempy2 = y + this.height - this.hotY;
		
		this.quad.v[1].x = tempx1; this.quad.v[1].y = tempy1;
		this.quad.v[2].x = tempx2; this.quad.v[2].y = tempy1;
		this.quad.v[3].x = tempx2; this.quad.v[3].y = tempy2;
		this.quad.v[4].x = tempx1; this.quad.v[4].y = tempy2;
		
		engine.gfxRenderQuad(this.quad);
	}
	
	renderEx = function (x, y, rot, hscale, vscale) {
		var tx1, ty1, tx2, ty2;
		var sint, cost;
		
		if (vscale == 0) vscale = hscale;
		
		tx1 = -this.hotX * hscale;
		ty1 = -this.hotY * vscale;
		tx2 = (this.width - this.hotX) * hscale;
		ty2 = (this.height - this.hotY) * vscale;
		
		if (rot != 0) {
			cost = ..math.cos(rot);
			sint = ..math.sin(rot);
				
			this.quad.v[1].x  = tx1*cost - ty1*sint + x;
			this.quad.v[1].y  = tx1*sint + ty1*cost + y;	
	
			this.quad.v[2].x  = tx2*cost - ty1*sint + x;
			this.quad.v[2].y  = tx2*sint + ty1*cost + y;	
	
			this.quad.v[3].x  = tx2*cost - ty2*sint + x;
			this.quad.v[3].y  = tx2*sint + ty2*cost + y;	
	
			this.quad.v[4].x  = tx1*cost - ty2*sint + x;
			this.quad.v[4].y  = tx1*sint + ty2*cost + y;	
		}
		else {
			this.quad.v[1].x = tx1 + x; this.quad.v[1].y = ty1 + y;
			this.quad.v[2].x = tx2 + x; this.quad.v[2].y = ty1 + y;
			this.quad.v[3].x = tx2 + x; this.quad.v[3].y = ty2 + y;
			this.quad.v[4].x = tx1 + x; this.quad.v[4].y = ty2 + y;
		}
		
		engine.gfxRenderQuad(this.quad);
	}
	
	renderStretch = function (x1, y1, x2, y2) {
		this.quad.v[1].x = x1; this.quad.v[1].y = y1;
		this.quad.v[2].x = x2; this.quad.v[2].y = y1;
		this.quad.v[3].x = x2; this.quad.v[3].y = y2;
		this.quad.v[4].x = x1; this.quad.v[4].y = y2;
		
		engine.gfxRenderQuad(this.quad);
	}
	
	render4V = function (x0, y0, x1, y1, x2, y2, x3, y3)
	{
		this.quad.v[1].x = x0; this.quad.v[1].y = y0;
		this.quad.v[2].x = x1; this.quad.v[2].y = y1;
		this.quad.v[3].x = x2; this.quad.v[3].y = y2;
		this.quad.v[4].x = x3; this.quad.v[4].y = y3;
		
		engine.gfxRenderQuad(this.quad);
	}
	
	getBoundingBoxEx = function (x, y, rot, hscale, vscale) {
		var tx1, ty1, tx2, ty2;
		var sint, cost;
	
		rect.clear();
		
		tx1 = -this.hotX*hscale;
		ty1 = -this.hotY*vscale;
		tx2 = (this.width-this.hotX)*hscale;
		ty2 = (this.height-this.hotY)*vscale;
		
		var rect = ..hge.rect();
		
		if (rot != 0)
		{
			cost = ..math.cos(rot);
			sint = ..math.sin(rot);
				
			rect.encapsulate(tx1*cost - ty1*sint + x, tx1*sint + ty1*cost + y);	
			rect.encapsulate(tx2*cost - ty1*sint + x, tx2*sint + ty1*cost + y);	
			rect.encapsulate(tx2*cost - ty2*sint + x, tx2*sint + ty2*cost + y);	
			rect.encapsulate(tx1*cost - ty2*sint + x, tx1*sint + ty2*cost + y);	
		}
		else {
			rect.encapsulate(tx1 + x, ty1 + y);
			rect.encapsulate(tx2 + x, ty1 + y);
			rect.encapsulate(tx2 + x, ty2 + y);
			rect.encapsulate(tx1 + x, ty2 + y);
		}
		
		return rect;
	}
	
	setFlip = function (bX, bY, bHotSpot = false) {
		var tx, ty;
	
		if(bHSFlip && bXFlip) this.hotX = this.width - this.hotX;
		if(bHSFlip && bYFlip) this.hotY = this.height - this.hotY;
	
		bHSFlip = bHotSpot;
		
		if(bHSFlip && bXFlip) this.hotX = this.width - this.hotX;
		if(bHSFlip && bYFlip) this.hotY = this.height - this.hotY;
	
		if(bX != bXFlip) {
			tx=this.quad.v[1].tx; this.quad.v[1].tx=this.quad.v[2].tx; this.quad.v[2].tx=tx;
			ty=this.quad.v[1].ty; this.quad.v[1].ty=this.quad.v[2].ty; this.quad.v[2].ty=ty;
			tx=this.quad.v[4].tx; this.quad.v[4].tx=this.quad.v[3].tx; this.quad.v[3].tx=tx;
			ty=this.quad.v[4].ty; this.quad.v[4].ty=this.quad.v[3].ty; this.quad.v[3].ty=ty;
	
			bXFlip=!bXFlip;
		}
	
		if(bY != bYFlip)
		{
			tx=this.quad.v[1].tx; this.quad.v[1].tx=this.quad.v[4].tx; this.quad.v[4].tx=tx;
			ty=this.quad.v[1].ty; this.quad.v[1].ty=this.quad.v[4].ty; this.quad.v[4].ty=ty;
			tx=this.quad.v[2].tx; this.quad.v[2].tx=this.quad.v[3].tx; this.quad.v[3].tx=tx;
			ty=this.quad.v[2].ty; this.quad.v[2].ty=this.quad.v[3].ty; this.quad.v[3].ty=ty;
	
			bYFlip=!bYFlip;
		}
	}
	
	
	setTexture = function (tex) {
		var tx1,ty1,tx2,ty2;
		var tw,th;
		
		this.quad.tex=tex;
		
		if(tex) {
			tw = tex.width();
			th = tex.height();
		}
		else {
			tw = 1;
			th = 1;
		}
	
		if(tw!=this.texWidth || th!=this.texHeight) {
			tx1=this.quad.v[1].tx*this.texWidth;
			ty1=this.quad.v[1].ty*this.texHeight;
			tx2=this.quad.v[3].tx*this.texWidth;
			ty2=this.quad.v[3].ty*this.texHeight;
	
			this.texWidth=tw;
			this.texHeight=th;
	
			tx1/=tw; ty1/=th;
			tx2/=tw; ty2/=th;
	
			this.quad.v[1].tx=tx1; this.quad.v[1].ty=ty1; 
			this.quad.v[2].tx=tx2; this.quad.v[2].ty=ty1; 
			this.quad.v[3].tx=tx2; this.quad.v[3].ty=ty2; 
			this.quad.v[4].tx=tx1; this.quad.v[4].ty=ty2; 
		}
	}
	
	setTextureRect = function (x, y, w, h, adjSize = true) {
		var tx1, ty1, tx2, ty2;
		var bX,bY,bHS;
	
		tx=x;
		ty=y;
		
		if(adjSize) {
			this.width=w;
			this.height=h;
		}
	
		tx1=tx/this.texWidth; ty1=ty/this.texHeight;
		tx2=(tx+w)/this.texWidth; ty2=(ty+h)/this.texHeight;
	
		this.quad.v[1].tx=tx1; this.quad.v[1].ty=ty1; 
		this.quad.v[2].tx=tx2; this.quad.v[2].ty=ty1; 
		this.quad.v[3].tx=tx2; this.quad.v[3].ty=ty2; 
		this.quad.v[4].tx=tx1; this.quad.v[4].ty=ty2; 
	
		bX=bXFlip; bY=bYFlip; bHS=bHSFlip;
		bXFlip=false; bYFlip=false;
		this.setFlip(bX,bY,bHS);
	}
	
	
	setColor = function (col, i = -1) {
		if(i != -1)
			this.quad.v[i+1].col = col;
		else
			this.quad.v[1].col = col;
			this.quad.v[2].col = col;
			this.quad.v[3].col = col;
			this.quad.v[4].col = col;
	}
	
	setZ = function (z, i = -1) {
		if(i != -1)
			this.quad.v[i+1].z = z;
		else
			this.quad.v[1].z = z;
			this.quad.v[2].z = z;
			this.quad.v[3].z = z;
			this.quad.v[4].z = z;
	}
	
	setBlendMode = function (blend) {
		this.quad.blend = blend;
	}
	
	setHotSpot = function (x, y) {
		this.hotX = x;
		this.hotY = y;
	}
	
	getTexture = function () {
		return this.quad.tex;
	}
	
	getTextureRect = function () {
		return this.tx, this.ty, this.width, this.height;
	}
	
	getColor = function (i = 0) {
		return this.quad.v[i + 1].col;
	}
	
	getZ = function (i = 0) {
		return this.quad.v[i + 1].z;
	}
	
	getBlendMode = function () {
		return this.quad.blend;
	}
	
	getHotSpot = function () {
		return this.hotX, this.hotY;
	}
	
	getFlip = function () {
		return this.bXFlip, this.bYFlip;
	}
	
	getWidth = function () {
		return this.width;
	}
	
	getHeight = function () {
		return this.height;
	}
	
	getBoundingBox = function (x, y) {
		var rect = ..hge.rect(x - this.hotX, y - this.hotY, x - this.hotX + this.width, y - this.hotY + this.height);
		return rect;
	}
}

/**intellisense()
hge.sprite(.(纹理,x,y,w,h) = hgeSprite是一个精灵实体的HGE帮助类
?hge.sprite = !hgeSprite.
!hgeSprite.render(.(x,y) = 将精灵渲染到屏幕上
!hgeSprite.renderEx(.(x,y,旋转弧度,水平缩放因子,垂直缩放因子) = 将缩放并旋转后的精灵渲染到屏幕上
!hgeSprite.renderStretch(.(x1,y1,x2,y2) = 将精灵进行伸展后渲染到屏幕上
!hgeSprite.render4V(.(x0,y0,x1,y1,x2,y2,x3,y3) = 将精灵渲染到屏幕上的任意quad中
!hgeSprite.setTexture(__/*纹理*/) = 改变精灵的纹理
!hgeSprite.setTextureRect(.(x,y,w,h) = 设置供精灵使用的纹理区域
!hgeSprite.setColor(__/*颜色*/) = 为指定的顶点或整个精灵设置色彩和透明度
!hgeSprite.setZ(__/*Z序*/) = 	为指定的顶点或整个精灵设置Z序
!hgeSprite.setBlendMode = @.setBlendMode(_BLEND__)
!hgeSprite.setHotSpot(.(x,y) = 设置精灵的锚点
!hgeSprite.setFlip(.(是否水平翻转,是否垂直翻转) = 水平和/或垂直翻转精灵

!hgeSprite.getTexture() = 返回当前精灵的纹理
!hgeSprite.getTextureRect() = 返回精灵使用的当前纹理区域(x,y,w,h四个返回值)
!hgeSprite.getColor() = 返回指定的精灵顶点颜色
!hgeSprite.getZ() = 返回指定的精灵顶点Z序(Z-order)
!hgeSprite.getBlendMode() = 返回当前字体的混合模式
!hgeSprite.getHotSpot() = 返回精灵的锚点(hotX,hotY两个返回值)
!hgeSprite.getFlip() = 返回当前精灵的翻转(flipX,flipY两个返回值)

!hgeSprite.getWidth() = 返回精灵的宽度
!hgeSprite.getHeight() = 返回精灵的高度
!hgeSprite.getBoundingBox(.(x,y) = 返回精灵的边界(hgeRect)
!hgeSprite.getBoundingBoxEx(.(x,y,旋转弧度,水平缩放因子,垂直缩放因子) = 返回精灵的边界(hgeRect)
end intellisense**/