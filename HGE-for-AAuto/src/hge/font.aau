//font 位图字体
namespace hge;

font = class {
	ctor (font, mipmap = false) {
		this.hge = ..hge.createEngine();
		
		with (this) {
			height = 0;
			scale = 1;
			proportion = 1;
			rot = 0;
			tracking = 0;
			spacing = 1;
			texture = null;
			letters = {};
			pre = {};
			post = {};
			
			z = 0.5;
			blend = 0/*_BLEND_COLORMUL*/ | 2/*_BLEND_ALPHABLEND*/ | 0/*_BLEND_NOZWRITE*/;
			col = 0xFFFFFFFF;
		}
		
		var file = ..io.open(font, 'r');
		assert(file, "打开字体描述文件失败!");
		if (cmp(file.read(), "[HGEFONT]", 9)) {
			file.close();
			error("错误的字体描述文件格式!", 2);
		}
		
		var letters = this.letters;
		var line = file.read();
		while (line) {
			do {
				if (!cmp(line, "Bitmap", 6)) {
					var filename = match(line, "Bitmap\s*=\s*(.+)\s*");
					this.texture = this.hge.textureLoad(filename, 0, mipmap);
					if (!this.texture) {
						file.close();
						error(format("加载 %s 失败!", filename), 2);
					}
				}
				elseif (!cmp(line, "Char", 4)) {
					var char, x, y, w, h, a, c = match(line, "Char\s*=\s*(.+),(\-?\d+),(\-?\d+),(\-?\d+),(\-?\d+),(\-?\d+),(\-?\d+)");
					if (!(char && x && y && w && h && a && c)) break;
					x = tonumber(x); y = tonumber(y);
					w = tonumber(w); h = tonumber(h);
					a = tonumber(a); c = tonumber(c);
					if (#char == 3 && char[1] = '"'# && char[3] = '"'#)
						char = char[[2]];
					else
						char = pack((tonumber(char, 16)));
					letters[char] = hgeSprite(this.texture, x, y, w, h);
					letters[unpack(char)] = letters[char];
					this.pre[char] = a;
					this.post[char] = c;
					if (h > this.height) this.height = h;
				}
			} while (0);
			line = file.read();
		}
		file.close();
	}
	
	release = function () {
		this.hge.textureFree(this.texture);
	}
	
	render = function (x, y, align, str) {
		var fx = x;
		
		align &= 0x03/*_HGETEXT_HORZMASK*/;
		if(align === 1/*_HGETEXT_RIGHT*/) fx-=this.getStringWidth(str, false);
		if(align === 2/*_HGETEXT_CENTER*/) fx-=floor(this.getStringWidth(str, false)/2);
		
		var height = this.height;
		var scale = this.scale;
		var spacing = this.spacing;
		var proportion = this.proportion;
		var rot = this.rot;
		var tracking = this.tracking;
		var yStep = floor(this.height*this.scale*this.spacing);
		var letters = this.letters;
		var pre = this.pre;
		var post = this.post;
		for (i = 1; #str) {
			var char = str[[i]];
			if (char === '\n') {
				y += yStep;
				fx = x;
				if(align === 1/*_HGETEXT_RIGHT*/)  fx -= this.getStringWidth(right(string, -i-1), false);
				if(align === 2/*_HGETEXT_CENTER*/) fx -= floor(this.getStringWidth(right(string, -i-1), false)/2);
			}
			else {
				if (!letters[char]) ch = "?";
				if(letters[char]) {
					fx += pre[char]*scale*proportion;
					letters[char].renderEx(fx, y, rot, scale*proportion, scale);
					fx += (letters[char].getWidth()+post[char]+tracking)*scale*proportion;
				}
			}
		}
	}
	
	printf = function (x, y, align, format, ...) {
		this.render(x, y, align, fmt(format, ...));
	}
	
	printfb = function (x, y, w, h, align, format, ...) {
		var str = fmt(format, ...);
		var strOut = { unpack(str) };
		var lineStart = 1;
		var lines = 1;
		for (i = 1; #str) {
			var char = str[[i]];
			if (char !== " " && char !== '\n') continue;
			
			if (char === " ") {
				var ww = this.getStringWidth(sub(str, lineStart, i - 1));
				if (ww > w) {
					strOut[i] = '\n'#;
					char = '\n';
					lineStart = i + 1;
				}
			}
			
			if (char === '\n') {
				lines++;
				lineStart = i + 1;
				continue;
			}
		}
		strOut = pack(strOut);
		var tx = x;
		var ty = y;
		var hh = this.height * this.spacing * this.scale * lines;
		
		select (align & 0x03/*_HGETEXT_HORZMASK*/) {
			case 1/*_HGETEXT_RIGHT*/
				tx+=w;
			case 2/*_HGETEXT_CENTER*/
				tx+=floor(w/2);
		}
	
		select (align & 0x0C/*_HGETEXT_VERTMASK*/) {
			case 4/*_HGETEXT_BOTTOM*/
				ty+=h-hh;
			case 8/*_HGETEXT_MIDDLE*/
				ty+=floor((h-hh)/2);
		}
		
		this.render(tx, ty, align, strOut);
	}
	
	setColor = function (col) {
		this.col = col;
		for (k, v in letters) v.setColor(col);
	}
	
	setZ = function (z) {
		this.z = z;
		for (k, v in letters) v.setZ(z);
	}
	
	setBlendMode = function (blend) {
		this.blend = blend;
		for (k, v in letters) v.setBlendMode(blend);
	}
	
	setScale = function (scale) {
		this.scale = scale;
	}
	
	setProportion = function (prop) {
		this.proportion = prop;
	}
	
	setRotation = function (rot) {
		this.rot=rot;
	}
	
	setTracking = function (tracking) {
		this.tracking = tracking;
	}
	
	setSpacing = function (spacing) {
		this.spacing = spacing;
	}
	
	getColor = function () {
		return this.col;
	}
	
	getZ = function () {
		return this.z;
	}
	
	getBlendMode = function () {
		return this.blend;
	}
	
	getScale = function () {
		return this.scale;
	}
	
	getProportion = function () {
		return this.proportion;
	}
	
	getRotation = function () {
		return this.rot;
	}
	
	getTracking = function () {
		return this.tracking;
	}
	
	getSpacing = function () {
		return this.spacing;
	}
	
	getSprite = function (chr) {
		return this.letters[chr];
	}
	
	getPreWidth = function (chr) {
		return this.pre[chr];
	}
	
	getPostWidth = function (chr) {
		return this.post[chr];
	}
	
	getHeight = function () {
		return this.height;
	}
	
	getStringWidth = function (str, multiline = true) {
		var lineWidth = 0;
		var width = 0;
		var letters = this.letters;
		var pre = this.pre;
		var post = this.post;
		var tracking = this.tracking;
		var factor = this.scale * this.proportion;
		
		for (i = 1; #str) {
			var char = str[[i]];
			if (char === '\r' || char === '\n') continue;
			
			if (!letters[char]) char = "?";
			if (letters[char])
				lineWidth += letters[char].getWidth() + pre[char] + post[char] + tracking;
			
			if (lineWidth > width) width = lineWidth;
			if (!multiline && (char === '\r' || char === '\n')) break;
		}
		
		return width * factor;
	}
}

namespace font {
	cmp = ..string.cmp;
	match = ..string.match;
	trim = ..string.trim;
	left = ..string.left;
	sub = ..string.sub;
	right = ..string.right;
	fmt = ..string.format;
	pack = ..string.pack;
	unpack = ..string.unpack;
	floor = ..math.floor;
	hgeSprite = ..hge.sprite;
}

/**intellisense()
_HGETEXT_LEFT=@0/*_HGETEXT_LEFT*/
_HGETEXT_RIGHT=@1/*_HGETEXT_RIGHT*/
_HGETEXT_CENTER=@2/*_HGETEXT_CENTER*/
_HGETEXT_HORZMASK=@0x03/*_HGETEXT_HORZMASK*/

_HGETEXT_TOP=@0/*_HGETEXT_TOP*/
_HGETEXT_BOTTOM=@4/*_HGETEXT_BOTTOM*/
_HGETEXT_MIDDLE=@8/*_HGETEXT_MIDDLE*/
_HGETEXT_VERTMASK=@0x0C/*_HGETEXT_VERTMASK*/
end intellisense**/

/**intellisense()
hge.font(__/*字体描述文件名*/) = hgeFont是一个使用位图字体渲染文本的HGE帮助类
?hge.font = !hgeFont.
!hgeFont.render(.(x,y,align,str) = 将文本字符串渲染到屏幕上
!hgeFont.printf(.(x,y,align,format,...) = 渲染一个格式化的文本字符串
!hgeFont.printfb(.(x,y,w,h,align,format,...) = 渲染一个格式化的文本字符串到指定的矩形中
!hgeFont.setColor(__/*颜色*/) = 设置字体颜色
!hgeFont.setZ(__/*Z序*/) = 设置字体的Z序(Z-order)
!hgeFont.setBlendMode = @.setBlendMode(_BLEND__)
!hgeFont.setScale(__/*缩放因子*/) = 设置字体的缩放因子
!hgeFont.setProportion(__/*比例*/) = 设置字体的比例(proportion)
!hgeFont.setRotation(__/*弧度*/) = 设置字符的旋转弧度
!hgeFont.setTracking(__/*投影*/) = 设置字体的投影(tracking)
!hgeFont.setSpacing(__/*行间隔*/) = 设置字体行间隔
!hgeFont.getColor() = 返回当前字体的颜色
!hgeFont.getZ() = 返回当前字体的Z序(Z-order)
!hgeFont.getBlendMode() = 返回当前字体的混合模式
!hgeFont.getScale() = 返回当前字体的缩放因子
!hgeFont.getProportion() = 返回当前字体的比例(proportion)
!hgeFont.getRotation() = 返回当前字母的旋转弧度
!hgeFont.getTracking() = 返回当前字体的投影(tracking)
!hgeFont.getSpacing() = 返回当前字体行间隔
!hgeFont.getSprite(__/*字符*/) = 返回指定字母的hgeSprite对象
!hgeFont.getPreWidth(__/*字符*/) = 返回指定字母精灵与前方的偏移量
!hgeFont.getPostWidth(__/*字符*/) = 	返回指定字母精灵与后方的偏移量
!hgeFont.getStringWidth(__/*文本*/) = 返回字符串的宽度，以像素为单位
!hgeFont.getHeight() = 返回字符串的高度，以像素为单位
end intellisense**/