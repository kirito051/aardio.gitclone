//rect 矩形
namespace hge;

rect = class {
	ctor (x1, x2, y1, y2) {
		this.clean = !(x1 && x2 && y1 && y2);
		if (!this.clean) {
			this.x1 = x1;
			this.x2 = x2;
			this.y1 = y1;
			this.y2 = y2;
		}
	}
	
	clear = function () {
		this.clean = true;
	}
	
	isClean = function () {
		return this.clean;
	}
	
	set = function (x1, x2, y1, y2) {
		this.x1 = x1;
		this.x2 = x2;
		this.y1 = y1;
		this.y2 = y2;
		this.clean = false;
	}
	
	setRadius = function (x, y, r) {
		this.x1 = x - r;
		this.x2 = x + r;
		this.y1 = y - r;
		this.y2 = y + r;
		this.clean = false;
	}
	
	encapsulate = function (x, y) {
		if(this.clean) {
			this.x1 = x;
			this.x2 = x;
			this.y1 = y;
			this.y2 = y;
			this.clean = false;
		}
		else {
			if (x < this.x1) this.x1 = x;
			if (x > this.x2) this.x2 = x;
			if (y < this.y1) this.y1 = y;
			if (y > this.y2) this.y2 = y;
		}
	}
	
	testPoint = function (x, y) {
		if(x>=this.x1 && x<this.x2 && y>=this.y1 && y<this.y2) return true;
		
		return false;
	}
	
	intersect = function (rect) {
		if(..math.abs(this.x1 + this.x2 - rect.x1 - rect.x2) < (this.x2 - this.x1 + rect.x2 - rect.x1))
			if(..math.abs(this.y1 + this.y2 - rect.y1 - rect.y2) < (this.y2 - this.y1 + rect.y2 - rect.y1))
				return true;
		
		return false;
	}
}

/**intellisense()
hge.rect(.(x1,y1,x2,y2) = hgeRect是一个HGE用于边界框计算和碰撞检测的帮助类
?hge.rect = !hgeRect.
!hgeRect.clear() = 清除边界框
!hgeRect.isClean() = 测试边界框是否被清除
!hgeRect.set(.(x1,y1,x2,y2) = 在指定的屏幕坐标上设置边界框
!hgeRect.setRadius(.(x,y,r) = 基于中心坐标和弧度设置边界框
!hgeRect.encapsulate(.(x,y) = 将一个点封装进边界框
!hgeRect.testPoint(.(x,y) = 测试一个点是否在边界框内
!hgeRect.intersect(__/*hgeRect*/) = 检测两个边界框是否有交集
end intellisense**/