import win;
import hge.engine; 
namespace hge;

var engineInstance ;
createEngine = function(){
	if(engineInstance)return engineInstance; 
	
	engineInstance  = ..hge.engine()
	
	//设置默认值 
	with engineInstance{
	
		systemSetStateBool(7/*_HGE_SHOWSPLASH*/,false);
		systemSetStateBool(4/*_HGE_USESOUND*/,false); 
		systemSetStateBool(0x18/*_HGE_FPS*/,-1/*_HGEFPS_VSYNC*/ );  
		systemSetStateBool(2/*_HGE_ZBUFFER*/,true);  
		systemSetStateBool(6/*_HGE_HIDEMOUSE*/,false);
		
		windowed();
	}
	
	return engineInstance;
}
 
// HGE Vertex structure
vertex = class {
	float x;
	float y; // screen position 
	float z; // Z-buffer depth 0..1
	INT col; // color
	float tx;
	float ty; // texture coordinates
}

// HGE Triple structure
triple = class {
	struct v[3] = { ..hge.vertex();..hge.vertex();..hge.vertex() };
	pointer tex;
	int blend;
}

// HGE Quad structure
quad = class {
	struct v[4] = { ..hge.vertex();..hge.vertex();..hge.vertex();..hge.vertex() };
	pointer tex;
	int blend;
}

// HGE Input Event structure
inputEvent = class {
	int type; // event type
	int key; // key code
	int flags; // event flags
	int chr; // character code
	int wheel; // wheel shift
	float x; // mouse cursor x-coordinate
	float y; // mouse cursor y-coordinate
}

import ..hge.texture;
import ..hge.sprite;
import ..hge.rect;
import ..hge.font; 

/**intellisense()
hge.createEngine() = 成功返回引擎对象,失败返回空\n!hgeEngine.
end intellisense**/
