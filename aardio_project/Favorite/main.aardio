import win.ui;
import win.ui.menu;
import win.util.tray;
import thread.command;
import string.list;
import process.file;
import thread.manage;
//////////////////////////////////////////////////
/*DSG{{*/
mainForm = win.form(text="收藏夹链接有效性分析";right=848;bottom=511;border="thin";max=false)
mainForm.add(
btn1={cls="button";text="开始解析";left=629;top=8;right=725;bottom=40;z=1};
btn2={cls="button";text="另存为..";left=731;top=8;right=795;bottom=40;disabled=1;z=4};
btn3={cls="button";text="清理";left=800;top=8;right=839;bottom=40;z=5};
edit={cls="edit";text="双击选择收藏夹清单文件(html)";left=8;top=8;right=624;bottom=40;acceptfiles=1;autohscroll=false;autovscroll=false;bgcolor=16777215;edge=1;font=LOGFONT(h=-17);readonly=1;z=3};
log={cls="edit";left=0;top=48;right=848;bottom=512;ah=1;aw=1;bgcolor=16777215;border=1;edge=1;font=LOGFONT(h=-13);hscroll=1;multiline=1;readonly=1;vscroll=1;z=2}
)
/*}}*/

//////////////////////////////////////////////////
var favfile =""; //解析的html文件路径
var is_check = false; //正在解析
var doing_times=0; //一个简单的计时器
var doing_check_img={ "" ;  "." ; ".." ; "..." ; "...." ;"....." ;"......" ; "......."  }; //
var mainForm_title=mainForm.text; //默认标题
var tray=null;//托盘图标
//////////////////////////////////////////////////
///获取启动参数 ,格式：'姓名=张三 年龄=123'
var args = string.list( _CMDLINE ," "); //获取 args.姓名=张三
thread.set("debug", tostring(args.debug) );
thread.set("manage_threads", tonumber(args.thread):10 );
thread.set("test_url",args.test_url:"http://bbs.aardio.com" );
// thread=10 test_url=http://bbs.aardio.com
//////////////////////////////////////////////////
//if( process.file.find(..io._exepath) ){
 //    mainForm.msgboxErr("已经在运行");
 //    return ;
//}
//////////////////////////////////////////////////

listener = thread.command(); //
//////////////////////////////////////////////////
_DEBUG_=function(){	return ..string.cmpMatch( "true" , thread.get("debug") ) ;}
//////////////////////////////////////////////////
make_tray_if_not=function(){
	if(!tray) tray = win.util.tray(mainForm) //创建托盘图标 
	tray.tip = mainForm_title//设置鼠标提示  
}
//////////////////////////////////////////////////
/**格式化日期**/
tm = function(tt) {
    return tostring(tt, "%m/%d %H:%M:%S", "chs");
}
//////////////////////////////////////////////////
/**打印日志**/
printlog = function(str, printer) {
    printer.log(tm(time.now()), " ", str, '\r\n');
}
//////////////////////////////////////////////////
/**日志打印处理器**/
listener.print = function(str) {
    printlog(str, mainForm.log);
}
//////////////////////////////////////////////////
save_txt=function(path){
	save_ok=false;
	can_save=false;
	txt=mainForm.log.text;
	path_ok=..io.exist(path);
	if(!#txt) return ;
	if(!#path_ok){//路径不存在，可以直接保存
		can_save=true;
	}else{ //已经存在
		var over=mainForm.msgboxTest("文件已存在，是否覆盖？") ;
		if(over){ can_save=true; }
	}
	if(can_save){
		save_ok=..string.save(path,txt ) ; 
		msg= "保存 "++path  ++" , "++ (!!save_ok?"ok":"error") ;
    	thread.command.post("print", msg );
    	thread.command.post("print", "" );
	}
}
//////////////////////////////////////////////////
open_html=function(){
	import fsys.dlg ;
	var str= fsys.dlg.open("html|*.html;*.htm") ;
	if(#str){
        favfile=..string.trim(str);
		mainForm.edit.text=favfile;
	}
	return str||"" ;
}
//////////////////////////////////////////////////
/**解析器**/
listener.check = function() {
    checkthread = thread.invoke(function(hwnd, favfile) {
        import win;
        import console;
        import inet.http;
        import thread.command;
        import thread.manage;
        //////////////////////////////
		var tables={oks=0;errs=0;};
		listener = thread.command();
		listener.oks = function(int) { tables.oks+=1;}
		listener.errs = function(int) { tables.errs+=1;}
        //////////////////////////////
		_DEBUG_=function(){	return ..string.cmpMatch( "true" , thread.get("debug") ) ;}
        //////////////////////////////
		var thrdFunc = function(ahref){
        	import console;
        	import inet.http;
        	import thread.command;
        	///console.log(ahref);
        	loger = function(str) {
            	thread.command.post("print", str);
        	}   
        	try{      
        		var http=inet.http();
        		var ok,html,status=http.get(ahref);   		
        		if(!!#ok){
        			//console.log(ahref,status);
        			thread.command.post("oks", 1);
        		}else{
        			loger(status++" | "++ahref);
        			thread.command.post("errs", 1);
        		}
        	}
        	catch(e){
        		loger(status++" | "++ahref);
        		thread.command.post("errs", 1)
        	}
        	
		}
        ////////////////////////////// 
        
        /**日志异步处理器(异步)**/
        loger = function(str) {
        	import thread.command;
            thread.command.post("print", str);
        }
        ////////////////////////////// 
        do_check=function(favfile){	
        	qqq=0;	
        	loger("收藏夹："++favfile);
        	html=string.load(favfile );	
			for href in ..string.gmatch(html,'<@@href="@>(.+?)<@"@>')  {
        		if(!..string.startWith(href,"htt")) continue;
				//if( qqq > 5 )  break;
        		manage.create( thrdFunc, href );
				qqq+=1;			
			}
        }
        //////////////////////////////
        //检查网络
        test_net=function(){
        	var httpoks=inet.http();
        	//if(_DEBUG_) console.log(  thread.get("test_url") );
        	var ok,html,status=httpoks.get( thread.get("test_url") ); 
        	return !!ok;         	
        }
        //////////////////////////////        
        //if(_DEBUG_) console.log("");
        loger("开始分析..");
        //////////////////////////////        
        if(!test_net()){ /// error 
        	loger("网络错误。"); 
        }else{ ///      
        	//if(_DEBUG_) console.log(  tonumber( thread.get("manage_threads") ) );
        	manage = thread.manage( tonumber( thread.get("manage_threads") ) ); //是不是获取不到？   
        	sleep(200);
        	do_check(favfile);
        	sleep(200);
        	manage.waitClose();
        	sleep(200); 
			loger("总计："++qqq ++" , 无效链接："++tables.errs ++" , 有效："++tables.oks); 
        }
        loger("分析结束");
        sleep(200); 
        thread.set("is_check", ); //弄一个结束标志
    }, listener.hwnd, favfile);
}
//////////////////////////////////////////////////
start_check = function() {
    //创建工作线程,线程内错误信息默认输出到控制台
    thread.invoke(function() {
        //必须在线程函数内部导入需要的库
        import thread.command;
        thread.set("is_check", "is_check"); //弄一个开始标志
        thread.command.check();
    })
}
//////////////////////////////////////////////////
///单击清理。
mainForm.btn3.oncommand = function(id,event){
	is_check = thread.get("is_check");
    if (#is_check) {
        mainForm.msgbox("正在解析，不能清理") ;
    }else{
		var onClose_over=mainForm.msgboxTest("要清理信息？") ;  
		if(!!onClose_over) { 		
        	mainForm.btn2.disabled=true;
        	mainForm.log.text="";
        	mainForm.edit.text="";
        	favfile="";
        }
    }
}

//////////////////////////////////////////////////
///单击解析..
mainForm.btn1.oncommand = function(id, event) {
    var str=mainForm.edit.text;
    if(!#str){  //没有内容
    	str=open_html();
    	if(!#str){return ;}
   	}          
    if(..string.endWith(str,"HTML",true ) || ..string.endWith(str,"HTM",true ) ){
        //ok ..
    }else{ 
        // 需选择html文件
    	str=open_html();
    	if(!#str){return ;}
    }
    
    mainForm.btn1.disabled = true; ///
    is_check = thread.get("is_check");
    if (#is_check) {
        mainForm.msgbox("正在解析")
    } else {
        make_tray_if_not(); 
		tray.pop("开始解析..", mainForm_title ) ; 
        mainForm.btn2.disabled=false;
        start_check();
    }
    sleep(10);
    mainForm.btn1.disabled = false; ///
}
//////////////////////////////////////////////////

///双击选择html
mainForm.edit.wndproc = function(hwnd,message,wParam,lParam){
    select(message) { //判断消息类型 
        case 0x0203 /*_WM_LBUTTONDBLCLK; 双击左键 */ {  
			//无返回值则继续调用默认回调函数
			is_check = thread.get("is_check")
    		if (#is_check) {
        		//mainForm.msgbox("正在解析")
        		return ; 
    		}else{
				open_html();
    		}
        }
    }
}
//////////////////////////////////////////////////
///单击另存为..
mainForm.btn2.oncommand = function(id,event){
    import fsys.dlg ;
	is_check = thread.get("is_check");
    if (#is_check) {
        mainForm.msgbox("正在解析")
        return ; 
    }    
	var path = fsys.dlg.save('文件文件(.txt)|*.txt||',,,mainForm,,"无效链接.txt");
	if(path){ 
		save_txt(path);
	}
}

//////////////////////////////////////////////////
mainForm.setInterval(
	400,function(){
		// 定时执行参数@2指定的回调函数,参数@1指定间隔毫秒数
		is_check = thread.get("is_check");
		if (#is_check){ 
			doing_times+=1;  
			mainForm.text=mainForm_title ++ " " ++  tostring(doing_check_img[ 1 + (doing_times % #doing_check_img)  ] ) ;
		} else {
			mainForm.text=mainForm_title ;
		}
	}
);
//////////////////////////////////////////////////
mainForm.onClose = function(hwnd,message,wParam,lParam){
    var onClose_over=true;
	is_check = thread.get("is_check");
    if (#is_check) {  onClose_over=mainForm.msgboxTest("正在解析,是否退出？") ;   }
    if(!onClose_over) { return false; } 
    mainForm.popmenu.close();
}
//////////////////////////////////////////////////
mainForm.onMinimize = function(lParam){
    make_tray_if_not(); 
	tray.pop(mainForm_title,"") ; 
	mainForm.show(false); //隐藏窗口
	return true;//阻击默认消息传递,取消最小化过程
}
//////////////////////////////////////////////////
mainForm.wndproc = {
	[0xACCF/*_WM_TRAYMESSAGE*/ ] = function(hwnd,message,wParam,lParam){
		if( lParam = 0x205/*_WM_RBUTTONUP*/ ){ 
	    	var pt = ::POINT();
			::User32.GetCursorPos(pt);   		    	
	    	//弹出托盘菜单以前,一定要前置主窗口中,不然不点击菜单不会消失
	    	win.setForeground(mainForm.hwnd)
	    	mainForm.popmenu.popup(pt.x,pt.y,true )
	    }else if( lParam = 0x0203/*_WM_RBUTTONUP*/ ){  	    	
	    	//win.setForeground(mainForm.hwnd)
	    	mainForm.show(true);
	    }
	}
}
//////////////////////////////////////////////////
mainForm.popmenu = win.ui.popmenu(mainForm);//创建弹出菜单
mainForm.popmenu.add('打开..',function(id){ mainForm.show(true);});
mainForm.popmenu.add();//分隔线
mainForm.popmenu.add('退出',function(id){ mainForm.close() })	
//////////////////////////////////////////////////
mainForm.show();
return win.loopMessage()
///////////////////////////////////////////////////