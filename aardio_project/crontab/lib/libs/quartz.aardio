//quartz 定时任务

namespace libs


namespace quartz{
	import thread;
	import thread.command;
	var listener = thread.command(); 
		
	listener.jvm = function(  ){
		import java; 
		import java.jre.v6;
   		import console;
   		console.open();
		
		//import win;
//win.setenv("JAVA_HOME","C:\Program Files\Java\jdk1.6.0_45"); //可以在导入JAVA支持库以前手动指定绿色版JDK目录
//win.setenv("JRE_HOME","C:\Program Files\Java\jre7"); //可以在导入JAVA支持库以前手动指定绿色版JRE目录
// or 
		 //java.path.setJreHome( .. )
		 
		java.addClassPath(..io.fullpath("~/libs/"));
		//var jvm = java();		

		var prcs = java.popenProcess( 
		//	"-verbose:class",//记录类载入信息
			"-jar",//运行jar
			..io.fullpath( "~\lib\java\yuiCompressor\.res\yuicompressor.jar" ),
			"d:\test.js"
		); 
 		

		var tOutBuffer = {}; 
		for( all,out,err in prcs.each() ){
    		console.log( out,err );
    		..table.push( tOutBuffer,all);
		}
		
		
		//在输出结果中搜索类加载信息
		var outBuffer = ..string.join( tOutBuffer );
		var logClass = {}
		for classPath,filePath in ..string.gmatch(outBuffer 
			,"\[Loaded\s+(.+?)\s+from\s+([^\]]+)" ) { 
			logClass[classPath] = filePath;
		}
		
		//这个就是得到的结果了
		for(classPath,filePath in logClass){
			console.log(classPath) 
			console.log( " =>",..fsys.shortpath(filePath),'\n' ) 
		}

		 		

	}
}

class quartz{
	ctor( ){
	}

	threadFun = function(){ 
		import thread;
		import thread.command;			
		thread.command.jvm(); 
		
		/*
import thread;
		import thread.command;	
		do{ 		
			thread.command.jvm(); 
			sleep(1000)
		}while((thread.get("quartz"):false))
*/
	}
	stop = function(){ 
		thread.set("quartz", true); 
	}

	start = function(){ 
   		import console;
		import thread;
		import thread.command;
		console.log("quartz 定时任务 start");	
		thread.set("quartz", true);   	
		thread.invoke(
			function(that){
				that.threadFun()  
			},this
		)		
 	}	
}