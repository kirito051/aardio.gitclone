//嵌入electron
import win.ui;
/*DSG{{*/
var winform = win.form(text="在aardio中嵌入electron";right=1276;bottom=767;bgcolor=16777215;border="none";clipch=1)
winform.add(
custom={cls="custom";text="custom";left=3;top=-2;right=1273;bottom=760;bgcolor=16777215;db=1;dl=1;dr=1;dt=1;z=1}
)
/*}}*/

import electron.runtime;
import electron.app;

import inet.http;
import web.json;
import console;
import ustring;
import win.clip;

var theApp = electron.app()
//io.open();

var globalData ={
}
// 在JS中require('aardio')就可以使用下面的external对象
theApp.external = {  

    baseInfo = function(){
        
    	var json= {};
    	json["title"] = "baseTitle";
    	json["msg"] = "success";
    	
    	return json;
    }

    
    $onLoadUrl = function($,url){
       // 加载一个页面完成都会触发这个事件
       ..io.print($,url);
    }
    
    // 如果函数名第一个字符是$，则第一个回调参数$用于表示当前RPC客户端,可作为xcall的参数使用
    $onWebViewDomReady = function($,url){ 
       if( string.indexOf(url,"&q=") ) return;
       
       var js = /*
       	var webview = document.getElementById("view");
       	webview.executeJavaScript(`
       		document.querySelector("#input").value = "https://electronjs.org/docs/api/webview-tag";
       		document.querySelector("#search-button").click();
       	`)
       */
       
       //electron当前页面执行js脚本
       theApp.doScript($,js); 
       
       //也可以这样调用js中使用aardio.on注册的事件函数
       /*
       theApp.xcall($,"executeJavaScript",`
       		document.querySelector("#input").value = "https://electronjs.org/docs/api/webview-tag";
       		document.querySelector("#search-button").click();
       `);
       */
    }  
    
    commonData = function(url){
  	
		var data = inet.http().get(url);
		
		return web.json.tryParse(data); 	
	
    }
    
	listFont = function(){
    	var res = biz.listFont();
    	globalData['fontdata'] = res;
    	return biz.die('success',1,res);
    }
    updateCommonCss = function(fontName){
        var css = /**
        	html,
			body {
    			font: bold 12px/20px "%s"
			}
        **/
        var item ;
    	for(k,v in globalData['fontdata']){
    		if(v['fontName']==fontName){
    			item = v;
    			break ;
    		}    	
    	}
    	name = "--"
    	if(item){
    		fontName = string.lower(fontName)
    		var body = string.load("/html/css/"+fontName+".css");
    		body = ..string.replace(body,"'",'"');
    		body = ..string.replace(body,"\s+","");
    		pattern = `font-family\:"([^"]*)";src\:url`;
    		name = ..string.match(body,pattern);
    	}
        css = ..string.format(css,name||"--")
    	..string.save("/html/css/common.css",css);
    	return biz.die(name,1,item);
    }
    
    formatUnicodeChars = function(fontName){
        var html ="";
        var item ;
    	for(k,v in globalData['fontdata']){
    		if(v['fontName']==fontName){
    			item = v;
    			break ;
    		}    	
    	}
    	for(i=1;#item.fontUnicodeChars/2;1){    		
    		html +="<a name='fontAwesome' href='javascript:void(0);' charvalue ='"+item.fontUnicodeChars[i]+"' >&#"+item.fontUnicodeChars[i]+";</a>";
      		html +='\r\n';
    	}
    	
    	var cssFontAwesome = {};
		fontName = string.lower(fontName);
		pattern = `\.(\w*\-[\w\:\-]+)\s*\{\s*content\:\s*"(.+?)"`;
		for k,v in string.gmatch(string.load("html\css\"+fontName+".css"),pattern) { 
			
			v = string.upper(v);
			v = string.replace(v,"\\","\\u");
			v = string.replace(v,"\\u5","\\uF");
			cssFontAwesome[v] = k;	
		}		
		globalData['cssFontAwesome']= cssFontAwesome;
    	return html;
    }
    
    clickFont = function(chr){
        chr = tonumber(chr)
    	var str = ustring.fromCharCode(chr);
    	str = string.escape(str,true,true);
    	cssFontAwesome = globalData['cssFontAwesome']
    	var css = cssFontAwesome[str];
    	if(css) {
    		css = string.replace(css,"\:before","");
    		css = string.replace(css,"\:after","");
    	}
		var res ="转义字符：" + str+ (css? " css:"+css :"");		
		win.clip.write(res);
		res +=" 已拷贝";	
		return biz.die(res,1,css);
    }
    
    mouseover = function(chr){
        chr = tonumber(chr)
    	var str = ustring.fromCharCode(chr);
    	str = string.escape(str,true,true);
    	cssFontAwesome = globalData['cssFontAwesome']
    	var css = cssFontAwesome[str];
    	if(css) {
    		css = string.replace(css,"\:before","");
    		css = string.replace(css,"\:after","");
    	}    	
		var res ="转义字符：" + str+ (css? " css:"+css :"");
			
		return biz.die(res,1,css);;
    }   
}


// 接收node.js的函数返回值
theApp.callback("main.hello",function(hSocket,result,err){
	
})

// electron窗口准备就绪会触发这个函数
theApp.onReady = function(hwndElectron){
	theApp.xcall("main.hello","aardio"); 
}

// WebSocke/RPC中遇到的错误都会触发这个函数,可以在这里自定义错误处理方式
theApp.onError = function(hSocket,err){
	errput(err,"electron/rpc error");//当然也可以在 global.onError 里自定义全部的错误信息怎么显示
}

// electron主进程退出触发此事件
theApp.onQuit = function(){
	win.quitMessage();
}
import biz;

theApp.start({

    /* 指定首页地址,必须指定,
     * 如果作为参数传入io.localpath(indexUrl)会返回true,则表示相对于应用程序根目录的路径，支持嵌入资源
     * 如果路径以".\"或"./"开始则表示相对于主进程根目录的路径
     */
    //indexUrl = "/res/index.aardio";
    indexUrl = "/html/index.html";
	
    
    // 可以自定义要加载的chrome扩展,扩展需要解压并放在工程资源目录下（目录名最好不要与别人冲突）
    // extensions = { "\some-chrome-extension" };
    
    /* 创建窗口参数,可以不指定 */
    browserWindow = {
        width = 800;
        height = 850;
        //minWidth = 1300;
        //minHeight = 850;
        frame = false;
        webPreferences = {};
    };
    
    /* 启动参数,可以不指定 */
    args = {
        
    };
    

    
}) 


win.loopMessage();