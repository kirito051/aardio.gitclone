//slice9 9宫格切片
import hge;
namespace hge.interFace;
slice9 = class {
	ctor( game ,tex ,x,y,w,h ){
		this.x,this.y = 0,0;
		var tw,th = tex.width(true),tex.height(true)
		this.spr_lst = {
			game.sprite(tex,0,0,x,y);//左上;
			game.sprite(tex,x,0,w,h);//中上;
			game.sprite(tex,x+w,0,tw-(w+x),y);//右上;
			game.sprite(tex,0, y, x, h);//中左
			game.sprite(tex,x, y, w, h);//中中
			game.sprite(tex,x+w, y, tw-(w+x), h);//中右
			game.sprite(tex,0, y+h, x, th-(y+h)); //左下
			game.sprite(tex,x, y+h, w, th-(y+h)); //中下
			game.sprite(tex,x+w, y+h, tw-(w+x), th-(y+h)); //右下
		}
		this@ = $;
		this.refresh();	
	};
	
	render = function(x,y){
		for(i=1;#this.spr_lst;1){
			this.spr_lst[i].render(x,y)	
		}
	}
	setScale = function(w,h){
		if(w){
			var width = this.spr_lst[2].width;
			var ws = w/width;
			this.spr_lst[2].hscale = ws;
			this.spr_lst[5].hscale = ws;
			this.spr_lst[8].hscale = ws;
		}
		if(h){
			var height = this.spr_lst[5].height;
			var hs = h/height;
			this.spr_lst[4].vscale = hs;
			this.spr_lst[5].vscale = hs;
			this.spr_lst[6].vscale = hs;
		}
		this.refresh()	
	}
	
	showSlice = function(col){
		col := ..hge.color.rgba(74,255,255);
		game.renderLine(this.spr_lst[2].x,this.spr_lst[2].y,this.spr_lst[8].x,this.spr_lst[8].y+this.spr_lst[8].height,col)
		game.renderLine(this.spr_lst[3].x,this.spr_lst[3].y,this.spr_lst[9].x,this.spr_lst[9].y+this.spr_lst[9].height,col)
		game.renderLine(this.spr_lst[4].x,this.spr_lst[4].y,this.spr_lst[6].x+this.spr_lst[6].width,this.spr_lst[6].y,col)
		game.renderLine(this.spr_lst[7].x,this.spr_lst[7].y,this.spr_lst[9].x+this.spr_lst[9].width,this.spr_lst[9].y,col)
		return true; 
	}
}

namespace slice9{
	import util.metaProperty;
	$ = util.metaProperty(
		refresh = function(){
			with owner{
				spr_lst[1].x,spr_lst[1].y = x,y
				spr_lst[2].x,spr_lst[2].y = spr_lst[1].x+spr_lst[1].width,spr_lst[1].y
				spr_lst[3].x,spr_lst[3].y = spr_lst[2].x+spr_lst[2].width*spr_lst[2].hscale,spr_lst[2].y
				spr_lst[4].x,spr_lst[4].y = spr_lst[1].x,spr_lst[1].y+spr_lst[1].height
				spr_lst[5].x,spr_lst[5].y = spr_lst[4].x+spr_lst[4].width,spr_lst[4].y
				spr_lst[6].x,spr_lst[6].y = spr_lst[5].x+spr_lst[5].width*spr_lst[5].hscale,spr_lst[5].y
				spr_lst[7].x,spr_lst[7].y = spr_lst[4].x,spr_lst[4].y+spr_lst[4].height*spr_lst[4].vscale
				spr_lst[8].x,spr_lst[8].y = spr_lst[7].x+spr_lst[7].width,spr_lst[5].y+spr_lst[5].height*spr_lst[5].vscale
				spr_lst[9].x,spr_lst[9].y = spr_lst[8].x+spr_lst[8].width*spr_lst[8].hscale,spr_lst[6].y+spr_lst[6].height*spr_lst[6].vscale
					
			}	
		}
		width = {
			_get = function(){ 
				return owner.spr_lst[2].width*owner.spr_lst[2].vscale;
			}
			_set = function( v ){
				owner.setScale(v)
			} 	
		};
		
		height = {
			_get = function(){ 
				return owner.spr_lst[5].height*owner.spr_lst[5].hscale;
			}
			_set = function( v ){
				owner.setScale(,v)
			} 	
		};
	)
}


/**intellisense()
!hgeGridSlice.render(,(偏移x,偏移y) = 渲染切片
!hgeGridSlice.showSlice(.(颜色) = 显示切片格子
!hgeGridSlice.x = x坐标
!hgeGridSlice.y = y坐标
!hgeGridSlice.width = 设置和返回切片内容部分宽度
!hgeGridSlice.height = 设置和返回切片内容部分高度



end intellisense**/
