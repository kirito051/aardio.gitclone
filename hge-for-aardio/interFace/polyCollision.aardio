//polyCollision 向量积多边形碰撞
import hge;
namespace hge.interFace;
polyCollision = class {
	ctor(game,closed = true,line){
		this = game.base();
		this @= $;
		this.lines = line
		this.closed = closed
		this.color = -16711681;
		this.z = 0.5;
		this.hide = true;
		if(closed){
			..table.push(this.lines,this.lines[1])
		}
		this.calRect()
	};

	testLine = function(line,offsetX = 0,offsetY = 0){
		if(#line < 2){
			return false; 
		}
		var lines = this.lines
		var re;
		for(i=1;#lines-1;1){
        	re = this.l(
        		lines[i][1]+this.x,
        		lines[i][2]+this.y,
        		lines[i+1][1]+this.x,
        		lines[i+1][2]+this.y,
        		line[1][1]+offsetX,
        		line[1][2]+offsetY,
        		line[2][1]+offsetX,
        		line[2][2]+offsetY
        		)
        		
        		if re return true,i; 
        		
            }
		return false; 
	}
	addLine = function(...){
		if(this.closed){
			return false,"已毕合"; 
		}
		..table.push(this.lines,...)
		this.calRect()
		return true; 
		
	}
	close = function(){
		if(this.closed){
			return false,"已毕合"; 
		}
		..table.push(this.lines,lines)
		this.calRect()
		return true; 
	}
	open = function(){
		if(this.closed){
			..table.remove(this.lines,-1)
			this.calRect()
			return true; 
		}
		return false,"已打开"; 
	}
	getRect = function(){
		return this.calRect();
	}
	
	testPoly =function(obj){ 
		if(this.rect.intersect(obj.rect)){
			var re,myIndex;
			for(i=1;#obj.lines-1;1){
				re,myIndex = this.testLine({obj.lines[i];obj.lines[i+1]},obj["x"],obj["y"])
				if(re){
					if this.onCollision this.onCollision(obj,obj.lines[i],obj.lines[i+1],this.lines[myIndex],this.lines[myIndex+1])
					return true; 
				}
			}
		}
		return false; 
	}

	onRender = function(ox = 0,oy = 0){
		this.rect.render()
		var lines = this.lines
		for(i=1;#lines-1;1){
			..pge.graphics.line(lines[i][1]+this.x+ox,lines[i][2]+this.y+oy,lines[i+1][1]+this.x+ox,lines[i+1][2]+this.y+oy,this.color,this.z)
		}
	}
	onUpdate = function(ox = 0,oy = 0){
		this.rect.x = this.x + ox;
		this.rect.y = this.y + oy;
	}
	
	l = function(x1,y1,x2,y2,x3,y3,x4,y4){
            var line1p1=(x2-x1)*(y3-y1)-(x3-x1)*(y2-y1);
            var line1p2=(x2-x1)*(y4-y1)-(x4-x1)*(y2-y1);
            var line2p1=(x4-x3)*(y1-y3)-(x1-x3)*(y4-y3);
            var line2p2=(x4-x3)*(y2-y3)-(x2-x3)*(y4-y3);
            if ((line1p1*line1p2<=0)&&(line2p1*line2p2<=0)) {
                return true;
            } 
                return false;
	}
	
}

namespace polyCollision{
	$ = ..util.metaProperty(
		 rot = {
            _get = function () {
           		return owner.rotVal; 
            }
            _set = function (v) {
                owner.rotVal = v;
                
            }
        };
        calRect = function(){
			var lines = this.lines;
			var minX,minY =  lines[1][1],lines[1][2];
			var maxX,maxY =  lines[1][1],lines[1][2];
			for(i=1;#this.lines;1){
					minX = minX<lines[i][1]? minX : lines[i][1]
					minY = minY<lines[i][2]? minY : lines[i][2]
					
					maxX = maxX>lines[i][1]? maxX : lines[i][1]
					maxY = maxY>lines[i][2]? maxY : lines[i][2]
			}
			owner.x = minX;
			owner.y = minY;
		
			for(i=1;#this.lines;1){
				owner.lines[i][1] -= this.x
				owner.lines[i][2] -= this.y
			}
			owner.x = 0,owner.y = 0;
			owner.width = maxX-minX;
			owner.height = maxY-minY;
		}
	
	)
}


/**intellisense()



!pgeCollision.testLine(线条数组) = 检测线条碰撞
!pgeCollision.testPoly(.(碰撞对象) = 碰撞对象检测
!pgeCollision.render() = 渲染
!pgeCollision.update() = 更新
!pgeCollision.getRect() = 取矩形范围
!pgeCollision.addLine(.(线条) = 添加线条,只能在没有封闭的状态下添加
!pgeCollision.open() = 打开封口,方便添加线条
!pgeCollision.close() = 闭合线条。
!pgeCollision.hide = 隐藏
!pgeCollision.x = x坐标
!pgeCollision.y = y坐标
!pgeCollision.color = 线条颜色
end intellisense **/