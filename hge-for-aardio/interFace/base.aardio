//base 拥有子节点属性基类
namespace hge.interFace;

class base{
	ctor( game ){
		this.lst = {};//子对象列表
		this.collisionLine = {};
		this.listens = {};//监听事件
		this.keyListens = {};
		this.listenNames ={};
		this.doModal = false;
		this.display = true;
		this.disable = true;
		this.x = 0;
        this.y = 0;
        this.width = 0;
        this.height = 0;
        this.offsetX = 0;
        this.offsetY = 0;
        this.enbaleKeyEvent = true;
        
	};
	addChild = function(child,n){
		var p = this.parent;
		child.parent = this;
		if( p ){
			this.offsetX = p.x + p.offsetX;
			this.offsetY = p.y + p.offsetY;
		}
		if(n){
			insert(this.lst,child,n);
		}else {
			push(this.lst,child);
		}
		if(game.event){
			game.event("addChild",child,true);
		}
		this.event("addChild",child,true);
		return child;
		
	}
	calCollisionRect = function(){
		if !#this.collisionLine return false; 
		var lines = this.collisionLine;
		var minX,minY =  lines[1][1],lines[1][2];
		var maxX,maxY =  lines[1][1],lines[1][2];
		for(i=1;#lines;1){
				minX = minX<lines[i][1]? minX : lines[i][1];
				minY = minY<lines[i][2]? minY : lines[i][2];
				
				maxX = maxX>lines[i][1]? maxX : lines[i][1];
				maxY = maxY>lines[i][2]? maxY : lines[i][2];
		}
		lines.x,lines.y,lines.w,lines.h = minX,minY,maxX-minX,maxY-minY; 
		return true;
	}
	
	testPoly =function(obj){ 
		if(this._collisionRectTest(obj)){
			var x,y = obj.formWindowPos();
			var lines = obj.collisionLine;
			var re,myIndex;
			for(i=1;#lines-1;1){
				re,myIndex = this.testLine({lines[i];lines[i+1]},x,y)
				if(re){
					//if this.onCollision this.onCollision(obj,obj.lines[i],obj.lines[i+1],this.lines[myIndex],this.lines[myIndex+1])
					return true; 
				}
			}
		}
		return false; 
	}
	setCollision = function(lines){
		this.collisionLine = lines;
		if(lines){
			this.calCollisionRect();
		}
	}
	
	_collisionRectTest = function(cosl2){
		if(!#this.collisionLine : !#cosl2.collisionLine ){
			return false; 
		}
		var x,y = this.formWindowPos();
		var x2,y2 = cosl2.formWindowPos();
		var cosl = this.collisionLine;
		var obj = cosl2.collisionLine;
		if (cosl.x + cosl.w > obj.x &&
        	obj.x + obj.w > cosl.x &&
        	cosl.y + cosl.h > obj.y &&
        	obj.y + obj.h > cosl.y
		) return true;
	
		return false;
	}
	
	_l = function(x1,y1,x2,y2,x3,y3,x4,y4){
        var line1p1=(x2-x1)*(y3-y1)-(x3-x1)*(y2-y1);
        var line1p2=(x2-x1)*(y4-y1)-(x4-x1)*(y2-y1);
        var line2p1=(x4-x3)*(y1-y3)-(x1-x3)*(y4-y3);
        var line2p2=(x4-x3)*(y2-y3)-(x2-x3)*(y4-y3);
        if ( line1p1*line1p2<=0)&&(line2p1*line2p2<=0 )  return true; 
        return false;
	}
	testLine = function(line,offsetX = 0,offsetY = 0){
		if(#line < 2){
			return false; 
		}
		var lines = this.collisionLine;
		var re;
		var tx,ty = this.formWindowPos();
		for(i=1;#lines-1;1){
        	re = this._l(
        		lines[i][1]+tx,
        		lines[i][2]+ty,
        		lines[i+1][1]+tx,
        		lines[i+1][2]+ty,
        		line[1][1]+offsetX,
        		line[1][2]+offsetY,
        		line[2][1]+offsetX,
        		line[2][2]+offsetY
        	)
        		if re return true,i; 
        		
            }
		return false; 
	}
	
	intersect = function (obj) {
		if(!this.width : !this.height) return false; 
		if(..math.abs(this.x*2 + this.width - obj.x - (obj.x + obj.width)) < (this.width  +  (obj.x + obj.width) - obj.x)){
			if(..math.abs(this.y + this.y+this.height - obj.y - (obj.x + obj.height)) < (this.y+this.width - this.y + (obj.x + obj.height) - obj.y)){
				return true;
			}
		}
		return false;
	}
	tween = function(m1,m2,t,f){//补间动画
		var t2 =60*t/1000;
		var tick,data = 0,{};
		for(k,v in m2){ //先计算出增量
			if(this[k] !== null && m1[k] !== null  ){
				data[k] =  ( m2[k]-m1[k] ) / t2 ;
			}
			this[k] = m1[k];
		}
		this.on(,function(){
			tick++;
			for(k,v in data){
				this[k] += v;
			}
			if(tick >= t2){
				for(k,v in data){
					this[k] = m2[k];
				}
				..hge.caller(f)
				return false; 
			}

		})
		
	}
	tweenLine = function(lines,speed,f){//按线路径移动
		
		
		
		
		
		
		
	}
	
	removeChild = function(child){
		var index = this.getZorder(child);
		if(index) remove(this.lst,index);
		if(game.event){
			game.event("removeChild",child,true);
		}
		child.event("remove",,true);
		return child,index; 
	}
	removeAll = function(){
		each(this.lst,function(obj) { obj.event("remove",,true);} )
		this.lst = {};
	}
	testPoint = function(x,y){
		if(!this.width : !this.height){
			return false; 
		}
		var ox,oy = this.formWindowPos();
		if(x>=ox && x<ox+this.width && y>=oy && y<oy+this.height) {
			return true,x-ox,y-oy;
		}
		 return false; 
	}


	update = function(){
		if !this.display : !this.disable  return ;
		var p = this.parent;
		if(p){
			this.offsetX = p.x + p.offsetX;
			this.offsetY = p.y + p.offsetY;
		}
		each(this.lst,function(obj) { caller(obj.update)} )
		this.event(1/*_hge_event_update*/);
	}


	
	formWindowPos = function(){
		return this.offsetX+this.x,this.offsetY+this.y; 
	}
	formClientPos = function(){
		return this.x,this.y; 
	}
	close = function(){
		if(this.parent) this.parent.removeChild(this)
	}
	showRect = function(b){
		if(b){
			this.on(2/*_hge_event_render*/,function(){
				game.renderRect(this.x + this.offsetX, this.y + this.offsetY,this.width,this.height,-16711681);
			},"showRect"
			)
		}else {
			this.off(2/*_hge_event_render*/,null,"showRect")
		}
	}
	
	on = function(flag = 1/*_hge_event_update*/,f,name){
		if( f && flag ){
			if(name && this.listenNames[name]){
				var index = find(this.listens[flag],this.listenNames[name]);
				this.listens[flag][index] = f;
				return ; 
			}
			this.listens[flag]:= {};
			push(this.listens[flag],f);
			if(name) this.listenNames[name] = f;
			
		}
		return this; 
	}
	off = function(flag,f,name){
		if(name && this.listenNames[name]){
			f = this.listenNames[name];
		}
		var ls = this.listens[flag];
		if(type(ls) == type.table && f){
			var index = find(ls,f);	if index remove(ls,index);
		}
		return this; 
	}
	eachChild = function(f){
		each(this.lst,function(obj) caller(f,obj));	
		return this; 
	}
	keyOn = function(keyCode,f){
		if(type(keyCode) == type.string){
			keyCode = key.getCode(keyCode);
		}
		if f&&keyCode this.keyListens[keyCode]:= {};push(this.keyListens[keyCode],f);
		return this; 
	}
	keyOff = function(keyCode,f){
		var ls = this.keyListens[keyCode];
		if(type(ls) == type.table && f){
			var index = find(ls,f);	if ( index ) remove(ls,index);
		}
		return this; 
	}
	
	getChildCount = function(){
		return #this.lst; 
	}
	
	setZorder = function(child,z){//调整顺序
		z = (z==-1)?#this.lst:z;
		if !child && this.parent return this.parent.setZorder(this,z)
		var child,index = this.removeChild(child);insert(this.lst,child,z);
	}
	getZorder = function(child){
		if !child && this.parent return this.parent.getZorder(this)
		return find(this.lst,child);
	}
	render = function(){
		if !this.display  return ;
		each(this.lst,function(obj) caller(obj.render) ) 
		this.event(2/*_hge_event_render*/);
	}
	keyEvent = function(keycode){
		if( this.enbaleKeyEvent === false )return; 
		each(this.lst,function(obj) caller(obj.keyEvent,keycode));
		each(this.keyListens[keycode],function(f) {   if ( caller(f,keycode) === false)this.keyOff(keycode,f) } )
	}
	pos = function( x ,y ){
		each(this.lst,function(obj) { obj.offsetX = this.x + this.offsetX;  obj.offsetY = this.y + this.offsetY});
	}
	event = function(flag,param,onlyMe = false){
		if(param){
			param.target = this;
		}
		var disable = true;
		if(type(flag) == type.number && flag>2){
			if(flag == 6/*_hge_event_mousedown*/ : flag == 7/*_hge_event_mouseup*/ ){
				if !this.display : !this.disable return ; 
				if (  this.enbaleMouseEvent === false ) return ; 
				if ( this.type != "game" ) {
					var b,cx,cy = this.testPoint(param.mouseX,param.mouseY);
					if(b){
						param.clientMouseX = cx;
						param.clientMouseY = cy;	
					}else {
						disable = false; 
					}
				}
			}
			if(flag == 3/*_hge_event_mousemove*/){
				if !this.display : !this.disable  return ;
				if (  this.enbaleMouseEvent === false ) return ;  
				var b,cx,cy = this.testPoint(param.mouseX,param.mouseY);
				if(b){
					param.clientMouseX = cx;
					param.clientMouseY = cy;
					if(this.enter === false){
						this.event(10/*_hge_event_mousenter*/,param)
					}
					this.enter = true;
				}else {
					if(this.enter === true){
						this.event(11/*_hge_event_mouseleave*/,param)
					}
					this.enter = false;
				}
			}
			if !onlyMe each(this.lst,function(obj) caller(obj.event,flag,param))
		} 
		
		if disable each(this.listens[flag],function(f) {   if ( caller(f,param) === false)this.off(flag,f) } )
	}
	
(
		function(){
			return ; 
			if(_STUDIO_INVOKED){
				this.on(2/*_hge_event_render*/,function(){
						var tx,ty = this.x + this.offsetX,this.y + this.offsetY
						if(this.width && this.height){
							game.renderRect(tx, ty,this.width,this.height,-16711681);
						}

						if(#this.collisionLine){
							var lines = this.collisionLine;
							game.renderRect(lines.x+tx,lines.y+ty,lines.w,lines.h,-16711681);
							for(i=1;#this.collisionLine-1;1){
        						game.renderLine(this.collisionLine[i][1]+tx,this.collisionLine[i][2]+ty,this.collisionLine[i+1][1]+tx,this.collisionLine[i+1][2]+ty,..hge.interFace.color.红)
        						
        					} 
										
						}
						
					},"showRect"
					)		
				}

			}
	)()
	
}
namespace base{
	import hge;
	import key;
	caller = ..hge.caller;each = ..hge.each;
	push = ..table.push;
	find = ..table.find;
	remove = ..table.remove;
	insert =..table.insert;
	unpackArgs =..table.unpackArgs;
}
/**intellisense()

_hge_event_update = @1/*_hge_event_update*/
_hge_event_render = @2/*_hge_event_render*/
_hge_event_mousemove = @3/*_hge_event_mousemove*/
_hge_event_playing = @4/*_hge_event_playing*/
_hge_event_playend = @5/*_hge_event_playend*/

_hge_event_mousedown = @6/*_hge_event_mousedown*/
_hge_event_mouseup = @7/*_hge_event_mouseup*/
_hge_event_keydown = @8/*_hge_event_keydown*/
_hge_event_keyup = @9/*_hge_event_keyup*/

_hge_event_mousenter = @10/*_hge_event_mousenter*/
_hge_event_mouseleave = @11/*_hge_event_mouseleave*/
_hge_event_char = @12/*_hge_event_char*/
end intellisense**/
