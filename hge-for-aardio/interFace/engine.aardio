//engine 游戏引擎
import hge;
import raw.interface;
import util;
import util.metaProperty;
import hge.interFace.base;
import key;
namespace hge.interFace;

class engine{
	ctor (winform){ 
		this =  ..hge.interFace.base( this );
		this.type = "game";
		var base = ..raw.interface( hgeCreate(0x180) , _IHge);  
		..table.mixin( this,base );
		this._stateFunctions = {};
		this.bgColor = -14474461;
		this.mousePos = {x=0;y=0};
		var time_tick = ..time.tick();
		var fps_tick,f = time_tick,0;
		this.dts = 0;
		this.keys = {};
		this.lsts = {};
		this.autoResize = false;
		var mathTime = function(){
			/*上一帧花的时间{{*/
				var t = ..time.tick();
				this.dts = t - time_tick;
				time_tick = t;	
			/*}}*/;
			/*计算fps{{*/
				fps_tick += this.dts;
				if(fps_tick >= 1000){
					this.fps,fps_tick,f = f,0,0;
				}else {
					f++;
				}			
			/*}}*/
		}
		this.textures = {};
		var ps = ::PAINTSTRUCT();
		if( winform.isDialogMessage ){
			if( winform.isDialogMessage!= ..win.isDialogMessage ){
				error("在创建hge窗体以前,禁止重写默认 isDialogMessage() 函数 ",2)
			}
			else{
				winform.isDialogMessage = function(hwnd,msg) {
					return false; 
				}
			}
		};
		
		
		var param = {
			@..util.metaProperty(
				key = {
					_get = function(){ 
						if(owner.keycode){
							return ..string.lower( ..key.getName(owner.keycode) )
						}
						
					}
				};
				
			)
		};
		var last_key_down;
		
		winform.wndproc = function(hwnd,message,wParam,lParam){
			select(message) {
				case 0x200/*_WM_MOUSEMOVE*/ {
					this.mousePos.x,this.mousePos.y = ..win.getMessagePos(lParam);
						param.message = message;
						param.mouseX = this.mousePos.x;
						param.mouseY = this.mousePos.y;
						param.sour = this;
						param.target = this;
					
					this.event(3/*_hge_event_mousemove*/,param);
				}
				case 0x201/*_WM_LBUTTONDOWN*/, 0x204/*_WM_RBUTTONDOWN*/,0x203/*_WM_LBUTTONDBLCLK*/ ,0x204/*_WM_RBUTTONDOWN*/,0x206/*_WM_RBUTTONDBLCLK*/ {
					var btn = {
						[0x201] = 1;
						[0x204] = 2;
						[0x205] = 1;
						[0x206] = 2;
					}
						param.button = btn[message];
						param.message = message;
						param.mouseX = this.mousePos.x;
						param.mouseY = this.mousePos.y;
						param.sour = this;
						
					this.mouse_down = param;
					this.event(6/*_hge_event_mousedown*/,param);
				}
				case 0x202/*_WM_LBUTTONUP*/,  0x205/*_WM_RBUTTONUP*/{
					var btn = {
						[0x202] = 1;
						[0x205] = 2;
					}
					
						param.message = message;
						param.button = btn[message];
						param.mouseX = this.mousePos.x;
						param.mouseY = this.mousePos.y;
						param.sour = this;
						
						
					this.mouse_down = false;
					this.event(7/*_hge_event_mouseup*/,param);
				}
				case 0x5/*_WM_SIZE*/ {
					if(wParam == 0x0/*_SIZE_RESTORED*/){
						var w,h = ::LOWORD(lParam),::HIWORD(lParam)
						if ( this.inited&&this.autoResize ) this.setProjectionMatrix(w,h);
					}
					
				}
				
				case 0x14/*_WM_ERASEBKGND*/, 0xF/*_WM_PAINT*/{
					var hdc,ps = ::BeginPaint(hwnd, ps); ; 
					::EndPaint(hwnd, ps);
					return 1; 
				}

				case 0x100/*_WM_KEYDOWN*/{
					
					if(last_key_down == wParam){
						return false; 
					}
				
						param.message = message;
						param.keycode = wParam;
						
					
						param.sour = this;
						
						
						
					this.keys[wParam] = true;
					this.event(8/*_hge_event_keydown*/,param);
					last_key_down = wParam;
				}
				case 0x101/*_WM_KEYUP*/{
					
						param.message = message;
						param.keycode = wParam;
						param.sour = this;
					
						
						
					this.keys[wParam] = null;
					this.keys[229] = null;
					this.event(9/*_hge_event_keyup*/,param);
					last_key_down = null;
				}
				case 0x6/*_WM_ACTIVATE*/{
					if wParam == 0 this.keys = {};
					
						param.wParam = wParam;
						param.sour = this;
						
						
					this.event(8/*_hge_event_active*/,param);
				}
				case 0x102/*_WM_CHAR*/ ,0x286/*_WM_IME_CHAR*/{
					
						param.message = message;
						param.wParam = wParam;
						param.param = param;
						param.sour = this;
						
						
					this.event(12/*_hge_event_char*/,param);
				}
				
			}
		
		}	

		var tmId = winform.addtimer( 
			1,
			function(hwnd,msg,id,tick){
				//mathTime();
				caller(this.update)
				for(k,v in this.keys) this.keyEvent(k);
				if (this.mouse_down) this.event("mouse_on",this.mouse_down)
				if( this.render ){
					this.gfxBeginScene();
					this.clear(this.bgColor)
					this.render()
					this.gfxEndScene(); 
				}
				
			} 
		)

		winform.add(
			s_ ={cls="static";text="static";left=0;top=0;right=0;bottom=0;hide=1;transparent=0;z=1}
		)
		..table.add_gc(this,"release" );
	};

	textureLoad = function (filename, size = 0, bMipmap = false ) {
		if this.textures[filename] return this.textures[filename]; 
		var f = ..string.load(filename)
		if(f) { this.textures[filename] = this.textureLoadByString(f);return this.textures[filename]}
		return false; 
	};
	textureLoadByZip = function (filename, size = 0, bMipmap = false ) {
		if this.textures[filename] return this.textures[filename]; 
		var t = base.textureLoad(..hge.utf2asc( filename ),size, bMipmap);
		if( t ) {  this.textures[filename] = this.texture(t) return this.textures[filename]; } 
		return false;
	};
	textureLoadByString = function(str,bMipmap = false){
		var t = base.textureLoad(..raw.malloc(#str,str),#str, bMipmap);
		if( t ) return this.texture(t);
		return false; 
	}
	textureCreate = function(w=0,h=0,color,z = 0.5){
		var t = base.textureCreate(w,h,z);
		var tex = t?this.texture(t);
		if( tex && color){
			tex.fillColor(color);
		}
		return tex;
	};
	resourceAttachPack = function(fileName,password = ""){
		var hzip = base.resourceAttachPack(..hge.utf2asc(  ..io.fullpath(fileName) ),..hge.utf2asc(  password ));
		if(hzip){
			return {
				remove = function(){
					base.resourceRemovePack(fileName);
				}
			}; 
		}
		
		return false; 
	}
	
	resourceRemoveAll = function(){
		base.resourceRemoveAllPacks();
	}
	resourceLoad = function(fileName){
		var filePointer,size = base.resourceLoad(..hge.utf2asc(  fileName ),1);
		if(filePointer){
			return  ..raw.tostring(filePointer,0,size);
		}
		return false; 
	}
	
	systemSetState = function (state, v ) {
		var f = this[_setStateFunctions[type(v)]];
		if(!f) return ..io.print("参数类型错误");
		f( state, v);
	};
	systemSetStateFunc  = function(state,v){
		var callback = ..raw.tostdcall(v, "bool()");
		this._stateFunctions[state] = callback;
		return base.systemSetStateFunc(state, callback );
	};
	setOption = function(opts){
		var f;
		for (state, v in opts){
			state = _optionStates[state]
			if(!state) return ..io.print("参数类型错误");
			
			var f = this[_setStateFunctions[type(v)]];
			if(!f) return ..io.print("参数类型错误");
			f( state, v);  
		}
	}
	
	base = function(...){
		return ..hge.interFace.base(this,...)
	}
	textInput = function(...){
		return ..hge.interFace.textInput(this,...)
	}
	checkBox = function(...){
		return ..hge.interFace.checkBox(this,...)
	}
	button = function(...){
		return ..hge.interFace.button(this,...)
	}
	sprite = function(...){
		return ..hge.interFace.sprite(this,...)
	}
	gdiCanvas = function(...){
		return ..hge.interFace.gdiCanvas(this,...)
	}
	gdiFont = function(...){
		return ..hge.interFace.gdiFont(this,...)
	}
	renderSuface = function(...){
		return ..hge.interFace.renderSuface(this,...)
	}
	texture = function(...){
		return ..hge.interFace.texture(this,...)
	}
	animation = function(...){
		return ..hge.interFace.animation(this,...)
	}
	polyCollision = function(...){
		return ..hge.interFace.polyCollision(this,...)
	}
	
	spriteAnimation = function(...){
		return ..hge.interFace.spriteAnimation(this,...)
	}
	slice9 = function(...){
		return ..hge.interFace.slice9(this,...)
	}
	
	shutdown = function(f){ 
		winform.killtimer(tmId);
		if( type(f) == type.function )
			f();
		..hge.texture.clear();
		return base.systemShutdown(); 
	};
	
	close = function(){
		return base.systemShutdown(); 
	}
	init = function(){
		this.style = ..win.getStyle(winform.hwnd);
		var form = ..win.form.getForm(winform.hwnd);
		var _,_,w,h = form.getPos();
		base.systemInitiate(winform.hwnd)
		..win.modifyStyle(winform.hwnd,,this.style)
		form.setPos(,,w,h)
		if !winform.cls form.center();
		this.inited = true;	
		this.setProjectionMatrix(this.screenWidth,this.screenHeight);
		
	}
	
	renderLine = function(x1, y1, x2, y2, color = -1, z = 0.5){
		base.gfxRenderLine(x1, y1, x2, y2, color, z)
	}
	renderRect = function(x,y,w,h,color = -1, z = 0.5){
		this.renderPolygonLine(true,color,z,{{x;y};{x+w;y};{x+w;y+h};{x;y+h}})
	}
	renderEllipse = function(x,y,w,h,metic = 0.2,color = -1,z = 0.5){
		var i,tw,th = metic,w,h;
		var lines ={};
		while(i <= ..math.pi*2){
			i+=metic;
			tw =w/2+w/2*..math.cos(i)+x;
			th =h/2+h/2*..math.sin(i)+y;
			..table.push(lines,{tw;th})
		}
		var te = this.renderPolygonLine(true,color,z,lines);
	}
	
	renderPolygonLine = function(closed = false,c = -1,z = 0.5,lines){
		if(closed){
			..table.push(lines,lines[1])
		}
		for(i=1;#lines-1;1){
        	this.renderLine(lines[i][1],lines[i][2],lines[i+1][1],lines[i+1][2],c,z)
        }   
	}
	snapshot = function(path){
		base.systemSnapshot( ..hge.utf2asc( ..io.exist(path) ));
	};
	launch = function(url){
		base.systemLaunch( url );
	}; 
	isFullScreen = function(){
		return !base.systemGetStateBool(1/*_HGE_WINDOWED*/); 
	}
	
	windowed = function(w,h){
		base.systemSetStateBool(1/*_HGE_WINDOWED*/, true );
		if(w : h){
			this.screenWidth = w;
			this.screenHeight = h;
			..win.modifyStyle(winform.hwnd,,this.style)
			..win.show(winform.hwnd)
			this.setProjectionMatrix(w,h);
		}	
	};
	fullScreen = function(w,h){
		base.systemSetStateBool(1/*_HGE_WINDOWED*/, false );
		if(w : h){
			this.setProjectionMatrix(w,h)
		}
	}

	clear = function(color){
			this.gfxClear(color);
		}
		
	gfxBegin = function(f){
		this.gfxBeginScene();
		call(f)
		this.gfxEndScene(); 
	}

	setProjectionMatrix = function(w,h){
		base.resizeViewport(w,h)
	}
	
	@_metaProperty;
}



namespace engine {
	caller = ..hge.caller;
	_metaProperty = ..util.metaProperty(
		textureFilter = {
			_get = function(){ 
				return owner.systemGetStateBool( 3/*_HGE_TEXTUREFILTER*/ );
			}
			_set = function( v ){
				 owner.systemSetStateBool(3/*_HGE_TEXTUREFILTER*/, v );
			} 	
		};
		screenWidth = {
			_get = function(){ 
				return owner.systemGetStateInt(0x11/*_HGE_SCREENWIDTH*/ );
			}
			_set = function( v ){
				owner.systemSetStateInt(0x11/*_HGE_SCREENWIDTH*/,v );
			} 	
		}; 
		screenHeight = {
			_get = function(){ 
				return owner.systemGetStateInt(0x12/*_HGE_SCREENWIDTH*/ );
			}
			_set = function( v ){
				owner.systemSetStateInt(0x12/*_HGE_SCREENHEIGHT*/,v );
			} 	
		};

		
		title = {
			_get = function(){ 
				return owner.systemGetStateString( 0x1B/*_HGE_TITLE*/ );
			}
			_set = function( v ){
				 owner.systemSetStateString(0x1B/*_HGE_TITLE*/, ..hge.utf2asc( v ) );
			} 	
		}; 
		logFile = {
			_get = function(){ 
				return owner.systemGetStateString(  0x1D/*_HGE_LOGFILE*/);
			}
			_set = function( v ){
				 owner.systemSetStateString( 0x1D/*_HGE_LOGFILE*/, ..hge.utf2asc( v ) );
			} 	
		}; 
		screenBpp = {
			_get = function(){ 
				return owner.systemGetStateInt( 0x13/*_HGE_SCREENBPP*/ );
			}
			_set = function( v ){
				owner.systemSetStateInt(0x13/*_HGE_SCREENBPP*/,v);
			} 	
		};

		zBuffer = {
			_get = function(){ 
				return owner.systemGetStateBool(2/*_HGE_ZBUFFER*/ );
			}
			_set = function( v ){
				owner.systemSetStateBool(2/*_HGE_ZBUFFER*/,v); 
			} 	
		}; 

	)
	
	dll = ..raw.loadDll($"~\lib\hge\.res\hge.dll");
	
	
	
	hgeCreate = dll.api("hgeCreate","pointer(int ver)");
	
	_setStateFunctions = {
		[type.boolean] = "systemSetStateBool";
		[type.number] = "systemSetStateInt";
		[type.string] = "systemSetStateString";
		[type.function] = "systemSetStateFunc";
	}
	
	_optionStates = {
		windowed = 1/*_HGE_WINDOWED*/;
		zBuffer = 2/*_HGE_ZBUFFER*/;
		textureFilter = 3/*_HGE_TEXTUREFILTER*/; 
		dontSuspend = 5/*_HGE_DONTSUSPEND*/;
		hideMouse = 6/*_HGE_HIDEMOUSE*/;
		showSplash = 7/*_HGE_SHOWSPLASH*/; 
		screenWidth = 0x11/*_HGE_SCREENWIDTH*/;
		screenHeight = 0x12/*_HGE_SCREENHEIGHT*/;
		screenBpp = 0x13/*_HGE_SCREENBPP*/;
		screenSampleRate = 0x14/*_HGE_SAMPLERATE*/;
		fxVolume = 0x15/*_HGE_FXVOLUME*/;
		musVolume = 0x16/*_HGE_MUSVOLUME*/;
		streamVolume = 0x17/*_HGE_STREAMVOLUME*/;
		fps = 0x18/*_HGE_FPS*/;
		icon = 0x1A/*_HGE_ICON*/;
		title = 0x1B/*_HGE_TITLE*/;
		iniFile = 0x1C/*_HGE_INIFILE*/;
		logFile = 0x1D/*_HGE_LOGFILE*/;
		userSound = 4 /*_HGE_USESOUND*/
	}
	
	class _IHge {
		pointer release = "void()";
		pointer systemInitiate = "bool(int hwnd)";
		pointer systemShutdown = "void()";
		pointer systemGetErrorMessage = "string()";
		pointer systemLog;
		pointer systemLaunch = "bool(string url)";
		pointer systemSnapshot = "void(string filename)";
		pointer systemSetStateBool = "void(int state, bool value)";
		pointer systemSetStateFunc = "void(int state, pointer value)";
		pointer systemSetStateHwnd = "void(int state, addr value)";
		pointer systemSetStateInt = "void(int state, int value)";
		pointer systemSetStateString = "void(int state, string value)";
		pointer systemGetStateBool = "bool (int state)";
		pointer systemGetStateFunc = "pointer(int state)";
		pointer systemGetStateHwnd = "addr(int state)";
		pointer systemGetStateInt = "int(int state)";
		pointer systemGetStateString = "string(int state)";
		pointer resourceLoad = "pointer(string filename,INT & size)";
		pointer resourceFree = "void(pointer res)";
		pointer resourceAttachPack = "bool (string filename, string password)";
		pointer resourceRemovePack = "void(string filename)";
		pointer resourceRemoveAllPacks = "void()";
		pointer resourceMakePath = "string(string filename)";
		pointer resourceEnumFiles = "string(string wildcard)";
		pointer resourceEnumFolders = "string(string wildcard)";
		pointer randomSeed = "void(int seed)";
		pointer randomInt = "int(int min, int max)";
		pointer randomFloat = "float(float min, float max)";
		pointer inputGetMousePos = "void(float &x, float &y)";
		pointer inputSetMousePos = "void(float x, float y)";
		pointer inputGetMouseWheel = "int()";
		pointer inputIsMouseOver = "bool()";
		pointer inputKeyDown = "bool(int key)";
		pointer inputKeyUp = "bool (int key)";
		pointer inputGetKeyState = "bool (int key)";
		pointer inputGetKeyName = "string(int key)";
		pointer inputGetKey = "int()";
		pointer inputGetChar = "int()";
		pointer inputGetEvent = "bool (struct &event)";
		pointer gfxBeginScene = "bool (pointer target)";
		pointer gfxEndScene = "void()";
		pointer gfxClear = "void(INT color)";
		pointer gfxRenderLine = "void(float x1, float y1, float x2, float y2, INT color, float z.5f)";
		pointer gfxRenderTriple = "void(struct triple)";
		pointer gfxRenderQuad = "void(struct quad)";
		pointer gfxStartBatch = "pointer(int prim_type, pointer tex, int blend, int &max_prim)";
		pointer gfxFinishBatch = "void(int nprim)";
		pointer gfxSetClipping = "void(int x, int y, int w, int h)";
		pointer gfxSetTransform = "void(float x, float y, float dx, float dy, float rot, float hscale, float vscale); ";
		pointer targetCreate = "pointer(int width, int height, bool  zbuffer)";
		pointer targetFree = "void(pointer target)";
		pointer targetGetTexture = "pointer(pointer target)";
		pointer textureCreate = "pointer(int width, int height)";
		pointer textureLoad = "pointer(string filename, INT size, bool bMipmap)";
		pointer textureFree = "void(POINTER tex)";
		pointer textureGetWidth = "int(POINTER tex, bool  bOriginal)";
		pointer textureGetHeight = "int(POINTER tex, bool bOriginal)";
		pointer textureLock = "pointer(POINTER tex, bool bReadOnly, int left, int top, int width, int height)";
		pointer textureUnlock = "void(POINTER tex)";
		pointer textureGetSurfaceLevel = "pointer(POINTER tex,int level)";
		pointer surfaceGetDC = "pointer(POINTER pSurface)";
		pointer surfaceReleaseDC = "(POINTER pSurface,pointer hdc)";
		pointer surfaceRelease = "(POINTER pSurface)";
		pointer clearQueue = "()";
		pointer resizeViewport = "(int,int)";
		
		
	} 
	
	imm = ..raw.loadDll("Imm32.dll")
	ImmAssociateContext = imm.api("ImmAssociateContext","int(int,int)" )
}

/**intellisense() 

!hgeEngine.setOption = @.setOption(\n	screenWidth = 640;\n	screenHeight = 480;\n	title = "我的游戏";\n	windowed = true;\n);

!hgeEngine.beforeExit = @.beforeExit = function()
	return true;
	/*返回true退出程序,返回false禁止关闭*/
}

!hgeEngine.focusLost = @.focusLost = function(){
	/*游戏程序失去焦点时调用*/
}

!hgeEngine.focus = @.focus = function(){
	/*游戏程序失去焦点时调用*/
}

!hgeEngine.loop = @.loop = function(){
	/*游戏循环函数*/
}

!hgeEngine.onPaint = @.onPaint = function(){
	/*和loop一样*/
}
!hgeEngine.update = @.update = function(){
	/*逻辑函数*/
}
!hgeEngine.render = @.render = function(){
	/*渲染函数*/
}
!hgeEngine.gfxBegin = @.gfxBegin( \n	function () { \n		__/*关闭游戏回调函数*/ \n	} \n)

!hgeEngine.shutdown = @.shutdown( \n	function () { \n		__/*关闭游戏回调函数*/ \n	} \n)





!hgeEngine.snapshot("snap->jpg__") = 抓屏
!hgeEngine.loopMessage() = 消息循环
!hgeEngine.launch(.("网址或文件路径") = 使用默认程序打开网页或文件
!hgeEngine.textureFilter = 是否使用纹理过滤\n渲染一个块地图时，临时禁止掉纹理过滤可避免\n一些视频卡导致不正确的块交叉的错误
!hgeEngine.fps = 以帧为单位定义帧函数每秒的被调用率 
!hgeEngine.fullScreen(.(宽,高) = 游戏全屏。
!hgeEngine.windowed(.(宽,高) = 游戏窗口化。
!hgeEngine.bgColor = 背景颜色
!hgeEngine.title = 窗口标题
!hgeEngine.textureLoad(.(文件名,大小,创建MIP映射层) = 载入纹理,以及zip中纹理。除文件名以外其他参数可选
!hgeEngine.dts = 上一帧的时间周期。
!hgeEngine.textureLoadByString(.(文件名,创建MIP映射层) = 从字符串(内存)载入纹理。
!hgeEngine.renderLine(.(x1, y1, x2, y2,颜色, z轴) = 画线条
!hgeEngine.zBuffer = 是否开启z轴持续
!hgeEngine.screenBpp = 颜色位数
!hgeEngine.textureCreate(.(宽度,高度,是否支持Z序) = 创建纹理
!hgeEngine.textureLoad() = !hge_texture.
!hgeEngine.textureCreate() = !hge_texture.
!hgeEngine.screenWidth  = 游戏屏幕宽
!hgeEngine.screenHeight  = 游戏屏幕高
!hgeEngine.hwnd  = 游戏窗口句柄
!hgeEngine.mousePos = 鼠标位置\n!hgeMousePos.
!hgeEngine.hideMouse = 隐藏鼠标
!hgeEngine.clear(.(颜色) = 清屏
!hgeEngine.resourceAttachPack

!hgeEngine.logFile = 日志文件地址

!hgeEngine.sprite(.(纹理,x,y,w,h) = hgeSprite是一个精灵实体的HGE帮助类
!hgeEngine.sprite() = !hgeSprite.

!hgeEngine.spriteAnimation(.(帧率) = 创建一个由精灵的一个动画集\n!hgeSpriteAnimation.




!hgeEngine.gdiCanvas(.(宽,高) = 创建一个拥有hdc的纹理。
!hgeEngine.gdiCanvas() = !hgeGdiCanvas.



!hgeEngine.gdiFont(.(宽,高,fps帧率) = 创建一个拥有gdip绘制的文字精灵对象
!hgeEngine.gdiFont() = !hgeGdiFont.

!hgeEngine.animation(.(纹理,x,y,w,h) = 创建一个基于精灵的序列动画
!hgeEngine.animation() = !hgeAnimation.

!hgeEngine.slice9(.(纹理,x,y,w,h )) = 创建一个九宫格切片
!hgeEngine.slice9() = !hgeGridSlice.

!hgeEngine.setProjectionMatrix(.(宽,高) = 设置投影矩阵大小。

!hgeEngine.inputGetChar = 取输入字符的编码
!hgeEngine.getAngle(.(x1,y1,x2,y2) = 取2点的角度


!hgeEngine._hIMC = 引擎窗口的输出上下文的句柄
!hgeEngine.inputAllowIme(.(逻辑) = 是否允许输入法输入

!hgeMousePos.x = x坐标
!hgeMousePos.y = y坐标
!hgeEngine.renderPolygonLine (.(是否闭合,颜色,z轴,线条数组) = 画多边形
!hgeEngine.renderRect(.(x,y,宽,高,颜色,z轴) = 画矩形
!hgeEngine.renderEllipse(.(x,y,宽,高,线条间隔长度,颜色,z轴) = 画圆
!hgeEngine.streamPlay() = 播放音效
!hgeEngine.inputIsMouseOver() = 是否在窗体内
!hgeEngine.inputGetKeyName(_vk__) = 取按键名
!hgeEngine.inputKeyDown(.(_vk__) = 按键是否按下
!hgeEngine.inputKeyUp(.(_vk__) = 按键是否弹起
!hgeEngine.inputGetKeyState(.(_vk__) = 按键是否持续按下
!hgeEngine.inputGetEvent() = 取当前按键状态返回对象\n!hgeInputEvent.

!hgeInputEvent.type = 按键类型

!hgeInputEvent.inputSetMousePos(.x,y) = 设置鼠标坐标
!hgeInputEvent.key = 按键码
!hgeInputEvent.flags = 事件标识
!hgeInputEvent.chr = 字符串
!hgeInputEvent.wheel = 滚轮
!hgeInputEvent.x = 鼠标x坐标
!hgeInputEvent.y = 鼠标y坐标



end intellisense**/
