//bass 扩展音效库
//收费的音效库
import fsys.localfile;
import util.metaProperty;
namespace hge.bass;
var dll;
if(_STUDIO_INVOKED){
	dll = ..raw.loadDll("~\lib\hge\.res\bass.dll")
}else {
	dll = ..raw.loadDll("\bass.dll");
}


BASS_StreamCreateFile = dll.api("BASS_StreamCreateFile","INT(bool,string,int,int,in)")
BASS_StreamCreateFile_Ptr = dll.api("BASS_StreamCreateFile","INT(bool,pointer,int,int,int)")
BASS_Apply3D = dll.api("BASS_Apply3D","()")
BASS_ChannelBytes2Seconds = dll.api("BASS_ChannelBytes2Seconds","float(INT handle,long pos)")
BASS_ChannelGet3DAttributes = dll.api("BASS_ChannelGet3DAttributes","bool(INT handle,INT& mode,float& min,float& max,INT& iangle,INT& oangle,float& outvol)")
BASS_ChannelGet3DPosition = dll.api("BASS_ChannelGet3DPosition","bool(INT handle,INT& pos,INT& orient,INT& vel)")
BASS_ChannelGetData = dll.api("BASS_ChannelGetData","INT(INT handle,float buffer,INT length)")
BASS_ChannelGetDevice = dll.api("BASS_ChannelGetDevice","INT(INT handle)")
BASS_ChannelGetInfo = dll.api("BASS_ChannelGetInfo","bool(INT handle, info)")
BASS_ChannelGetLength = dll.api("BASS_ChannelGetLength","long(INT handle,INT mode)")
BASS_ChannelGetLevel = dll.api("BASS_ChannelGetLevel","INT(INT handle)")


BASS_ChannelGetPosition = dll.api("BASS_ChannelGetPosition","long(INT handle,INT mode)")
BASS_ChannelGetTags = dll.api("BASS_ChannelGetTags","string(INT handle,INT tags)")
BASS_ChannelIsActive = dll.api("BASS_ChannelIsActive","INT(INT handle)")
BASS_ChannelIsSliding = dll.api("BASS_ChannelIsSliding","bool(INT handle,INT attrib)")
BASS_ChannelPause = dll.api("BASS_ChannelPause","bool(INT handle)")
BASS_ChannelPlay = dll.api("BASS_ChannelPlay","bool(INT,bool)")
BASS_ChannelRemoveDSP = dll.api("BASS_ChannelRemoveDSP","bool(INT handle,INT dsp)")
BASS_ChannelRemoveFX = dll.api("BASS_ChannelRemoveFX","bool(INT handle,INT fx)")
BASS_ChannelRemoveLink = dll.api("BASS_ChannelRemoveLink","bool(INT handle,INT chan)")
BASS_ChannelRemoveSync = dll.api("BASS_ChannelRemoveSync","bool(INT handle,INT sync)")
BASS_ChannelSeconds2Bytes = dll.api("BASS_ChannelSeconds2Bytes","long(INT handle,float pos)")
BASS_ChannelSet3DAttributes = dll.api("BASS_ChannelSet3DAttributes","bool(INT handle,INT mode,float min,float max,INT iangle,INT oangle,float outvol)")
BASS_ChannelSetFlags = dll.api("BASS_ChannelSetFlags","bool(INT,INT)")

BASS_ChannelSet3DPosition = dll.api("BASS_ChannelSet3DPosition","bool(INT handle,struct pos,struct orient,struct vel)")
BASS_ChannelSetDevice = dll.api("BASS_ChannelSetDevice","bool(INT handle,INT device)")
BASS_ChannelSetDSP = dll.api("BASS_ChannelSetDSP","INT(INT handle,INT proc,INT user,INT priority)")
BASS_ChannelSetFX = dll.api("BASS_ChannelSetFX","INT(INT handle,INT type_,INT priority)")
BASS_ChannelSetLink = dll.api("BASS_ChannelSetLink","bool(INT handle,INT chan)")
BASS_ChannelSetPosition = dll.api("BASS_ChannelSetPosition","bool(INT handle,long pos)")
BASS_ChannelSetSync = dll.api("BASS_ChannelSetSync","INT(INT handle,INT type,long param, proc,INT user)")
BASS_ChannelStop = dll.api("BASS_ChannelStop","bool(INT handle)")
BASS_ErrorGetCode = dll.api("BASS_ErrorGetCode","INT()")
BASS_Free = dll.api("BASS_Free","bool()")
BASS_FXGetParameters = dll.api("BASS_FXGetParameters","bool(INT handle,INT par)")
BASS_FXReset = dll.api("BASS_FXReset","bool(INT handle)")
BASS_FXSetParameters = dll.api("BASS_FXSetParameters","bool(INT handle,INT par)")
BASS_Get3DFactors = dll.api("BASS_Get3DFactors","bool(float& distf,float& rollf,float& doppf)")

BASS_Get3DPosition = dll.api("BASS_Get3DPosition","bool(struct pos,struct vel,struct front,struct top)")
BASS_GetConfig = dll.api("BASS_GetConfig","INT(INT option)")
BASS_GetCPU = dll.api("BASS_GetCPU","float()")
BASS_GetDevice = dll.api("BASS_GetDevice","INT()")
BASS_GetDSoundObject = dll.api("BASS_GetDSoundObject","INT(INT object)")
BASS_GetEAXParameters = dll.api("BASS_GetEAXParameters","bool(INT& env,float& vol,float& decay,float& damp)")
BASS_GetInfo = dll.api("BASS_GetInfo","bool( info)")
BASS_GetVersion = dll.api("BASS_GetVersion","INT()")
BASS_GetVolume = dll.api("BASS_GetVolume","float()")
BASS_Init = dll.api("BASS_Init","bool(INT device,INT freq,INT flags,INT win,INT clsid)")
BASS_MusicFree = dll.api("BASS_MusicFree","bool(INT handle)")
BASS_MusicLoad = dll.api("BASS_MusicLoad","INT(bool mem,string file,long offset,INT length,INT flags,INT freq)")
BASS_Pause = dll.api("BASS_Pause","bool()")
BASS_PluginFree = dll.api("BASS_PluginFree","bool(INT handle)")
BASS_PluginGetInfo = dll.api("BASS_PluginGetInfo","INT(INT handle)")
BASS_PluginLoad = dll.api("BASS_PluginLoad","INT(string filename,INT flags)")
BASS_RecordFree = dll.api("BASS_RecordFree","bool()")
BASS_RecordGetDevice = dll.api("BASS_RecordGetDevice","INT()")
BASS_RecordGetInfo = dll.api("BASS_RecordGetInfo","bool( info)")
BASS_RecordGetInput = dll.api("BASS_RecordGetInput","INT(INT input,float& volume)")
BASS_RecordGetInputName = dll.api("BASS_RecordGetInputName","string(INT input)")
BASS_RecordInit = dll.api("BASS_RecordInit","bool(INT device)")
BASS_RecordSetDevice = dll.api("BASS_RecordSetDevice","bool(INT device)")
BASS_RecordSetInput = dll.api("BASS_RecordSetInput","bool(INT input,INT flags,float volume)")
BASS_RecordStart = dll.api("BASS_RecordStart","INT(INT freq,INT chans,INT flags, proc,INT user)")
BASS_SampleCreate = dll.api("BASS_SampleCreate","INT(INT length,INT freq,INT chans,INT max,INT flags)")
BASS_SampleFree = dll.api("BASS_SampleFree","bool(INT handle)")
BASS_SampleGetChannel = dll.api("BASS_SampleGetChannel","INT(INT handle,bool onlynew)")



BASS_SampleGetChannels = dll.api("BASS_SampleGetChannels","INT(INT handle,INT CHANNELS)")
BASS_SampleGetInfo = dll.api("BASS_SampleGetInfo","bool(INT handle, info)")
BASS_SampleLoad = dll.api("BASS_SampleLoad","INT(bool mem,string file,long offset,INT length,INT max,INT flags)")
BASS_SampleSetInfo = dll.api("BASS_SampleSetInfo","bool(INT handle, info)")
BASS_SampleStop = dll.api("BASS_SampleStop","bool(INT handle)")
BASS_Set3DFactors = dll.api("BASS_Set3DFactors","bool(float distf,float rollf,float doppf)")
BASS_Set3DPosition = dll.api("BASS_Set3DPosition","bool(struct pos,struct vel,struct front,struct top)")
BASS_SetConfig = dll.api("BASS_SetConfig","bool(INT opt,INT value)")
BASS_SetDevice = dll.api("BASS_SetDevice","bool(INT device)")
BASS_SetEAXParameters = dll.api("BASS_SetEAXParameters","bool(INT env,float vol,float decay,float damp)")
BASS_SetVolume = dll.api("BASS_SetVolume","bool(float volume)")
BASS_Stop = dll.api("BASS_Stop","bool()")
BASS_StreamCreate = dll.api("BASS_StreamCreate","INT(INT freq,INT chans,INT flags,INT proc,INT user)")
BASS_StreamCreateFileUser = dll.api("BASS_StreamCreateFileUser","INT(INT system,INT flags, procs,INT user)")
BASS_StreamCreateURL = dll.api("BASS_StreamCreateURL","INT(string url,INT offset,INT flags, proc,INT user)")
BASS_StreamFree = dll.api("BASS_StreamFree","bool(INT handle)")
BASS_StreamGetFilePosition = dll.api("BASS_StreamGetFilePosition","long(INT handle,INT mode)")
BASS_Update = dll.api("BASS_Update","bool(INT legnth)")

utf2asc = function(str){//VERSION >=10
	if(_AARDIO_VERSION >=10){
		str = ..string.fromto(str,65001,0);
	}
	return str; 
}

if !BASS_Init(-1,44100,0,0,0) error("bass_初始设备失败")
getVersion = function(){
	return bass.BASS_GetVersion(); 
}


streamCreateByString = function( str ){
	 var hSteam = BASS_StreamCreateFile_Ptr(true,topointer(::Kernel32.lstrcpyn(str,str,0)),0,#str,0);
	 if hSteam return channel(hSteam)
}

streamCreateFile = function(str,flags = 0){
	var hSteam = BASS_StreamCreateFile(false,utf2asc ( ..io.fullpath(str) ) ,0,0,flags);
	if hSteam return channel(hSteam)
}
stop = function(){
	return BASS_Stop()
}


free = function(){
	return BASS_Free(); 
}

setVolume = function(v){
	return BASS_SetVolume(v); 
}
getVolume = function(){
	return BASS_GetVolume(); 
}

getVersion = function(){
	return BASS_GetVersion(); 
}
getCPU = function(){
	return BASS_GetCPU(); 
}
apply3D = function(){
	BASS_Apply3D()
}
channel = class {
	ctor( handel){
		this.handle = handel
	};
	play = function(rePlay = true,loop = false){
		if(loop){
			this.setFlag(4/*_BASS_SAMPLE_LOOP */)
		}
		..hge.bass.BASS_ChannelPlay(this.handle ,rePlay)
	}
	stop = function(){
		return ..hge.bass.BASS_ChannelStop(this.handle); 
	}
	
	getPosition = function(mode){
		return ..hge.bass.BASS_ChannelGetPosition(this.handle ,mode)
	}
	setAttribute = function(attrib,value){
		return ..hge.bass.BASS_ChannelSetAttribute(this.handle,attrib,value)
	}
	getAttribute = function(attrib,value){
		var tmpVal = ..hge.bass.BASS_ChannelGetAttribute(this.handle,attrib,1.00)
		return tmpVal; 
	}
	isActive = function(){
		return ..hge.bass.BASS_ChannelIsActive(this.handle); 
	}
	setPos = function(pos){
		return ..hge.bass.BASS_ChannelSetPosition(this.handle,pos); 
	}
	setFlag = function(flag){
		return ..hge.bass.BASS_ChannelSetFlags(this.handle,flag); 
	}
	pause = function(){
		return ..hge.bass.BASS_ChannelPause(this.handle); 
	}
	free = function(){
		..hge.bass.BASS_StreamFree(this.handle)
	}
	@_metaProperty;
}
namespace channel{
	_metaProperty = ..util.metaProperty(
		volume = {
			_get = function(){ 
				return owner.setAttribute()
			}
			_set = function( v ){
				
			} 	
		};
	)
}


..subscribe("beforeUnload",function(){
	free();
} );

/**intellisense()
_BASS_SAMPLE_LOOP =@4/*_BASS_SAMPLE_LOOP */



end intellisense**/

