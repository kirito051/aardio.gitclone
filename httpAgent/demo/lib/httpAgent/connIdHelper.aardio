import hpsocket.helper.headers;

namespace httpAgent{

class connIdHelper{//管理连接池
	ctor( socket,socket_ssl, maxEachThread ){
		this.socket 	= socket;
		this.socket_ssl = socket_ssl;
		this.maxEachThread = maxEachThread;
		//全局Headers
		this.globalHeaderStruct = ..hpsocket.helper.headers();
		
		this.serverList = {
			["newServer"] = function(scheme,host,port,ssl){
				name = owner.keyName(scheme,host,port);
				owner[name] = ..httpAgent.serverHelper(ssl?this.socket_ssl:this.socket,
							host,port,this.maxEachThread,ssl);
				return owner[name],name; 
			};
			["find"] = function(scheme,host,port,ssl){
				name = owner.keyName(scheme,host,port);
				if (type(owner[name]) == type.table) return owner[name]; 
				return owner.newServer(scheme,host,port,ssl); 
			};
			["keyName"] = function(scheme,host,port){
				return ..string.concat(scheme,"://",host,":",port:80); 
			};
		};
		this.connIdList = {
			//connId与任务映射池
			tcpTaskList = {};
			sslTaskList = {};
			["bindTask"] = function(isSSL,connId,task){
				owner[isSSL?"sslTaskList":"tcpTaskList"][tostring(connId)] = task;
			};
			["freeTask"] = function(isSSL,connId){
				owner[isSSL?"sslTaskList":"tcpTaskList"][tostring(connId)] = null;
			};
			["findTask"] = function(isSSL,connId){
				return owner[isSSL?"sslTaskList":"tcpTaskList"][tostring(connId)];
			};
			//connId与Server的映射池
			tcpServerList = {};
			sslServerList = {};
			["bindServer"] = function(isSSL,connId,server){
				owner[isSSL?"sslServerList":"tcpServerList"][tostring(connId)] = server;
			};
			["freeServer"] = function(isSSL,connId){//收到错误消息时才需要销毁
				owner[isSSL?"sslServerList":"tcpServerList"][tostring(connId)] = null;
			};
			["findServer"] = function(isSSL,connId){
				return owner[isSSL?"sslServerList":"tcpServerList"][tostring(connId)];
			};
		};
	}
	getConnId = function(task){
		var url = task.url;
		var server = owner.serverList.find(url.scheme,url.host,url.port,url.ssl)
		if !server return null,true,"参数不正确，无法创建服务端";//第二个返回值表示错误
		
		var connId,index,isNew = server.getFreeConnId();
		if (!connId) return null,false,"线程已满"; 
		//-------建立映射关系-----------
		owner.connIdList.bindTask(url.ssl,connId,task);
		owner.connIdList.bindServer(url.ssl,connId,server);
		return connId,isNew,server; 
	}
	getServer = function(isSSL,connId){
		return owner.connIdList.findServer(isSSL,connId); 
	}
	isWebSocket = function(isSSL,connId){
		var task,err = owner.getTask(isSSL,connId);
		return task?task.isWS:null,err; 
	}
	getTask = function(isSSL,connId){
		var task = owner.connIdList.findTask(isSSL,connId)
		if !(task) return null,"任务被删除或错误的id号";
		return task;  
	}
	setHttpHeader = function(headers,url,pathOnly){
		if (url){
			var server = owner.serverList.find(url.scheme,url.host,url.port,url.ssl)
			if !server return null,true,"参数不正确，无法匹配服务端";//第二个返回值表示错误
			return server.setHttpHeader(headers,pathOnly)
		}
		else {
			this.globalHeaderStruct = ..hpsocket.helper.headers(headers);
			return true; 
		}
	}
	getHttpHeader = function(url){//返回的都是对象
		if (!url) return this.globalHeaderStruct;

		var server = owner.serverList.find(url.scheme,url.host,url.port,url.ssl);
		if (!server) return null,true,"参数不正确，无法匹配服务端";//第二个返回值表示错误
		
		var headerStruct,pathOnly = server.getHttpHeader()
		
		//不是pathOnly的话，需要将全局和服务器的Headers一并返回
		if (headerStruct && !pathOnly) headerStruct.mix(this.globalHeaderStruct.headers())
		return (headerStruct == null)?this.globalHeaderStruct:headerStruct; 
	}
	onCallBack = function(message,isSSL,connId,...){
		//没有找到任务的时候，也要更新服务器清单
		var task = owner.getTask(isSSL,connId);
		var server = owner.getServer(isSSL,connId);
		//..console.log(message,isSSL,connId)
		select(message) {
			case "onClose" 	{
				if (server) server.destoryConnId(connId);
				if (task) call(task.onClose,task,...);
				
				this.connIdList.freeTask(isSSL,connId);//解除绑定
				this.connIdList.freeServer(isSSL,connId);;//解除绑定
			}
			case "onConnect","onSend","onReceive","onBody" {
				if (task) {	
					if (task[message]) call(task[message],,...);//不设定owner
				}
			}
			case "onHandShake"	{
				if (task) return task.request(); 
			}
			case "onMessageComplete" {
				//不是websocket时才能释放锁
				if ((server) && ((task?(!task.isWS):true))){
					server.freeConnId(connId);
				}
				//只解除Task绑定，有可能后续会有Server的onClose事件
				this.connIdList.freeTask(isSSL,connId);
				
				if (task) {
					task.onComplete(...);
				}
			}
			case "onUpgrade" {
				if (server) server.upgradeConnId(connId,...)
				if (task) task.onUpgrade(...)//需要返回upgradetype,websocket对象
			}
		}
	}
}
}