import hpsocket.ssl.httpAgent;
import hpsocket.httpAgent;
import hpsocket.helper.headers;
import hpsocket.gzip;
import thread.table;
import inet.url;
import win.ui;

class httpAgent{
	ctor( bindAddress ){
		var socket 		= ..hpsocket.httpAgent();
		var socket_ssl	= ..hpsocket.ssl.httpAgent();
		
		if !socket 		return null,"启动TCP组件失败"; 
		if !socket_ssl 	return null,"启动SSL组件失败";
		
		socket.setSocketBufferSize(65536);
		
		socket_ssl.setSocketBufferSize(65536);
		socket_ssl.sslSetupContext(0x00);
		
		this.socket = socket;
		this.socket_ssl = socket_ssl;
		
		//绑定TCP事件
		socket.onClose				= onClose;
		socket.onConnect			= onConnect;
		socket.onSend				= onSend;
		socket.onReceive			= onReceive;
		socket.onHandShake			= onHandShake;
		socket.onHeadersComplete	= onHeadersComplete;
		socket.onBody				= onBody;
		socket.onMessageComplete	= onMessageComplete;
		socket.onUpgrade			= onUpgrade;
		socket.onWsMessageHeader	= onWsMessageHeader;
		socket.onWsMessageBody		= onWsMessageBody;
		socket.onWsMessageComplete	= onWsMessageComplete;
		
		//绑定SSL事件
		socket_ssl.onClose				= onClose;
		socket_ssl.onConnect			= onConnect;
		socket_ssl.onSend				= onSend;
		socket_ssl.onReceive			= onReceive;
		socket_ssl.onHandShake			= onHandShake;
		socket_ssl.onHeadersComplete	= onHeadersComplete;
		socket_ssl.onBody				= onBody;
		socket_ssl.onMessageComplete	= onMessageComplete;
		socket_ssl.onUpgrade			= onUpgrade;
		socket_ssl.onWsMessageHeader	= onWsMessageHeader;
		socket_ssl.onWsMessageBody		= onWsMessageBody;
		socket_ssl.onWsMessageComplete	= onWsMessageComplete;
		
		if !this.socket.start(bindAddress) 		return null,..string.format("TCP事件:监听%s地址失败",bindAddress:"IP"); ;//开始监听事件
		if !this.socket_ssl.start(bindAddress) 	return null,..string.format("SSL事件:监听%s地址失败",bindAddress:"IP"); ;//开始监听事件
		
		this._form = ..win.form()
		this._form.messageOnly();
		
		this.thdTable 			= ..thread.table(helper.version)
		this.thdTable.msgHwnd 	= this._form.hwnd;
		
		this.connHelper 		= connIdHelper(this.socket,this.socket_ssl,20);
		this.taskHelper 		= taskHelper(this.connHelper);
		this.websocketHelper 	= websocketHelper();
		/*Processor{{*/
		//-------------------------事件处理过程-------------------------------------------
		this._form.wndproc = function(hwnd,message,wParam,lParam){ 
			if (message < 0x400) return ; 
			//------------------只处理WM_USER消息-----------------------------------------
			select(message - 0x400) {
				case 1 { //onClose: connId, errStucture()
				
					var msg = raw.convert(topointer(lParam),httpHelper.errStuct());

					if (this.websocketHelper.isChild(this.isSSLSocket(msg.pSocket), msg.connId)){//检查是否是websocket的
						this.websocketHelper.onClose(this.isSSLSocket(msg.pSocket), 
													msg.connId, 
													msg.enOperation, 
													msg.errCode)
					}
					this.connHelper.onCallBack("onClose",
												this.isSSLSocket(msg.pSocket),
												msg.connId,
												msg.enOperation,
												msg.errCode)
					this.taskHelper.nextStep();
				}
				case 2 { //onConnect: connId, isSSLSocket
				
					var connId = wParam;
					this.connHelper.onCallBack("onConnect",this.isSSLSocket(lParam),connId)
				}
				case 3 { //onSend: connId, dataStruct();
				
					var msg = raw.convert(topointer(lParam),httpHelper.dataStruct());
					this.connHelper.onCallBack("onSend",
												this.isSSLSocket(msg.pSocket),
												msg.connId,
												topointer(msg.pData),
												msg.length )
				}
				case 4 { //onReceive: connId, dataStruct();
				
					var msg = raw.convert(topointer(lParam),httpHelper.dataStruct());
					this.connHelper.onCallBack("onReceive",
												this.isSSLSocket(msg.pSocket),
												msg.connId,
												topointer(msg.pData),
												msg.length )
				}
				case 5 { //onHandShake: connId, isSSLSocket
					var connId,isSSLSocket = wParam,this.isSSLSocket(lParam)
					
					var method,url,header,body,isWebSocket = this.connHelper.onCallBack("onHandShake",isSSLSocket,connId)
					
					var requestHeaders =  ..hpsocket.helper.headers(this.connHelper.getHttpHeader(url).headers());
					if (header) requestHeaders.mix(header.headers());

					if (url.uri) {
						if (isWebSocket){
							this[isSSLSocket?"socket_ssl":"socket"].sendWsUpgradeRequest(connId,url.uri,requestHeaders);
						}
						else {
							this[isSSLSocket?"socket_ssl":"socket"].sendRequest(connId,body,url.uri,requestHeaders,method)
						}
					}
				}
				case 6 { //onBody: connId, dataStruct();
					var msg = raw.convert(topointer(lParam),httpHelper.dataStruct());
					this.connHelper.onCallBack("onBody",
												this.isSSLSocket(msg.pSocket),
												msg.connId,
												topointer(msg.pData),
												msg.length )
				}
				case 7 { //onMessageComplete: connId, responseStruct(); 返回1则不销毁数据指针
				
					var msg = raw.convert(topointer(lParam),httpHelper.responseStruct());
					var response = httpResponseSimple(
								msg.connId,
								msg.remoteAddr,
								msg.remotePort,
								msg.headers,
								msg.cookies,
								topointer(msg.pData),
								msg.statue
								)
					var websocket = this.connHelper.isWebSocket(this.isSSLSocket(msg.pSocket),msg.connId);//判断是否是websocket的返回值
					if !websocket {
						this.connHelper.onCallBack("onMessageComplete", this.isSSLSocket(msg.pSocket), msg.connId, response);
						//提前判断Connetion close 的情况
						var connection = response.headers.get("connection");
						if ..string.lower(connection:"") == "close" {	this.socket.disconnect(msg.connId,true) }
						this.taskHelper.nextStep();
					}
					else {
						return 1; //返回1
					}
				}
				case 8 { //onUpgrade: connId, upgradeStruct()
				
					var msg = raw.convert(topointer(lParam),httpHelper.upgradeStruct());
					var isWebSocket = this[this.isSSLSocket(msg.pSocket)?"socket_ssl":"socket"].checkWsUpgradeResponse(wParam)
					var wsTask;
					if (isWebSocket) {
						var task = this.connHelper.getTask(this.isSSLSocket(msg.pSocket),wParam);
						wsTask = this.websocketHelper.newConnId(this[this.isSSLSocket(msg.pSocket)?"socket_ssl":"socket"], wParam, (task)?task:{})
					}
					this.connHelper.onCallBack("onUpgrade",this.isSSLSocket(msg.pSocket), wParam,(isWebSocket)?lParam:-1,wsTask);
					this.taskHelper.nextStep();
				}
				case 9 { //onWsMessageHeader
					
				}
				case 0xA { //onWsMessageBody: connId, dataStruct();
					var msg = raw.convert(topointer(lParam),httpHelper.dataStruct());
				}
				case 0xB { //onWsMessageComplete: connId, wsMessageStruct();
					var msg = raw.convert(topointer(lParam),httpHelper.wsMessageStruct());
					var message = wsMessageSimple(
								msg.connId, 
								msg.remoteAddr, 
								msg.remotePort, 
								msg.final, 
								msg.reserved,
								msg.opCode,
								msg.mask, 
								msg.bodyLen ,
								msg.bodyRemain, 
								topointer(msg.pData)
								)
					this.websocketHelper.onWsMessageComplete(this.isSSLSocket(msg.pSocket), msg.connId,message)
				}
			}
		}
		/*}}*/
	};
	getRequest = function(path,onResponse,header,method,body,newWS,delay){//兼容ws协议
		var url = crackURL(path);
		if !url return null; 
		if url.ws && (!newWS) { //当是websocket协议的时候，需要检查是否存在现成的链接
			var _,wsTask = this.websocketHelper.exist(url);
			if (_){
				if (onResponse) call(onResponse,,0,wsTask,0,0,true);//告知回调函数已经存在了
				return true,wsTask; 
			}
		}
		return this.taskHelper.addRequest(url,onResponse,header,method,body,delay) //返回GUID，Task，执行计数
	}
	isSSLSocket = function(pSocket){
		var pSocket = topointer(pSocket);
		return (this.socket_ssl.pSocket == pSocket)?true:false; 
	}
	setHttpHeader = function(headers,path,pathOnly){
		if (!headers) return null;
		headers = ..hpsocket.helper.headers(headers);
		return this.connHelper.setHttpHeader(headers,crackURL(path),pathOnly);
	}
	destory = function(){
		this.socket.stop();
		this.socket_ssl.stop();
		this._form.close();
		this = null;
	}
	setTaskComplete = function(func){
		this.taskHelper.setComplete(func);
	}
}

namespace httpAgent{

	import httpAgent.helper;
	import httpAgent.connIdHelper;
	import httpAgent.serverHelper;
	import httpAgent.taskHelper;
	import httpAgent.taskData;
	import httpAgent.websocketHelper;
	import httpAgent.websocketTask;
	
	raw			= ..raw;
	httpHelper	= httpAgent.helper;
	
	class wsMessageSimple{
		ctor( connId,addr,port,final,reserved,opCode,mask,bodyLen,bodyRemain,pData){
			this.connId		= connId;
			this.remoteAddr	= addr;
			this.remotePort	= port;
			this.final		= final;
			this.reserved 	= reserved;
			this.opCode 	= opCode;
			this.mask 		= mask;
			this.bodyLen 	= bodyLen;
			this.bodyRemain = bodyRemain;
			this.data		= ..raw.sizeof(pData)?..raw.tostring(pData,1,..raw.sizeof(pData)):null;
		};
	}
	
	class httpResponseSimple{
    	ctor(connId,remoteAddr,remotePort,header,cookies,pData,statue){
			this.connId			= connId;
    		this.remoteAddr		= remoteAddr;
	    	this.port			= remotePort;
	    	this.host			= ..string.concat(remoteAddr,(remotePort!=80)?(":"++remotePort):"");
	    	this.headers		= ..hpsocket.helper.headers(header);
	    	this.contentLength	= this.headers.get("contentlength");
	    	this.statue			= statue;
	    	this.cookies		= this.headers.get("set-cookie");
	    	this.body			= (..raw.sizeof(pData))?(..raw.tostring(pData,1,..raw.sizeof(pData))):null;
	    	
	    	var encoding = this.headers.get("content-encoding");
	    	if encoding == "gzip" {
	    		this.body = ..hpsocket.gzip.uncompress(this.body)
	    	}
    	};
	}
	
	crackURL = function(path){//解析url
		var url = ..inet.url.split(path);
		if url == null return null; 
		var scheme 	= ..string.lower(url.scheme:"");
		if (url.host == null) return null; 
		
		var ssl 	= (scheme == "https" or scheme == "wss")?true:false;
		return {
			scheme	= scheme;
			host	= ..string.lower(url.host:"");
			ssl 	= ssl;
			ws 		= (scheme == "ws" or scheme == "wss")?true:false;
			port 	= (url.port == 0)?(ssl?443:80):url.port;
			uri 	= ..string.concat((url.path=="")?"/":url.path,url.extraInfo)
		}
	}
	
	onClose = function(hpHttpAgent,connId,enOperation,errCode){
		import httpAgent.helper;
		
		var msg 	= httpAgent.helper.errStuct();
		msg.pSocket		= tonumber(hpHttpAgent.pSocket);
		msg.connId		= connId;
		msg.enOperation = enOperation;
		msg.errCode 	= errCode;
		
		::User32.SendMessage(httpAgent.helper.hwnd, 0x401, connId, msg)
	}
	
	onConnect = function(hpHttpAgent,connId){
		import httpAgent.helper;
		
		::User32.SendMessage(httpAgent.helper.hwnd, 0x402, connId, tonumber(hpHttpAgent.pSocket) );
	}
	
	onSend = function(hpHttpAgent,connId,pData,length){
		import httpAgent.helper;
		
		var msg 	= httpAgent.helper.dataStruct();
		msg.pSocket		= tonumber(hpHttpAgent.pSocket);;
		msg.connId		= connId;
		msg.pData 		= tonumber(pData);
		msg.length	 	= length;
		
		::User32.SendMessage(httpAgent.helper.hwnd, 0x403, connId, msg)
	}
	
	onReceive = function(hpHttpAgent,connId,pData,length){
		import httpAgent.helper;
		
		var msg 	= httpAgent.helper.dataStruct();
		msg.pSocket		= tonumber(hpHttpAgent.pSocket);
		msg.connId		= connId;
		msg.pData 		= tonumber(pData);
		msg.length	 	= length;
		
		::User32.SendMessage(httpAgent.helper.hwnd, 0x404, connId, msg)
	}
	
	onHandShake = function(hpHttpAgent,connId){
		import httpAgent.helper;
		::User32.SendMessage(httpAgent.helper.hwnd, 0x405, connId, tonumber(hpHttpAgent.pSocket) )
	}
	
	onHeadersComplete = function(hpHttpAgent,connId){
		var contentLength = hpHttpAgent.getContentLength(connId)
		if contentLength { //避免Websocket的时候丢失了sendKey
			hpHttpAgent.reallocString(connId,contentLength)
		}
	}
	
	onBody = function(hpHttpAgent,connId,pData,length){
		var pExtra = hpHttpAgent.getConnectionExtra(connId);
		var use,size = raw.sizeof(pExtra);
		if (size == null) {//当未分配内存时，根据数据长度重新分配
			hpHttpAgent.reallocString(connId,length);
		}
		hpHttpAgent.appendString(connId,pData,length);
		
		import httpAgent.helper;
		var msg 	= httpAgent.helper.dataStruct();
		msg.pSocket		= tonumber(hpHttpAgent.pSocket);
		msg.connId		= connId;
		msg.pData 		= tonumber(pData);
		msg.length	 	= length;
		
		::User32.SendMessage(httpAgent.helper.hwnd, 0x406, connId, msg)
	}
	
	onMessageComplete = function(hpHttpAgent,connId){
		import httpAgent.helper;

		var msg 	= httpAgent.helper.responseStruct();
		msg.pSocket		= tonumber(hpHttpAgent.pSocket);
		msg.connId			= connId;
		msg.remoteAddr,
			msg.remotePort 	= hpHttpAgent.getRemoteHost(connId)
		msg.headers			= tostring(hpHttpAgent.getAllHeaders(connId):"");
		msg.cookies			= tostring(hpHttpAgent.getAllCookies(connId):"");
		msg.pData			= tonumber(hpHttpAgent.getConnectionExtra(connId));
		msg.statue			= hpHttpAgent.getStatusCode(connId)
		
		var keepBuffer = ::User32.SendMessage(httpAgent.helper.hwnd, 0x407, connId, msg)
		
		if (!keepBuffer) hpHttpAgent.reallocString(connId,0);//销毁不再使用的指针
	}
	
	onUpgrade = function(hpHttpAgent,connId,upgradeType){
		import httpAgent.helper;
		
		var msg 	= httpAgent.helper.upgradeStruct();
		msg.pSocket		= tonumber(hpHttpAgent.pSocket);;
		msg.connId		= connId;
		msg.upgradeType	= upgradeType;
		
		::User32.SendMessage(httpAgent.helper.hwnd, 0x408, connId, msg);
	}
	
	onWsMessageHeader = function(hpHttpAgent,connId,final,reserved,opCode,mask,bodyLen){
		hpHttpAgent.reallocString(connId,bodyLen)
	}
	
	onWsMessageBody = function(hpHttpAgent,connId,pData,length){
		hpHttpAgent.appendString(connId,pData,length);
		
		import httpAgent.helper;
		var msg 		= httpAgent.helper.dataStruct();
		msg.pSocket		= tonumber(hpHttpAgent.pSocket);
		msg.connId		= connId;
		msg.pData 		= tonumber(pData);
		msg.length	 	= length;
		
		::User32.SendMessage(httpAgent.helper.hwnd, 0x40A, connId, msg)
	}
	
	onWsMessageComplete = function(hpHttpAgent,connId){
		import httpAgent.helper;

		var addr,port	= hpHttpAgent.getRemoteHost(connId);
		var state 		= hpHttpAgent.getWsMessageState(connId);
		
		var msg 		= httpAgent.helper.wsMessageStruct();
		msg.pSocket		= tonumber(hpHttpAgent.pSocket);
		msg.connId		= connId;
		msg.remoteAddr	= addr;
		msg.remotePort	= port;
		msg.final		= state.final;
		msg.reserved 	= state.reserved;
		msg.opCode 		= state.opCode;
		msg.mask 		= state.mask;
		msg.bodyLen 	= state.bodyLen;
		msg.bodyRemain 	= state.bodyRemain;
		msg.pData		= tonumber(hpHttpAgent.getConnectionExtra(connId));
		
		::User32.SendMessage(httpAgent.helper.hwnd,0x40B,connId,msg);
		
		hpHttpAgent.reallocString(connId,0);//销毁不再使用的指针
	}
}
