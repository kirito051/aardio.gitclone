//play 控制播放
namespace binFM.play{
	start = function(i=1,handle,path,...){
		if(handle && path && !..started) {
			// 以获取流句柄，开始播放之
			var arg = {...};
			i = arg[1];
			if(path==..songs_noAd[i]["url"]) {
				..now_i = i;
			}
			else { // 当前播放的歌曲不是当前选中的歌曲（常出现在网速慢的情况下）
				for(j=1;#..songs_noAd;1) {
					if(..songs_noAd[j]["url"]==path) {
						..now_i = j;	
						break;
					}
				}
			}
			duration_ = 0;
			fx = {};
			duration_ = ..bass.play(,handle);
			setEQ("new");
			return;	
		}
		
		..binFM.monitor.info("++--++--++");
		// 初始化下一首歌的播放
		..started = false;
		..gettingLrc = false;
		..lrcGot = false;
		..lrc_list = {};
		..line1=""; ..line2="";
		..autoLikeChecked = false;
		..binFM.monitor.info('\r\n=======新的曲目=======  '++tostring(i)++'\r\n');
	
		// 获取需要播放的项目
		if(!..songs_noAd) return false;
		if(i>#..songs_noAd) i = 1;
		if(i<1) i = #..songs_noAd;
		if(!..songs_noAd[i] || !..songs_noAd[i]["url"]) {
			if(#..sons_noAd==1) return;
			else start(i+1);
		}
		
		if(state()=="playing") {
			// 先淡出再播放下一首		
			..bass.slideVolume(-1,700);	
			..mainForm.setTimeout(function() {
					..bass.play(..songs_noAd[i]["url"],,i); // 此处仅用于获取流句柄
				},700);	
		}
		else {
			..bass.play(..songs_noAd[i]["url"],,i); 
		}
		..now_i = i;
		
		// 如果长时间还没有开始播放，则自动跳到下一首
		if(..timeNext) ..mainForm.killtimer(..timeNext);
		..timeNext = ..mainForm.setTimeout(..tryNext,5000);
	}
	
	stop = function() {
		..bass.stop();
		if(..fftShowing) ..fftForm.close();
	}
		
	state = function(){
		var result;
		try {
			result = ..bass.isActive();
		}
		..binFM.monitor.info("bass状态",result);
		if(!result) return "";
		if(result==0) return "stopped";
		if(result==1) return "playing";
		if(result==2) return "paused";
		if(result==3) return "stalled";
	}
	
	
	resume = function() {
		..bass.play();
		setVolume(0);
		..bass.slideVolume(..volume,700);
	}
	
	pause = function() {
		..bass.slideVolume(-1,700);
	}
	
	duration = function() {
		if(!duration_ || duration_==0) duration_ = ..bass.duration();
		return duration_;
	}
	
	position = function() {
		return ..bass.getPosition();
	}
	
	setPosition = function(pos) {
		if(!tonumber(pos)) return false;
		..bass.setPosition(pos);
	}
	
	volume = function(){
		return ..bass.getVolume();
	}
	
	setVolume = function(vol){
		if(tonumber(vol)==null) return false;
		..bass.setVolume(vol);
	}
	
	loop = function(isLoop) {
		..bass.loop(isLoop);
	}


	setEQ = function(flag="") {
		if(!..enableEQ) return;
		if(flag=="new") fx = {};
		
		BASS_DX8_PARAMEQ = class {
    		float fCenter;
    		float fBandwidth;
    		float fGain;
		}
		var bass_eq = {};
		
		for(i=1;10;1){
			bass_eq[i] = BASS_DX8_PARAMEQ();
			bass_eq[i].fBandwidth = ..eqSetups[..eqId][2];
			if(!fx[i]) fx[i] = ..bass.fxHandle(fx[i]);
		}
		bass_eq[1].fCenter = 80;
		bass_eq[2].fCenter = 120;
		bass_eq[3].fCenter = 170;
    	bass_eq[4].fCenter = 250;
    	bass_eq[5].fCenter = 370;
    	bass_eq[6].fCenter = 600;
    	bass_eq[7].fCenter = 1000;
    	bass_eq[8].fCenter = 3000;
     	bass_eq[9].fCenter = 6000;   	
      	bass_eq[10].fCenter = 8000;
  		..bass.fxReset();    	   	   	
    	for(i=1;10;1) {
    		bass_eq[i].fGain = ..eqSetups[..eqId][i+2];
			..bass.setFxParams(fx[i],bass_eq[i]);
		}   	
  	}

	removeEQ = function() {
		for(i=1;10;1){
			if(fx[i]) ..bass.removeFx(fx[i]);
		}
		..bass.fxReset();
		fx = {};	
	}

}
