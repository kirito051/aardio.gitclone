import chrome.app;
import fsys.environment;
//读写ini文件
import console;
import fsys.ini;

import process;
import chrome.path;
import winex;
import iniHosts;

var app = chrome.app();
/*
在下面的external对象中指定允许chrome中使用JS直接调用的函数
在网页中直接引用"/aardio.js"下面的external 会自动转换为js中的aardio对象.
"/aardio.js"是由 aardio虚拟的JS文件(不用自己准备这个文件)。
*/
app.external = {
    
    //获取hosts
    hosts = function(){
        return fsys.hosts.loadText();
    }
    //手动刷新dns缓存
    clearCache = function(){
        fsys.hosts.flushDns();
       	
		var prc = process(chrome.path())
		var hwnd = winex.waitEnabled(,,,,prc.id)
		win.delay(500)
		key.combine("CTRL","SHIFT","DELETE") 
		win.delay(1000) 
		key.repeat("ENTER",2)
		win.delay(1000)
		key.combine("ALT","F4")  
		return true;
    }
    //新建
    create = function(name,ip){
        return  iniHosts().createSection(name,ip);
    }
    //获取全部配置
    getConfig = function(){
       return  iniHosts().getAllSections();
    }
    //更新
    update = function(oldName,newName,status,data,ip){
    	return  iniHosts().updateSection(oldName,newName,status,data,ip);
    }
    //删除
    del = function(name){
         return  iniHosts().delSection(name);
    }
}

//WebSocke/RPC中遇到的错误都会触发这个函数,可以在这里自定义错误处理方式
app.ws.onError = function(hSocket,err){
	errput(err,"chrome/rpc error");//当然也可以在 global.onError 里自定义全部的错误信息怎么显示
}

var rs
var err
//正式的启动chrome进程，aardio会自动把下面的文件转换为服务端请求
if( !_STUDIO_INVOKED ){
    rs,err = app.start("/res/index.aardio");
}else{
    rs,err = app.start("http://localhost:8080/res/");
}
if(err){
	win.msgbox(err,"error")
}

//网页中可以调用 aardio.quit() 退出,也可以直接关闭chrome窗口退出
win.loopMessage();

  