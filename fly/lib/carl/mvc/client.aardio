
// +----------------------------------------------------------------------
// | carlmvc [ aardio's in,just do it. ]
// +----------------------------------------------------------------------
// | Copyright (c) 2016-2017 http://aardio.org All rights reserved.
// +----------------------------------------------------------------------
// | Licensed ( http://www.apache.org/licenses/LICENSE-2.0 )
// +----------------------------------------------------------------------
// | Author: carl <45212348@qq.com>
// +----------------------------------------------------------------------

import web.json;
namespace carl.mvc

client = class {
	ctor( mvcname = "mvc", tabConfig){
		this.mvcname = mvcname;
		this.webpath = tabConfig.webpath;
		this.appdir = tabConfig.appdir;//mvc应用所在目录
		this.debug = tabConfig.debug;
		this.configController = tabConfig.controller : defaultConfig.controller;
		this.configView = tabConfig.view : defaultConfig.view;
	};
	
	loadController = function(controllerPath){
		if( !#controllerPath ) return ; 
		
		if( this.loadControllerBefore ){
			var ok,err = this.loadControllerBefore(controllerPath);
			if( ok === false ) return false,err;
		}
		
		var tabCtl = this.configController;
		var controllerDir,controllerName = string.match(controllerPath,"([\w\.]*?)\.?(\w+)$");
		if(!controllerName) return null,string.format('404 Not Found "%s" controller path.', controllerPath),404;

		var ctldir = string.replace(tabCtl.dir,"\/","\");
		if(#controllerDir){
			controllerDir = string.trim(controllerDir,".");
			controllerDir = string.replace(controllerDir,"\.","\");
			ctldir += controllerDir ++ "\";
		}

		var ctlPath = string.concat(ctldir,controllerName,tabCtl.ext,".aardio");
		if(!..io.exist(ctlPath)) return null,string.format('404 Not Found "%s" controller file.', ctlPath),404;

		var tabController = {};	
		var f,err = loadcode(ctlPath);
		if(!f) return null,err;

		var ok,err = call(f,tabController);
		if( !ok ) return null,err; 

		var ctlspace = string.concat(tabCtl.nameSpace,".",controllerPath);
		var controller,,cspace = getByNamespace(ctlspace,,true);
		if( !controller ) return null,string.format('Failed to import "%s" controller namespace.', ctlspace);
		controller.nameSpace = cspace;
		controller.ctlPathFile = ctlPath;
		
		if( this.loadControllerAfter ){
			var ok,err = this.loadControllerAfter(controller, controllerPath);
			if( ok === false ) return false,err;
		}
		
		return controller;
	}
	
	loadControllerAction = function(method){
		if( !#method ) return ; 
		method = string.trim(method);
		var controllerPath,funcName = string.match(method,"([\w\.]+?)\.(\w+)$");
		if( !funcName ) return this.errlog(string.format('404 Not Found "%s" controller action path.', method),404);
		
		var controllerFunc,err,code = this.loadController(controllerPath);
		if( controllerFunc === false ) return this.errlog(err);
		if( !controllerFunc ) return this.errlog(err,code);

		controllerFunc.string = ..string;
		controllerFunc.table = ..table;
		controllerFunc.request = ..request;
		controllerFunc.response = ..response;
		controllerFunc.print = ..print;
		controllerFunc.time = ..time;
		controllerFunc.math = ..math;
		controllerFunc.io = ..io;

		var controller;
		if( type(controllerFunc) == type.class ){//控制器支持class类库
			var tc = { call(controllerFunc,,funcName,controllerPath) };
			if(!tc[1]) return this.errlog(tc[2]);
			table.remove(tc);
			controller = tc[1];
			if( !controller ) return this.loadActionAfter(,controllerPath,funcName, table.unpackArgs(tc));		
			if( type.table != type(controller) ) return this.errlog(string.format('"%s" controller,构造函数ctor:返回值不是table对像',controllerFunc.nameSpace)); 
		}
		else {
			controller = controllerFunc;
		}

		var func,,fname = getByNamespace(funcName,controller,true);
		if( type.function != type(func) ) return this.errlog(string.format('404 Not Found "%s" action in "%s" controller.', funcName,controllerFunc.nameSpace),404);
		funcName = fname;
		
		controller.view = {};
		controller.view.loadcode = function(viewpath, ...){
			var filename = string.replace(viewpath,"\.","\");
			
			var tView = this.configView;
			var viewFullPath = string.concat(tView.dir,filename,tView.ext,".aardio");
			
			if( !..io.exist(viewFullPath) ) return this.errlog(string.format('Not Found "%s" view file.', viewFullPath));
			
			if( this.loadViewBefore ){
				var ok,err = this.loadViewBefore(controller, controllerPath, funcName, viewpath, viewFullPath);
				if( ok === false ) return this.errlog(err);
			}
			
			var f,err = loadcode(viewFullPath);
			if(!f) return this.errlog(err);

			var t = { call(f,controller,...) };
			var ok,err = t[1],t[2];
			if( !ok ) return this.errlog(err);
			table.remove(t);
			if( this.loadViewAfter ) this.loadViewAfter(controller, controllerPath, funcName, viewpath, viewFullPath, table.unpackArgs(t));
			return table.unpackArgs(t);
		}

		var tParam = {};
		if( string.startWith(..request.contentType:"","application/json",true) ){
			var postdata = string.trim(..request.postData():"");
			if( postdata[1] == '{'# || postdata[1] == '['# ){
				try{
					tParam[1] = ..web.json.parse(postdata);
				}
				catch(e){
					err = e;
				}
				if(!tParam[1]) return this.errlog(err);
			}
		}
		
		..request.post := {};
		var len = #tParam;
		var t,err = getMethodParameters(controllerFunc.ctlPathFile,funcName);
		if(!t) return this.errlog(string.format('controller path: "%s",Error: "%s"', controllerFunc.ctlPathFile,err));
		for(i=len+1;#t;1){
			var param = string.lower(t[i]);
			tParam[i] = ..request.get[param] : ..request.post[param];
		}

		if( this.loadActionBefore ){
			var ok,err = this.loadActionBefore(controller, controllerPath, funcName, table.unpackArgs(tParam));
			if( ok === false ) return this.errlog(err);
		}

		var t = { call(func,controller,table.unpackArgs(tParam)) };
		var ok,err = t[1],t[2];
		if( !ok ){
			if(#err) err = string.format('controller: "%s",action: "%s" Run Error.\r\n' ++ err, controllerFunc.nameSpace,funcName);
			return this.errlog(err);
		}
		table.remove(t);
		this.loadActionAfter(controller, controllerPath, funcName, table.unpackArgs(t));
		if(..carl.session.close) ..carl.session.close();
	}
	
	loadActionAfter = function(controller, controllerPath, funcName, ...){
		this.defaultResponse(...);
	}
	
	defaultResponse = function(...){
		var tab,err = ...;
		if( tab === null && err === null ) return ;
		var t;
		if(tab === true && type(err) === type.table){
			t = {};
			t.Success = true;
			t.Result = err;
		}
		elseif( type(tab) === type.null || type(tab) === type.boolean){
			t = {};
			t.Message = err;
			t.Success = tab ? true : false;
		}
		else {
			t = tab;
		}
		if(type(t) == type.table){
			..response.contentType = "application/json; charset=utf-8";
			t = ..web.json.stringify(t,false,false);
		}
		..print(t);
	}	

	errlog = function(err,code){
		if( !#err ) return ;
		..carl.mvc.common.error(err,this.debug,code);
	}
	
	urlAction = function(funcName,controller){
		var url = this.webpath ++ "?_method=";
		if( controller ){
			return string.concat(url,controller,".", funcName);
		}
		else {
			return string.concat(url,funcName);
		}
	}
	
	loadcode = function(path, ...){
		path = this.appdir ++ path;
		return loadcode(path, ...);
	}
	
	loadcodex = function(path, ...){
		var f,err = this.loadcode(path);
		if(!f) return this.errlog(err);
		f(...);
	}
}

namespace client

string = ..string;
table = ..table;

getMethodParameters = function(path,funcName){
	var str = string.load(path);
	if(string.left(str,7) == "=aardio") return null,"控制器代码不允许编译";
	var params,n = "",0;
	for param in string.gmatch(str,"\A" ++ funcName ++ "\s*\=\s*function\s*\((.*?)\)") { 
		params = param;
		n++;
	}
	if(n>1) return null,'不允许定义多个"' ++ funcName ++ '"函数'; 
	params = string.replace(params,"\s+","");
	return string.split(params,","); 
}

defaultConfig = {
	controller = {
		dir = "\mvc\controller\";
		ext = "Ctl";
		nameSpace = "mvc.controller";
	}
	view = {
		dir = "\mvc\view\";
		ext = "";
		nameSpace = "mvc.view";
	}
}

getByNamespace = function(k,t,bool){
	if(!t){ t = ..global; }
	var p,m = ..string.match(k,"\.*(.+)(%\[\])$");
	if( m )
		m = eval(..string.trim(m,"[]"));
	else
		p,m = ..string.match(k,"\.*(.+)\.([^.]+)$");
	if( m !== null ){ 
		t = getByNamespace(p,t,bool); 
		if(t){
			if(bool) for(e in t){if(..string.lower(e)==..string.lower(m)){m=e;break;}}
			return t[m],t,m;
		} 
	}
	else{
		if(bool) for(e in t){if(..string.lower(e)==..string.lower(k)){k=e;break;}}
		return t[k],t,k; 
	};
};

/**intellisense(carl.mvc)
client = mvc库
client("mvc", tabConfig) = 创建一个mvc应用,参数:mvc名,tabConfig
client() = !carlmvc.
getByNamespace = 与用法与table.getByNamespace一样,增加第三个参数,true忽略大写小
end intellisense**/

/**intellisense(!carlmvc)
loadController( = 加载一个控制器,参数:控制器路径\n如控制器文件是\mvc\controller\defaultCtl.aardio,参数只需写"default"\n控制器路径支持子目录
loadController(.("控制器路径") = 参数:控制器路径\n如控制器文件是\mvc\controller\defaultCtl.aardio,参数只需写"default"\n控制器路径支持子目录
loadControllerAction( = 执行控制器里的操作函数,参数:操作函数路径\n比如:控制器defaultCtl.aardio中的index函数,参数只需写"default.index"
loadControllerAction(.("操作函数路径") = 比如:执行控制器defaultCtl.aardio中的index函数,参数只需写"default.index"
loadControllerBefore = @.loadControllerBefore = function(controllerPath/*控制器路径名*/){
	/*控制器加载之前,触发此事件,如果返回false,不会执行控制器*/
	__
}
loadControllerAfter = @.loadControllerAfter = function(controller/*控制器对像*/, controllerPath/*控制器路径名*/){
	/*控制器加载之后,触发此事件,如果返回false,不会执行控制器内的函数*/
	__
}
loadActionBefore = @.loadActionBefore = function(controller/*控制器对像*/, controllerPath/*控制器路径名*/, actionName/*操作函数名称*/){
	/*控制器中的函数执行之前,触发此事件,如果返回false,不会执行函数*/
	__
}
loadActionAfter = @.loadActionAfter = function(controller/*控制器对像*/, controllerPath/*控制器路径名*/, actionName/*操作函数名称*/, .../*函数返回值*/ ) { 
	/*控制器中的函数执行之后,触发此事件,框架已封装,您可以重写此函数*/
	var tab,err = ...;
	__
}
loadViewBefore = @.loadViewBefore = function(controller/*控制器对像*/, controllerPath/*控制器路径名*/, actionName/*操作函数名称*/,viewpath/*视图路径*/, viewFullPath/*视图文件完整路径*/){
	/*视图加载之前,触发此事件,如果返回false,不会加载视图*/
}
loadViewAfter = @.loadViewAfter = function(controller/*控制器对像*/, controllerPath/*控制器路径名*/, actionName/*操作函数名称*/,viewpath/*视图路径*/, viewFullPath/*视图文件完整路径*/,.../*函数返回值*/){
	/*视图加载之后,触发此事件*/
}
errlog = @.errlog = function(err){
	/*发生错误时,触发此事件,框架已封装,您可以重写此函数*/
}
loadcode("mvc\代码路径") = 用法与loadcode相同,参数只能是相对于\application\应用目录下的文件路径
loadcodex("mvc\代码路径") = 用法与loadcodex相同,参数只能是相对于\application\应用目录下的文件路径
urlAction(actionName,controllerPath) = 生成MVC访问完整的URL,参数:操作函数名,控制器路径名
configController = @.configController({
		/*配置控制器*/
		dir = "mvc\controller\";		/*控制器工作目录,是相对于\application\应用目录下*/
		ext = "Ctl";					/*控制器后缀*/
		nameSpace = "mvc.controller";	/*控制器名字空间*/
	})
configView = @.configView({
		/*配置视图*/
		dir = "mvc\view\";		/*视图工作目录,是相对于\application\应用目录下*/
		ext = "";				/*视图后缀*/
	})
logdir = @.logdir = ROOT_DIR ++ "log\";/*错误日志目录,请使用绝对路径,ROOT_DIR = carl.mvc.common.fullpath("..\")*/
webpath = @.webpath = "/index.aardio";/*web网站访问入口文件,相对路径*/
appdir = @.appdir = ROOT_DIR ++ "application\";/*mvc应用目录,请使用绝对路径,ROOT_DIR = carl.mvc.common.fullpath("..\")*/
end intellisense**/

/**intellisense()
owner.view.loadcode( = 加载mvc视图,只能在控制器里调用\n参数:视图路径,参数\n用法与loadcodex类同\n说明:参数@1视图路径是相对于视图工作目录下,其他参数作为调用参数传给被调用的视图文件,\n在被调用视图文件中使用var a,b,c = ... 的格式获取\n如视图文件是\mvc\view\default\index.aardio,第一个参数只需写"default.index"
owner.view.loadcode(.("视图路径",->->->) = 视图文件是\mvc\view\default\index.aardio,参数@1只需写"default.index"\n其他参数作为调用参数传给被调用的视图文件,\n在被调用视图文件中使用var a,b,c = ... 的格式获取
end intellisense**/
